swagger: '2.0'
info:
  description: >-
    Boot Script Service (BSS) manages the iPXE boot scripts that coordinate the boot process
    for nodes, and enables basic association of boot scripts with nodes. When nodes initially
    power on, boot, or reboot, they consult BSS for their target artifacts and boot parameters.
    The boot scripts are generated on demand from the information that is entered and
    delivered to the requester during an iPXE boot.
    The boot scripts supply a booting node with a pointer to the necessary images (kernel and initrd)
    that are stored in the artifact repository and a set of boot-time parameters.

    The BSS API allows the caller to retrieve an iPXE boot script from the
    boot script server, and to set, update, delete, and retrieve boot script parameters for
    each host in a system. BSS works with all nodes that are known to HSM and do not have
    the hardware role as Management in HSM.

    ## Resources

    ### /boot/v1/bootscript

    Retrieve the iPXE boot script for a host. One of the three parameters is required - name,
    MAC, or NID.

    ### /boot/v1/bootparameters

    Set, update, delete, and retrieve boot script parameters for specific hosts.

    ### /boot/v1/hosts

    Retrieve the latest host information like state, NID, and ID from HSM.

    ### /boot/v1/dumpstate

    Dump internal state of boot script service for debugging purposes.

    ## Workflows

    ### Define Boot Parameters for all Nodes

    #### POST /boot/v1/bootparameters

    Define boot parameters. Specify the host as Default. While BSS allows for fine grained
    control of individual nodes, the Default tag is typically more convenient,
    especially for a large system.


    Along with the host, the kernel, initrd, and params should be defined.
    The kernel is required for BSS to generate a boot script, but initrd and
    params are typically needed for the node to boot successfully.
    The kernel and initrd fields contain a URL to the respective images.
    The params field is a string that will be passed to the kernel during the boot process.

    #### GET /boot/v1/bootscript

    Verify the boot script to ensure it's what you want

    ### Update Boot Parameters

    #### GET /boot/v1/hosts

    Retrieve list of hosts known to HSM and select the host for which
    the boot parameters need to be changed.

    #### GET /boot/v1/bootparameters

    Retrieve the boot parameters for the specific host.

    #### PUT /boot/v1/bootparameters

    Update boot parameters for the host.

    #### GET /boot/v1/bootparameters

    Verify the boot parameters for the specific host.

  version: 1.0.0
  title: Boot Script Service
host: 'bootscriptserver:27778'
basePath: /apis/bss
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
paths:
  /meta-data:
    get:
      summary: Retrieve cloud-init meta-data
      tags:
        - cli_ignore
      operationId: meta_data_get
      produces:
        - application/json
      parameters:
        - name: key
          in: query
          type: string
          description: >-
           Specific sub key(s) to query. Separated by periods.
      responses:
        '200':
          description: meta-data for node
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: >-
            Does Not Exist - Either the host, MAC or NID are unknown and there
            is no Default, or the existing entry does not specify a kernel image
            for boot.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /user-data:
    get:
      summary: Retrieve cloud-init user-data
      tags:
        - cli_ignore
      operationId: user_data_get
      produces:
        - text/yaml
      responses:
        '200':
          description: user-data for node
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: >-
            Does Not Exist - Either the host, MAC or NID are unknown and there
            is no Default, or the existing entry does not specify a kernel image
            for boot.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /phone-home:
    post:
      summary: Post cloud-init
      tags:
        - cli_ignore
      operationId: phone_home_post
      # produces:
      #   - text/yaml
      parameters:
        - name: phoneHomeData
          in: body
          schema:
            $ref: '#/definitions/CloudInitPhoneHome'
      responses:
        '200':
          description: Meta data for node
          schema:
           $ref: '#/definitions/BootParams'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: >-
            Does Not Exist - Either the host, MAC or NID are unknown and there
            is no Default, or the existing entry does not specify a kernel image
            for boot.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /boot/v1/bootscript:
    get:
      summary: Retrieve iPXE boot script
      tags:
        - bootscript
      description: >-
        Retrieve iPXE boot script for the host specified by the MAC parameter.
        Alternatively, for test/convenience purposes, use the name or the NID parameter to
        specify the host name or xname.
        Do not specify more than one parameter (MAC, name, or NID) in the request as
        results are undefined if they do not all refer to the same node.

      operationId: bootscript_get
      produces:
        - text/plain
      parameters:
        - name: mac
          in: query
          type: string
          description: >-
           MAC address of host requesting boot script
        - name: name
          in: query
          type: string
          description: >-
           Name of host requesting boot script or xname
        - name: nid
          in: query
          type: integer
          description: Node ID (NID) of host requesting boot script
        - name: retry
          in: query
          type: integer
          description: >-
            Number of times requesting script without a successful boot. This
            parameter is mostly used by the software itself to keep track of retries.
        - name: arch
          in: query
          type: string
          description: >-
           The architecture value from the iPXE variable ${buildarch}. This
           parameter is mostly used by the software itself.

        - name: ts
          in: query
          type: integer
          description: >-
            Timestamp for when the HSM state info needs to be
            up to date by.  This is the Unix concept of time, the number
            of seconds since Jan 1, 1970 UTC. This parameter is mostly used by the software
            itself.
      responses:
        '200':
          description: Boot script for requested MAC address
          schema:
            type: string
            example: |
              #!ipxe
              kernel --name kernel http://rgw-vip.nmn/boot-images/00000000-0000-0000-0000-000000000000/kernel initrd=initrd console=ttyS0,115200 bad_page=panic crashkernel=512M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu.passthrough=on numa_interleave_omit=headless oops=panic pageblock_order=14 rd.neednet=1 rd.retry=10 rd.shell systemd.unified_cgroup_hierarchy=1 ip=dhcp quiet spire_join_token=00000000-0000-0000-0000-000000000000 root=craycps-s3:s3://boot-images/00000000-0000-0000-0000-000000000000/rootfs:00000000000000000000000000000000-000:dvs:api-gw-service-nmn.local:300:hsn0,nmn0:0 nmd_data=url=s3://boot-images/00000000-0000-0000-0000-000000000000/rootfs bos_session_id=000000-0000-0000-0000-000000000000 xname=x3000c0s17b3n0 nid=3 bss_referral_token=00000000-0000-0000-0000-000000000000 ds=nocloud-net;s=http://10.92.100.81:8888/ || goto boot_retry
              initrd --name initrd http://rgw-vip.nmn/boot-images/00000000-0000-0000-0000-000000000000/initrd || goto boot_retry
              boot || goto boot_retry
              :boot_retry
              sleep 30
              chain https://api-gw-service-nmn.local/apis/bss/boot/v1/bootscript?mac=b4:2e:99:df:eb:bf&retry=1

        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: >-
            Does Not Exist - Either the host, MAC, or NID are unknown and there
            is no Default, or the existing entry does not specify a kernel image
            for boot.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /boot/v1/bootparameters:
    get:
      summary: Retrieve boot parameters
      tags:
        - bootparameters
      description: >-
        Retrieve the boot parameters for one or more hosts.
        If no parameters are provided, then all known parameters are returned.
        Filtering can be accomplished by either providing a body of the boot parameters or
        one of the three query parameters: host names, MAC addresses, and/or NIDs.
        The body of boot parameters can also provide a kernel or initrd path which will be
        returned along with any bootparameter settings as well.
        Alternatively, query parameters name=, mac=, and/or nid= can provide the
        filtering of individual items or comma-separated lists of items.
        The response is a list of boot parameter items.
        These items will include the individual kernel and initrd images, along
        with any related boot parameters.
        If filtering parameters are provided, each parameter will provide a
        result if one exists.
        Note that the kernel and initrd images are specified with a URL or path.
        A plain path will result in a TFTP download from this server.
        If a URL is provided, it can be from any available service which iPXE
        supports, and any location that the iPXE client has access to.
      parameters:
        - name: bootparams
          in: body
          schema:
            $ref: '#/definitions/BootParams'
        - name: name
          in: query
          type: string
          description: Host name or tag name of boot parameters to return
        - name: mac
          in: query
          type: string
          description: MAC Address of host of boot parameters to return
        - name: nid
          in: query
          type: integer
          description: NID of host of boot parameters to return
      responses:
        '200':
          description: List of currently known boot parameters
          schema:
            type: array
            items:
              $ref: '#/definitions/BootParams'
        '400':
          description: Bad Request - BootParams value incorrect
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Does Not Exist - Cannot find host, MAC, or NID'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create boot parameters
      tags:
        - bootparameters
      description: >-
        Define boot parameters. Specify a list of one of the
        following parameters: hosts, MACs, or NIDs along with the boot parameters to
        associate with those hosts.
        You can either use specific hosts or specify a general tag for hosts.
        Specific hosts can be specified either by a hostname (xname), a NID, or a MAC address.
        It is recommended to use the xname. Otherwise, a tag can be used for the hosts parameter.
        A tag is "Default", or one of the roles that a node may be defined as in the
        hardware state manager (HSM). Some of the HSM roles like 'Compute', 'Storage', 'System',
        and 'Application' can be specified as hosts and are managed similar to specific hosts.
        While BSS allows for fine grained control of individual nodes, the tags are typically
        more convenient, especially for a large system.


        Along with the hosts, there must be a kernel image reference in order for the boot
        script service to be able to generate a boot script.
        In most cases, there should also be an initrd image reference, unless the kernel
        being booted is standalone and does not require an initrd image.
        Finally, the params entry can be used to specify boot parameters for the
        specified hosts.

        Note that if there is no existing params entry for a host, a new entry for the
        host is created. If an entry already exists for the host, this request will fail.


        Special entries for HSM roles like 'Compute', 'Storage' and 'Application' can also
        be specified as hosts, and are managed similar to specific hosts.
        If an error occurs during the save/update, processing will stop after the first error.
        Subsequent hosts in the list will not be processed.
      parameters:
        - name: bootparams
          in: body
          schema:
            $ref: '#/definitions/BootParams'
      responses:
        '201':
          description: successfully created boot parameters
          headers:
            BSS-Referral-Token:
              type: string
              description: The UUID that will be included in the boot script. A new UUID is generated on each POST and PUT request.
        '400':
          description: Bad Request - Invalid BootParams value
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Set boot parameters
      tags:
        - bootparameters
      description: >-
        Set or update boot parameters for one or more hosts.
        Specify a list of one of the following parameters: hosts, MACs, or NIDs along with
        the boot parameters to associate with those hosts.


        You can either use specific hosts or specify a general tag for hosts.
        Specific hosts can be specified either by a hostname (xname), a NID, or a MAC address.
        It is recommended to use the xname. Otherwise, a tag can be used for the hosts parameter.
        A tag is "Default", or one of the roles that a node may be defined as in the
        hardware state manager (HSM). Some of the HSM roles like 'Compute', 'Storage', 'System',
        and 'Application' can be specified as hosts and are managed similar to specific hosts.
        While BSS allows for fine grained control of individual nodes, the tags are typically
        more convenient, especially for a large system.


        Along with the hosts, there must be a kernel image reference in order for the boot
        script service to be able to generate a boot script.
        In most cases, there should also be an initrd image reference, unless the kernel
        being booted is standalone and does not require an initrd image.
        Finally, the params entry can be used to specify boot parameters specific to the specified hosts.
        If there are no boot params stored for one or more hosts, then a new entry for that host
        will be created.
        For kernel, initrd and params values, an existing value will be replaced. The
        params value is a replacement of the existing values.
        If the params value does not specify one or more values, any existing values are
        removed.
        If an error occurs during the save/update, processing will stop
        after the first error.  Subsequent hosts in the list will not be
        processed.
      parameters:
        - name: bootparams
          in: body
          schema:
            $ref: '#/definitions/BootParams'
      responses:
        '200':
          description: successfully update boot parameters
          headers:
            BSS-Referral-Token:
              type: string
              description: The UUID that will be included in the boot script. A new UUID is generated on each POST and PUT request.
        '400':
          description: Bad Request - Invalid BootParams value
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Does Not Exist - Cannot find specified host, MAC, or NID'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update existing boot parameters
      tags:
        - bootparameters
      description: >-
        Update an existing entry with new boot parameters while retaining
        existing settings for the kernel and initrd settings. The entry only
        needs to specify one or more hosts and the new boot parameters without
        the need to specify the kernel and initrd entries.
      parameters:
        - name: bootparams
          in: body
          schema:
            $ref: '#/definitions/BootParams'
      responses:
        '200':
          description: Successfully update boot parameters
        '400':
          description: Bad Request - Invalid BootParams value.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Does Not Exist - Cannot find entry for specified host, MAC, or NID'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete existing boot parameters
      tags:
        - bootparameters
      description: >-
        Remove an existing boot parameter settings for one or more hosts, as specified by
        hosts, MACs, or NIDs.
        If you specify a kernel or initrd image, the image entry is removed, and the
        references by any existing hosts are removed.
        Note that this can leave a host unbootable, and so will need to be updated with new
        image references before they will be bootable.
      parameters:
        - name: bootparams
          in: body
          schema:
            $ref: '#/definitions/BootParams'
      responses:
        '200':
          description: Successfully deleted the appropriate entry or entries
        '400':
          description: Bad Request - Invalid BootParams value.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Does Not Exist - Cannot find specified host, MAC, or NID'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
  /boot/v1/hosts:
    get:
      summary: Retrieve hosts
      tags:
        - hosts
      description: >-
        Retrieve list of known hosts obtained from HSM.
        This list can be filtered by specifying one or more of the query
        parameters name=, mac=, and/or nid=.
        If any of these parameters are specified, then only host information for
        those items are returned in the response.
        Multiple hosts can be specified for any of these parameters by
        specifying a comma-separated list of items, or by providing the query
        parameter itself more than once.
        If the same host is referenced more
        than once, its information will be returned multiple times.
        In particular, if a host is referenced by both its host name and NID
        and/or MAC address, this same host information will be returned once for
        each reference.
      parameters:
        - name: name
          in: query
          type: string
          description: Host name or tag name of boot parameters to return
        - name: mac
          in: query
          type: string
          description: MAC Address of host of boot parameters to return
        - name: nid
          in: query
          type: integer
          description: NID of host of boot parameters to return
      responses:
        '200':
          description: Return list of hosts and associated attributes known to BSS
          schema:
            $ref: '#/definitions/HostInfo'
    post:
      summary: Retrieve hosts
      tags:
        - hosts
      description: Retrieve the latest host information from HSM.
      responses:
        '204':
          description: Successfully retrieved current state from HSM.
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
  /boot/v1/dumpstate:
    get:
      summary: Retrieve dumpstate
      tags:
        - dumpstate
      description: >-
        Dump internal state of boot script service for debugging purposes. Return known
        hosts and associated information, along with the known boot parameter
        info.
      responses:
        '200':
          description: Return internal service state
          schema:
            $ref: '#/definitions/StateInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
  /boot/v1/endpoint-history:
    get:
      summary: Retrieve access information for xname and endpoint
      tags:
        - endpoint-history
      description: >-
                   Retrieve access information for xname and endpoint. Every time a node requests special
                   types of endpoint (its boot script or cloud-init data) that is recorded in the database. This is
                   useful for determining a number of things most notably as a way to monitor boot progress.
      parameters:
        - name: name
          in: query
          type: string
          description: Xname of the node.
        - name: endpoint
          in: query
          type: string
          enum:
            - bootscript
            - user-data
          description: The endpoint to get the last access information for.
      responses:
        '200':
          description: Endpoint access information
          schema:
            type: array
            items:
              $ref: '#/definitions/EndpointAccess'
  /boot/v1/service/status:
    get:
      summary: "Retrieve the current status of BSS"
      tags:
      - service-status
      - cli_ignore
      description: |
        Retrieve the current status of the BSS service itself.
        
        This endpoint can be used as a liveness probe for the BSS to determine if it is alive or dead.
      responses:
        '200':
          description: 'The BSS REST API is alive and accessible.'
          schema:
            type: object
            properties:
              bss-status:
                type: string
                enum: ["running"]
                description: Current status of BSS.
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
  /boot/v1/service/etcd:
    get:
      summary: "Retrieve the current connection status to ETCD"
      tags:
      - service-status
      - cli_ignore
      description: |
        Retrieve the current connection status to the BSS ETCD database.
        
        The connection to ETCD will be tested by writing a value to ETCD, and then reading it
        back from the database. If the value is successfully writen to ETCD and read back as the 
        same value, then the connection to ETCD is considered to be connected. Otherwise, there
        is a connection error.
        
      responses:
        '200':
          description: 'The ETCD database connection is healthy.'
          schema:
            type: object
            properties:
              bss-status-etcd:
                type: string
                enum: ["connected"]
                description: Current connection status to ETCD.
        '500':
          description: 'The ETCD database connection is unhealthy.'
          schema:
            type: object
            properties:
              bss-status-etcd:
                type: string
                enum: ["error"]
                description: Current connection status to ETCD.
            
  /boot/v1/service/hsm:
    get:
      summary: "Retrieve the current connection status to HSM"
      tags:
      - service-status
      - cli_ignore
      description: | 
        Retrieve the current connection status to the Hardware State Manager (HSM).
        
        The connection to HSM will be tested by querying a HSM endpoint to verify HSM
        is alive.

      responses:
        '200':
          description: 'The HSM connection is healthy.'
          schema:
            type: object
            properties:
              bss-status-hsm:
                type: string
                enum: ["connected"]
                description: Current connection status to HSM.
        '500':
          description: 'The HSM connection is unhealthy.'
          schema:
            type: object
            properties:
              bss-status-hsm:
                type: string
                enum: ["error"]
                description: Current connection status to HSM.

  /boot/v1/service/version:
    get:
      summary: "Retrieve the service version"
      tags:
      - service-status
      - cli_ignore
      description: |
        Retrieve the current service version.
      
      responses:
        '200':
          description: 'The current running service version.'
          schema:
            type: object
            properties:
              bss-version:
                type: string
                example: 1.21.0
        '500':
          description: 'Internal Server Error. Unable to determine current running service version.'
          schema:
            type: object
            properties:
              bss-version:
                type: string
                enum: ["error"]

  /boot/v1/service/status/all:
    get: 
      summary: "Retrieve the overall service health"
      tags:
      - service-status
      - cli_ignore
      description: |
        Retrieve the overall health of the service, and determine if the service is healthy to serve
        requests as a readiness probe.
        
        This will retrieve the current BSS version and status, along with the connection status to HSM and ETCD.
        
      responses:
        '200':
          description: |
            All service checks reported a healthy status.
          schema:
            type: object
            properties:
              bss-status:
                type: string
                enum: ["running"]
              bss-status-etcd:
                type: string
                enum: ["connected"]
                description: Current connection status to ETCD.
              bss-status-hsm:
                type: string
                enum: ["connected"]
                description: Current connection status to HSM.
              bss-version:
                type: string
                example: 1.21.0
        '500':
          description: |
            One or more service checks reported an unhealthy status.
          schema:
            type: object
            properties:
              bss-status:
                type: string
                enum: ["running"]
              bss-status-etcd:
                type: string
                enum: ["connected", "error"]
                description: Current connection status to ETCD.
                example: "error"
              bss-status-hsm:
                type: string
                enum: ["connected", "error"]
                description: Current connection status to HSM.
                example: "error"
              bss-version:
                type: string
                example: 1.21.0
definitions:
  BootParams:
    description: >-
      When used as a request body, the caller sets boot parameters and specifies hosts,
      along with the kernel image path/URL and initrd path/URL. To specify hosts, use one of
      the three parameters - hosts, MACs, or NIDs.
      If MAC addresses are used, they are mapped to host names based on information
      retrieved from the hardware state manager.  Likewise, if NIDs are used, they are mapped
      to host names with the same hardware state manager info.  While the expected usage is
      to specify hosts based on their host names, the "macs" and "nids" alternatives may be
      more convenient in some contexts.

      You can also specify a general tag for hosts. A tag is 'Default',
      or one of the roles that a node may be defined as in the hardware state manager (HSM).
      Some of the HSM roles like 'Compute', 'Storage', 'System', and 'Application' can be
      specified as hosts and are managed similar to specific hosts. While BSS allows for
      fine grained control of individual nodes, the tags are typically more convenient,
      especially for a large system.


      Alternatively, if you specify a kernel or initrd image and params, but no host, MAC,
      or NID, the boot script service will associate the specified params with the specified
      kernel or initrd image.
      When used as a response body, identifies the hosts available for booting using either
      hosts, MACs, or NIDs, depending on which parameter was used in the request.
    type: object
    properties:
      hosts:
        type: array
        description: host names
        items:
          type: string
        example: [ "x0c0s2b0n0", "x0c0s3b0n0" ]
      macs:
        type: array
        description: MAC addresses
        items:
          type: string
        example: ["00:40:a6:82:f6:c5","a4:bf:01:3e:c0:a2","00:40:a6:82:f7:0c"]
      nids:
        type: array
        description: Node ID
        items:
          type: integer
        example: [ 1, 2, 3, 4 ]
      params:
        type: string
        description: Specific to the kernel that is being booted.
        example: "console=tty0 console=ttyS0,115200n8 initrd=initrd-4.12.14-15.5_8.1.96-cray_shasta_c root=crayfs nfsserver=10.2.0.1nfspath=/var/opt/cray/boot_images imagename=/SLES selinux=0 rd.shell rd.net.timeout.carrier=40 rd.retry=40 ip=dhcp rd.neednet=1 crashkernel=256M htburl=https://api-gw-service-nmn.local/apis/hbtd/hmi/v1/heartbeat bad_page=panic hugepagelist=2m-2g intel_iommu=off iommu=pt numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y quiet turbo_boost_limit=999"
      kernel:
        type: string
        description: URL or file system path specifying kernel image.
        example: "s3://boot-images/1dbb777c-2527-449b-bd6d-fb4d1cb79e88/kernel"
      initrd:
        type: string
        description: URL or file system path specifying initrd image.
        example: "s3://boot-images/1dbb777c-2527-449b-bd6d-fb4d1cb79e88/initrd"
      cloud-init:
        $ref: '#/definitions/CloudInit'

  CloudInit:
    description: Cloud-Init data for the hosts
    type: object
    properties:
      meta-data:
        $ref: '#/definitions/CloudInitMetadata'
      user-data:
        $ref: '#/definitions/CloudInitUserData'
      phone-home:
        $ref: '#/definitions/CloudInitPhoneHome'
    example: {"user-data": {"foo": "bar"}, "meta-data": {"foo":"bar"}}

  CloudInitMetadata:
    description: Cloud-Init Instance Metadata for a host.
    type: object
    additionalProperties: true

  CloudInitUserData:
    description: Cloud-Init User data for a host. 
    type: object
    additionalProperties: true

  CloudInitPhoneHome:
    description: Data sent from the Phone Home Cloud-Init module after a host's boot is complete.
    type: object
    properties:
      pub_key_dsa:
        type: string
      pub_key_rsa:
        type: string
      pub_key_ecdsa:
        type: string
      pub_key_ed25519:
        type: string
      instance_id:
        type: string
      hostname:
        type: string
      fqdn:
        type: string

  Component:
    description: This data structure is used to return host info for debug purposes
    type: object
    properties:
      ID:
        type: string
        example: "x0c0s21b0n0"
      Type:
        type: string
        example: "Node"
      State:
        type: string
        example: "Ready"
      Flag:
        type: string
        example: "OK"
      Enabled:
        type: boolean
        example: true
      Role:
        type: string
        example: Compute
      RubeRole:
        type: string
        example: Worker
      NID:
        type: integer
        example: 2
      NetType:
        type: string
        example: Sling
      Arch:
        type: string
        example: X86
      Class:
        type: string
      ReservationDisabled:
        type: boolean
        example: false
      Locked:
        type: boolean
        example: false
      FQDN:
        type: string
      MAC:
        type: array
        items:
          type: string
        example: ["00:40:a6:82:f6:c5","a4:bf:01:3e:c0:a2","00:40:a6:82:f7:0c"]
      EndpointEnabled:
        type: boolean
        example: true

  StateInfo:
    description: >-
      This data structure is used to return the full component and boot
      parameter info of the dumpstate request.
    type: object
    properties:
      components:
        type: array
        items:
          type: object
          properties:
            schema:
              $ref: '#/definitions/Component'
      params:
        type: array
        items:
          type: object
          properties:
            schema:
              $ref: '#/definitions/BootParams'
  HostInfo:
    description: >-
      This data structure is used to return the component info for a /hosts get request
    type: array
    items:
      $ref: '#/definitions/Component'
  EndpointAccess:
    description: >-
                 This data structure is used to return the endpoint access information for a given resource.
    type: object
    properties:
      name:
        type: string
        description: Xname of the node
        example: x3000c0s1b0n0
      endpoint:
        type: string
        enum:
          - bootscript
          - user-data
      last_epoch:
        type: integer
        description: Unix epoch time of last request. An epoch of 0 indicates a request has not taken place.
        example: 1635284155
  Error:
    description: Return an RFC7808 error response.
    type: object
    properties:
      type:
        type: string
      title:
        type: string
      status:
        type: integer
      detail:
        type: string
      instance:
        type: string
