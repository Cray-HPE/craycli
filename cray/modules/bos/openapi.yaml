# Copyright 2019-2021 Hewlett Packard Enterprise Development LP
# Cray Boot Orchestration Service (BOS) API Specification
openapi: "3.0.2"

info:
  title: "Boot Orchestration Service"
  version: "1.5.0"
  description: |
    The Boot Orchestration Service (BOS) applies 1 of 4 possible
    actions (boot, reboot, reconfigure, shutdown) to a list of compute nodes
    using a specified image (if applicable), with specified kernel parameters,
    over a specified network. Currently, only one network option is available.
    After boot or reboot, nodes can be reconfigured.


    The default content type for the BOS API is "application/json". Unsuccessful
    API calls return a content type of "application/problem+json" as per RFC 7807.

    ## Resources


    ### /sessiontemplate

    A session template controls the activity of BOS; it is a collection of one or more boot
    sets, combined with partition information, and
    configuration detail.

    A boot set defines a list of nodes, the image you want to boot/reboot the nodes with,
    kernel parameters to use to boot the nodes, and the network to boot the nodes over.

    ### /session

    A BOS session applies the action to the nodes in the session
    template.

    ## Workflow


    ### Create a New Session

    #### GET /sessiontemplate

    List available session templates.
    Note the *name* which uniquely identifies each session template.
    This value can be used to create a new session later,
    if specified in the request body of POST /session.

    #### POST /sessiontemplate

    If no session template pre-exists that satisfies requirements,
    then create a new session template. *name* uniquely identifies the
    session template.
    This value can be used to create a new session later,
    if specified in the request body of POST /session.

    #### POST /session

    Specify templateUuid and an
    operation to create a new session.
    The templateUuid corresponds to the session template *name*.
    A new session is launched as a result of this call.

    A limit can also be specified to narrow the scope of the session. The limit
    can consist of nodes, groups or roles in a comma-seperated list.
    Multiple groups are treated as seperated by OR, unless "&" is added to
    the start of the component, in which case this becomes an AND.  Components
    can also be preceded by "!" to exclude them.

    Note, the response from a successful session launch contains *links*.
    Within *links*, *href* is a string that uniquely identifies the session.
    *href* is constructed using the session template name and a generated uuid.
    Use the entire *href* string as the path parameter *session_id*
    to uniquely identify a session in for the /session/{session_id}
    endpoint.


    #### GET /session/{session_id}

    Get session details by session id.

    List all in progress and completed sessions.


    ## Interactions with Other APIs


    BOS works in concert with Image Management Service (IMS) to access boot images,
    and if *enable_cfs* is true then
    BOS will invoke CFS to configure the compute nodes.


    All boot images specified via the session template, must be available via IMS.


servers:
- url: https://api-gw-service-nmn.local/apis/bos
  description: The production BOS API server through a standard API gateway
- url: https://cray-bos/
  description: The service as exposed through k8s DNS service mapping
components:
  schemas:
    Healthz:
      description: Service health status
      type: object
      properties:
        etcdStatus:
          type: string
        apiStatus:
          type: string
      additionalProperties: false
    Link:
      description: Link to other resources
      type: object
      properties:
        rel:
          type: string
        href:
          type: string
      additionalProperties: false
    BootSet:
      description: |
        A boot set defines a collection of nodes and the information about the
        boot artifacts and parameters to be sent to each node over the specified
        network to enable these nodes to boot. When multiple boot sets are used
        in a session template, the boot_ordinal and shtudown_ordinal indicate
        the order in which boot sets need to be acted upon. Boot sets sharing
        the same ordinal number will be addressed at the same time.
      type: object
      properties:
        name:
          type: string
          description: |
            The Boot Set name.
        boot_ordinal:
          type: integer
          minimum: 0
          description: |
            The boot ordinal. This will establish the order for boot set operations.
            Boot sets boot in order from the lowest to highest boot_ordinal.
        shutdown_ordinal:
          type: integer
          minimum: 0
          description: |
            The shutdown ordinal. This will establish the order for boot set
            shutdown operations. Sets shutdown from low to high shutdown_ordinal.
        path:
          type: string
          description: |
            A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.
            It will be processed based on the type attribute.
        type:
          type: string
          description: |
            The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.
        etag:
          type: string
          description: |
            This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.
        kernel_parameters:
          type: string
          description: |
            The kernel parameters to use to boot the nodes.
        network:
          type: string
          description: |
            The network over which the node will boot from.
            Choices:  NMN -- Node Management Network
            pattern: '^(?i)nmn$'
        node_list:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node list. This is an explicit mapping against hardware xnames.
        node_roles_groups:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.
        node_groups:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user defined groups in SMD.
        rootfs_provider:
          type: string
          description: |
            The root file system provider.
        rootfs_provider_passthrough:
          type: string
          description: |
            The root file system provider passthrough.
            These are additional kernel parameters that will be appended to
            the 'rootfs=<protocol>' kernel parameter
      additionalProperties: false
      required: [path, type]

    CfsParameters:
      type: object
      description: |
        CFS Parameters is the collection of parameters that are passed to the Configuration
        Framework Service when configuration is enabled.
      properties:
        clone_url:
          type: string
          description: |
            The clone url for the repository providing the configuration. (DEPRECATED)
        branch:
          type: string
          description: |
            The name of the branch containing the configuration that you want to
            apply to the nodes. Mutually exclusive with commit. (DEPRECATED)
        commit:
          type: string
          description: |
            The commit id of the configuration that you want to
            apply to the nodes. Mutually exclusive with branch. (DEPRECATED)
        playbook:
          type: string
          description: |
            The name of the playbook to run for configuration. The file path must be specified
            relative to the base directory of the config repo. (DEPRECATED)
        configuration:
          type: string
          description: |
            The name of configuration to be applied.
      additionalProperties: false

    GenericMetadata:
      type: object
      description: |
        The status metadata
      properties:
        start_time:
          type: string
          description: |
            The start time
          example: "2020-04-24T12:00"
        stop_time:
          type: string
          description: |
            The stop time
          example: "2020-04-24T12:00"
        complete:
          type: boolean
          description: |
            Is the object's status complete
          example: true
        in_progress:
          type: boolean
          description: |
            Is the object still doing something
          example: false
        error_count:
          type: integer
          description: |
            How many errors were encountered
          example: 0
      additionalProperties: false
    NodeList:
      type: array
      items:
        type: string
        example: ["x3000c0s19b1n0", "x3000c0s19b2n0"]
    PhaseCategoryStatus:
      type: object
      description: |
        A list of the nodes in a given category within a phase.

        ## Link Relationships

        * self : The session object

      properties:
        name:
          type: string
          description: |
            Name of the Phase Category
          example: "Succeeded"
          pattern: '^(?i)not_started|in_progress|succeeded|failed|excluded$'
        node_list:
          $ref: '#/components/schemas/NodeList'

    PhaseStatus:
      type: object
      description: |
        The phase's status. It is a list of all of the nodes in the phase and
        what category those nodes fall into within the phase.

        ## Link Relationships

        * self : The session object

      properties:
        name:
          type: string
          description: |
            Name of the Phase
          example: "Boot"
          pattern: '^(?i)boot|configure|shutdown$'
        metadata:
          $ref: '#/components/schemas/GenericMetadata'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/PhaseCategoryStatus'
        errors:
          $ref: '#/components/schemas/NodeErrorsList'

    BootSetStatus:
      type: object
      description: |
        The status for a Boot Set. It as a list of the phase statuses for the Boot Set.

        ## Link Relationships

        * self : The session object
        * phase : A phase of the boot set

      properties:
        name:
          type: string
          minLength: 1
          description: Name of the Boot Set
          example: "Boot-Set"
        session:
          type: string
          description: Session ID
          example: "Session-ID"
        metadata:
          $ref: '#/components/schemas/GenericMetadata'
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PhaseStatus'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    SessionStatus:
      type: object
      description: |
        The status for a Boot Session. It is a list of all of the Boot Set Statuses in the session.
        ## Link Relationships

        * self : The session object
        * boot sets: URL to access the Boot Set status

      properties:
        metadata:
          $ref: '#/components/schemas/GenericMetadata'
        boot_sets:
           description: |
             The boot sets in the Session
           type: array
           items:
             type: string
           minItems: 1
        id:
          type: string
          description: Session ID
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    SessionTemplate:
      type: object
      description: |
        A Session Template object represents a collection of resources and metadata.
        A session template is used to create a Session which when combined with an
        action (i.e. boot, reconfigure, reboot, shutdown) will create a K8s BOA job
        to complete the required tasks for the operation.

        A Session Template can be created from a JSON structure.  It will return
        a SessionTemplate name if successful.
        This name is required when creating a Session.

        ## Link Relationships

        * self : The session object
      properties:
        templateUrl:
          type: string
          description: |
            The URL to the resource providing the session template data.
            Specify either a templateURL, or the other session
            template parameters (excluding templateBody).
        templateBody:
          type: string
          description: |
            Do not use. To be removed.
        name:
          type: string
          description: Name of the SessionTemplate. The length of the name is restricted to 45 characters.
          example: "cle-1.0.0"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
        description:
          type: string
          description: |
            An optional description for the session template.
        cfs_url:
          type: string
          description: |
            The url for the repository providing the configuration. DEPRECATED
        cfs_branch:
          type: string
          description: |
            The name of the branch containing the configuration that you want to
            apply to the nodes.  DEPRECATED.
        enable_cfs:
          type: boolean
          description: |
            Whether to enable the Configuration Framework Service (CFS).
            Choices: true/false
          default: true
        cfs:
          $ref: '#/components/schemas/CfsParameters'
        partition:
          type: string
          description: |
            The machine partition to operate on.
        boot_sets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BootSet'
        links:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      required: [name]
      additionalProperties: false
    Session:
      description: |
        A Session object

        ## Link Relationships

        * self : The session object
      type: object
      properties:
        operation:
          type: string
          description: >
            A Session represents an operation on a SessionTemplate.
            The creation of a session effectively results in the creation
            of a K8s Boot Orchestration Agent (BOA) job to perform the
            duties required to complete the operation.

            Operation -- An operation to perform on nodes in this session.

                Boot         Boot nodes that are off.

                Configure    Reconfigure the nodes using the Configuration Framework
                             Service (CFS).

                Reboot       Gracefully power down nodes that are on and then power
                             them back up.

                Shutdown     Gracefully power down nodes that are on.

          pattern: '^(?i)boot|configure|reboot|shutdown$'
        templateUuid:
          type: string
          description: The name of the Session Template
          example: "my-session-template"
          format: string
        limit:
          type: string
          description: >
            A comma seperated of nodes, groups or roles to which the session
            will be limited. Components are treated as OR operations unless
            preceded by "&" for AND or "!" for NOT.
        links:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      required: [operation, templateUuid]
      additionalProperties: false
    Version:
      description: Version data
      type: object
      properties:
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      additionalProperties: false
    NodeChangeList:
      type: object
      description: |
        The information used to update the status of a node list. It moves nodes from
        one category to another within a phase.
      properties:
        phase:
          type: string
          example: "Boot"
        source:
          type: string
          example: "in_progress"
        destination:
          type: string
          example: "Succeeded"
        node_list:
          $ref: '#/components/schemas/NodeList'
      additionalProperties: false
      required: [phase, source, destination, node_list]
    NodeErrorsList:
      type: object
      description: |
        Categorizing nodes into failures by the type of error they have.
        This is an additive characterization. Nodes will be added to existing errors.
        This does not overwrite previously existing errors.
      additionalProperties:
        $ref: '#/components/schemas/NodeList'
        default: {}
    UpdateRequestNodeChangeList:
      description: |
        This is the payload sent during an update request. It contains
        updates to which categories nodes are in.
      type: array
      items:
        type: object
        properties:
          update_type:
            description: The type of update data
            pattern: "NodeChangeList"
            type: string
          phase:
            description: |
              The phase that this data belongs to. If  blank, it belongs to
              the Boot Set itself, which only applies to the GenericMetadata type.
            pattern: "(?i)shutdown|boot|configure"
            type: string
          data:
            $ref: '#/components/schemas/NodeChangeList'
    UpdateRequestNodeErrorsList:
      description: |
        This is the payload sent during an update request. It contains
        updates to which errors have occurred and which nodes encountered those errors
      type: array
      items:
        type: object
        properties:
          update_type:
            description: The type of update data
            pattern: "NodeErrorsList"
            type: string
          phase:
            description: |
              The phase that this data belongs to. If  blank, it belongs to
              the Boot Set itself, which only applies to the GenericMetadata type.
            pattern: "(?i)shutdown|boot|configure"
            type: string
          data:
            $ref: '#/components/schemas/NodeErrorsList'
    UpdateRequestGenericMetadata:
      description: |
        This is the payload sent during an update request. It contains
        updates to metadata, specifically start and stop times
      type: array
      items:
        type: object
        properties:
          update_type:
            description: The type of update data
            pattern: "GenericMetadata"
            type: string
          phase:
            description: |
              The phase that this data belongs to. If the phase is boot_set, it belongs to
              the Boot Set itself, which only applies to the GenericMetadata type.
            pattern: '(?i)shutdown|boot|configure|boot_set'
            type: string
          data:
            $ref: '#/components/schemas/GenericMetadata'
    ProblemDetails:
      description: An error response for RFC 7807 problem details.
      type: object
      properties:
        type:
          description:
            Relative URI reference to the type of problem which includes human
            readable documentation.
          type: string
          format: uri
          default: "about:blank"
        title:
          description:
            Short, human-readable summary of the problem, should not change by
            occurrence.
          type: string
        status:
          description: HTTP status code
          type: integer
          example: 400
        instance:
          description: A relative URI reference that identifies the specific
            occurrence of the problem
          format: uri
          type: string
        detail:
          description:
            A human-readable explanation specific to this occurrence of the
            problem. Focus on helping correct the problem, rather than giving
            debugging information.
          type: string
      additionalProperties: false

  responses:
    badRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    serviceUnavailable:
      description: Service Unavailable
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    v1SessionDetails:
      description: Session details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'
    v1SessionStatus:
      description: A list of Boot Set Statuses and metadata
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionStatus'
    v1SessionTemplateDetails:
      description: Session template details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionTemplate'
    sessionTemplateNotFound:
      description: The session template was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    sessionNotFound:
      description: The session was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
paths:
  /:
    get:
      summary: Get API versions
      description: Return list of versions currently running.
      tags:
        - version
      x-openapi-router-controller: bos.controllers.base
      responses:
        200:
          description: |
            Get versions.

            The versioning system uses [semver](https://semver.org/).

            ## Link Relationships

            * self : The version base, e.g., "/v1".
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Version'

# See Version guidance is in
# https://connect.us.cray.com/confluence/display/SMA/Shasta+RESTful+Service+Design#ShastaRESTfulServiceDesign-Versioning
#
# Need standard fmt operationId  getVersion, postSession, etc.
  /v1:
    get:
      summary: Get API version
      tags:
        - version
      x-openapi-router-controller: bos.controllers.v1.base
      operationId: v1_get
      responses:
        200:
          description: |
            Get version details

            The versioning system uses [semver](https://semver.org/).

            ## Link Relationships

            * self : Link to itself
            * versions : Link back to the versions resource

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        500:
          description: An Internal Server Error occurred handling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/healthz:
    get:
      summary: Get service health details
      tags:
        - healthz
      x-openapi-router-controller: bos.controllers.v1.healthz
      operationId: v1_get_healthz
      description:
        Get bos health details.
      responses:
        200:
         description: Service Health information
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Healthz'
        500:
          description: An Internal Server Error occurred handling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        503:
          $ref: '#/components/responses/serviceUnavailable'

  /v1/sessiontemplate:
    post:
      summary: Create session template
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.controllers.v1.sessiontemplate
      operationId: create_v1_sessiontemplate
      description:
        Create a new session template.
      requestBody:
         description: A JSON object for creating a session template
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/SessionTemplate'
      responses:
        200:
          $ref: '#/components/responses/v1SessionTemplateDetails'
        400:
          $ref: '#/components/responses/badRequest'

    get:
      summary: List session templates
      description: |
        List all session templates. Session templates are
        uniquely identified by the name.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplates
      responses:
        200:
          description: A collection of SessionTemplates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionTemplate'

  /v1/sessiontemplate/{session_template_id}:
    parameters:
      - name: session_template_id
        in: path
        description: Session Template ID
        required: true
        schema:
          type: string
    get:
      summary: Get session template by id
      description: |
        Get session template by session_template_id.
        The session_template_id corresponds to the *name*
        of the session template.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplate
      responses:
        200:
          $ref: '#/components/responses/v1SessionTemplateDetails'
        404:
          $ref: '#/components/responses/sessionTemplateNotFound'
    delete:
      summary: Delete a session template
      description: Delete a session template.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.controllers.v1.sessiontemplate
      operationId: delete_v1_sessiontemplate
      responses:
        204:
          description: The session template was deleted.
        404:
          $ref: '#/components/responses/sessionTemplateNotFound'

  /v1/sessiontemplatetemplate:
    get:
      summary: Get an example session template.
      description: |
        Returns a skeleton of a session template, which can be
        used as a starting point for users creating their own
        session templates.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplatetemplate
      responses:
        200:
          $ref: '#/components/responses/v1SessionTemplateDetails'

  /v1/session:
    post:
      summary: Create a session
      description: |
        The creation of a session performs the operation
        specified in the SessionCreateRequest
        on the boot set(s) defined in the session template.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.session
      operationId: create_v1_session
      requestBody:
         description: A JSON object for creating a Session
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Session'
      responses:
        200:
          $ref: '#/components/responses/v1SessionDetails'
        400:
          $ref: '#/components/responses/badRequest'

    get:
      summary: List sessions
      description: |
        List all sessions, including those in progress and those complete.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.session
      operationId: get_v1_sessions
      responses:
        200:
          description: A collection of Sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'


  /v1/session/{session_id}:
    get:
      summary: Get session details by id
      description: Get session details by session_id.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.session
      operationId: get_v1_session
      responses:
        200:
          $ref: '#/components/responses/v1SessionDetails'
        404:
          $ref: '#/components/responses/sessionNotFound'
    delete:
      summary: Delete session by id
      description: Delete session by session_id.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.session
      operationId: delete_v1_session
      responses:
        204:
          description: The session was deleted.
        404:
          $ref: '#/components/responses/sessionNotFound'

    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string

  /v1/session/{session_id}/status:
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
    get:
      summary: A list of the statuses for the different boot sets.
      description: |
        A list of the statuses for the different boot sets.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: get_v1_session_status
      responses:
        200:
          description: |
            A collection of boot sets associated with this session.

            The boot set name can be used to query for the status.
          $ref: '#/components/responses/v1SessionStatus'
        404:
          $ref: '#/components/responses/sessionNotFound'
    post:
      summary: Create the initial session status
      description: |
        Creates the initial session status.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: create_v1_session_status
      requestBody:
         description: A JSON object for creating the status for a session
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/SessionStatus'
      responses:
        204:
          $ref: '#/components/responses/v1SessionStatus'
        400:
          $ref: '#/components/responses/badRequest'
    patch:
      summary: Update the session status
      description: |
        Update the session status. You can update the start or stop times.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: update_v1_session_status
      requestBody:
        description: A JSON object for updating the status for a session
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericMetadata'
      responses:
        200:
          $ref: '#/components/responses/v1SessionStatus'
        404:
          $ref: '#/components/responses/badRequest'
    delete:
      summary: Delete the session status
      description: |
        Deletes an existing Session status
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: delete_v1_session_status
      responses:
        204:
          description: The status was deleted successfully.
        400:
          $ref: '#/components/responses/badRequest'

  /v1/session/{session_id}/status/{boot_set_name}:
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
      - name: boot_set_name
        in: path
        description: Boot set name
        required: true
        schema:
          type: string
    get:
      summary: Get the status for a boot set.
      description: Get the status for a boot set.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: get_v1_session_status_by_bootset
      responses:
        200:
          description: A list of the Phase Statuses for the Boot Set and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BootSetStatus'
        404:
          $ref: '#/components/responses/sessionNotFound'
    post:
      summary: Create a Boot Set Status
      description: |
        Create a status for a Boot Set
      tags:
        - session
        - status
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: create_v1_boot_set_status
      requestBody:
        description: A JSON object for creating a status for a Boot Set
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BootSetStatus'
      responses:
        201:
          description: The created Boot Set status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BootSetStatus'
    patch:
      summary: Update the status.
      description: |
        This will change the status for one or more nodes within
        the boot set.
      tags:
        - session
        # - cli_ignore
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: update_v1_session_status_by_bootset
      requestBody:
         description: A JSON object for updating the status for a session
         required: true
         content:
           application/json:
             schema:
               anyOf:
                 - $ref: '#/components/schemas/UpdateRequestNodeChangeList'
                 - $ref: '#/components/schemas/UpdateRequestNodeErrorsList'
                 - $ref: '#/components/schemas/UpdateRequestGenericMetadata'
      responses:
        200:
          description: A list of Boot Set Statuses and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BootSetStatus'
        404:
          $ref: '#/components/responses/sessionNotFound'
    delete:
      summary: Delete the Boot Set status
      description: |
        Deletes an existing Boot Set status
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: delete_v1_boot_set_status
      responses:
        204:
          description: The status was deleted successfully.
        400:
          $ref: '#/components/responses/badRequest'

  /v1/session/{session_id}/status/{boot_set_name}/{phase_name}:
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
      - name: boot_set_name
        in: path
        description: Boot set name
        required: true
        schema:
          type: string
      - name: phase_name
        in: path
        description: The phase name
        required: true
        schema:
          type: string
    get:
      summary: Get the status for a specific boot set and phase.
      description: Get the status for a specific boot set and phase.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: get_v1_session_status_by_bootset_and_phase
      responses:
        200:
          description: A list of the nodes in the Phase and Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhaseStatus'
        404:
          $ref: '#/components/responses/sessionNotFound'

  /v1/session/{session_id}/status/{boot_set_name}/{phase_name}/{category_name}:
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
      - name: boot_set_name
        in: path
        description: Boot set name
        required: true
        schema:
          type: string
      - name: phase_name
        in: path
        description: The phase name
        required: true
        schema:
          type: string
      - name: category_name
        in: path
        description: The category name
        required: true
        schema:
          type: string
    get:
      summary: Get the status for a specific boot set, phase, and category.
      description: Get the status for a specific boot set, phase, and category.
      tags:
        - session
      x-openapi-router-controller: bos.controllers.v1.status
      operationId: get_v1_session_status_by_bootset_and_phase_and_category
      responses:
        200:
          description: A list of the nodes in the Phase and Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhaseCategoryStatus'
        404:
          $ref: '#/components/responses/sessionNotFound'

  /v1/version:
    get:
      summary: Get API version
      tags:
        - version
      x-openapi-router-controller: bos.controllers.v1.base
      operationId: v1_get_version
      responses:
        200:
          description: |
            Get version details

            The versioning system uses [semver](https://semver.org/).

            ## Link Relationships

            * self : Link to itself
            * versions : Link back to the versions resource

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        500:
          description: An Internal Server Error occurred handling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
