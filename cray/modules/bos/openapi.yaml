# Cray Boot Orchestration Service (BOS) API Specification
openapi: "3.0.2"

info:
  title: "Boot Orchestration Service"
  version: "0.0.0-api"
  description: |
    The Boot Orchestration Service (BOS) provides coordinated provisioning actions
    over defined hardware sets to enable boot, reboot, shutdown, configuration and
    staging for specified hardware subsets. These provisioning actions apply state
    through numerous system management APIs at the request of system administrators
    for managed product environments.

    The default content type for the BOS API is "application/json". Unsuccessful
    API calls return a content type of "application/problem+json" as per RFC 7807.

    ## Resources


    ### /sessiontemplate

    A session template sets the operational context of which nodes to operate on for
    any given set of nodes. It is largely comprised of one or more boot
    sets and their associated software configuration.

    A boot set defines a list of nodes, the image you want to boot/reboot the nodes with,
    kernel parameters to use to boot the nodes, and additional configuration management
    framework actions to apply during node bring up.

    ### /session

    A BOS session applies a provided action to the nodes defined in a session
    template.

    ## Workflow


    ### Create a New Session

    #### GET /sessiontemplate

    List available session templates.
    Note the *name* which uniquely identifies each session template.
    This value can be used to create a new session later,
    if specified in the request body of POST /session.

    #### POST /sessiontemplate

    If no session template pre-exists that satisfies requirements,
    then create a new session template. *name* uniquely identifies the
    session template.
    This value can be used to create a new session later,
    if specified in the request body of POST /session.

    #### POST /session

    Specify template_name and an
    operation to create a new session.
    The template_name corresponds to the session template *name*.
    A new session is launched as a result of this call.

    A limit can also be specified to narrow the scope of the session. The limit
    can consist of nodes, groups, or roles in a comma-separated list.
    Multiple groups are treated as separated by OR, unless "&" is added to
    the start of the component, in which case this becomes an AND.  Components
    can also be preceded by "!" to exclude them.

    Note, the response from a successful session launch contains *links*.
    Within *links*, *href* is a string that uniquely identifies the session.
    *href* is constructed using the session template name and a generated UUID.
    Use the entire *href* string as the path parameter *session_id*
    to uniquely identify a session in for the /session/{session_id}
    endpoint.


    #### GET /session/{session_id}

    Get session details by session id.

    List all in progress and completed sessions.


    ## Interactions with Other APIs


    BOS works in concert with Image Management Service (IMS) to access boot images,
    and if *enable_cfs* is true then
    BOS will invoke CFS to configure the compute nodes.


    All boot images specified via the session template, must be available via IMS.


servers:
- url: https://api-gw-service-nmn.local/apis/bos
  description: The production BOS API server through a standard API gateway
- url: https://cray-bos
  description: The service as exposed through Kubernetes DNS service mapping
components:
  schemas:
    Healthz:
      description: Service health status
      type: object
      properties:
        dbStatus:
          type: string
        apiStatus:
          type: string
      additionalProperties: false
    Version:
      description: Version data
      type: object
      properties:
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      additionalProperties: false
    ProblemDetails:
      description: An error response for RFC 7807 problem details.
      type: object
      properties:
        type:
          description:
            Relative URI reference to the type of problem which includes human
            readable documentation.
          type: string
          format: uri
          default: "about:blank"
        title:
          description:
            Short, human-readable summary of the problem, should not change by
            occurrence.
          type: string
        status:
          description: HTTP status code
          type: integer
          example: 400
        instance:
          description: A relative URI reference that identifies the specific
            occurrence of the problem
          format: uri
          type: string
        detail:
          description:
            A human-readable explanation specific to this occurrence of the
            problem. Focus on helping correct the problem, rather than giving
            debugging information.
          type: string
      additionalProperties: false
    Link:
      description: Link to other resources
      type: object
      properties:
        rel:
          type: string
        href:
          type: string
      additionalProperties: false
    # V1
    V1CfsParameters:
      type: object
      description: |
        CFS Parameters is the collection of parameters that are passed to the Configuration
        Framework Service when configuration is enabled.
      properties:
        clone_url:
          type: string
          description: |
            The clone url for the repository providing the configuration. (DEPRECATED)
        branch:
          type: string
          description: |
            The name of the branch containing the configuration that you want to
            apply to the nodes. Mutually exclusive with commit. (DEPRECATED)
        commit:
          type: string
          description: |
            The commit id of the configuration that you want to
            apply to the nodes. Mutually exclusive with branch. (DEPRECATED)
        playbook:
          type: string
          description: |
            The name of the playbook to run for configuration. The file path must be specified
            relative to the base directory of the config repo. (DEPRECATED)
        configuration:
          type: string
          description: |
            The name of configuration to be applied.
      additionalProperties: false
    V1GenericMetadata:
      type: object
      description: |
        The status metadata
      properties:
        start_time:
          type: string
          description: |
            The start time
          example: "2020-04-24T12:00"
        stop_time:
          type: string
          description: |
            The stop time
          example: "2020-04-24T12:00"
        complete:
          type: boolean
          description: |
            Is the object's status complete
          example: true
        in_progress:
          type: boolean
          description: |
            Is the object still doing something
          example: false
        error_count:
          type: integer
          description: |
            How many errors were encountered
          example: 0
      additionalProperties: false
    V1NodeList:
      type: array
      items:
        type: string
        example: ["x3000c0s19b1n0", "x3000c0s19b2n0"]
    V1PhaseCategoryStatus:
      type: object
      description: |
        A list of the nodes in a given category within a phase.

        ## Link Relationships

        * self : The session object

      properties:
        name:
          type: string
          description: |
            Name of the Phase Category
          example: "Succeeded"
          pattern: '^(?i)not_started|in_progress|succeeded|failed|excluded$'
        node_list:
          $ref: '#/components/schemas/V1NodeList'
    V1PhaseStatus:
      type: object
      description: |
        The phase's status. It is a list of all of the nodes in the phase and
        what category those nodes fall into within the phase.

        ## Link Relationships

        * self : The session object

      properties:
        name:
          type: string
          description: |
            Name of the Phase
          example: "Boot"
          pattern: '^(?i)boot|configure|shutdown$'
        metadata:
          $ref: '#/components/schemas/V1GenericMetadata'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/V1PhaseCategoryStatus'
        errors:
          $ref: '#/components/schemas/V1NodeErrorsList'
    V1BootSetStatus:
      type: object
      description: |
        The status for a Boot Set. It as a list of the phase statuses for the Boot Set.

        ## Link Relationships

        * self : The session object
        * phase : A phase of the boot set

      properties:
        name:
          type: string
          minLength: 1
          description: Name of the Boot Set
          example: "Boot-Set"
        session:
          type: string
          description: Session ID
          example: "Session-ID"
        metadata:
          $ref: '#/components/schemas/V1GenericMetadata'
        phases:
          type: array
          items:
            $ref: '#/components/schemas/V1PhaseStatus'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    V1SessionStatus:
      type: object
      description: |
        The status for a Boot Session. It is a list of all of the Boot Set Statuses in the session.
        ## Link Relationships

        * self : The session object
        * boot sets: URL to access the Boot Set status

      properties:
        metadata:
          $ref: '#/components/schemas/V1GenericMetadata'
        boot_sets:
           description: |
             The boot sets in the Session
           type: array
           items:
             type: string
           minItems: 1
        id:
          type: string
          description: Session ID
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    V1BootSet:
      description: |
        A boot set defines a collection of nodes and the information about the
        boot artifacts and parameters to be sent to each node over the specified
        network to enable these nodes to boot. When multiple boot sets are used
        in a session template, the boot_ordinal and shutdown_ordinal indicate
        the order in which boot sets need to be acted upon. Boot sets sharing
        the same ordinal number will be addressed at the same time.
      type: object
      properties:
        name:
          type: string
          description: |
            The Boot Set name.
        boot_ordinal:
          type: integer
          minimum: 0
          description: |
            The boot ordinal. This will establish the order for boot set operations.
            Boot sets boot in order from the lowest to highest boot_ordinal.
        shutdown_ordinal:
          type: integer
          minimum: 0
          description: |
            The shutdown ordinal. This will establish the order for boot set
            shutdown operations. Sets shutdown from low to high shutdown_ordinal.
        path:
          type: string
          description: |
            A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.
            It will be processed based on the type attribute.
        type:
          type: string
          description: |
            The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.
        etag:
          type: string
          description: |
            This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.
        kernel_parameters:
          type: string
          description: |
            The kernel parameters to use to boot the nodes.
        network:
          type: string
          description: |
            The network over which the node will boot from.
            Choices:  NMN -- Node Management Network
            pattern: '^(?i)nmn$'
        node_list:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node list. This is an explicit mapping against hardware xnames.
        node_roles_groups:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.
        node_groups:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user-defined groups in SMD.
        rootfs_provider:
          type: string
          description: |
            The root file system provider.
        rootfs_provider_passthrough:
          type: string
          description: |
            The root file system provider passthrough.
            These are additional kernel parameters that will be appended to
            the 'rootfs=<protocol>' kernel parameter
      additionalProperties: false
      required: [path, type]
    V1SessionTemplate:
      type: object
      description: |
        A Session Template object represents a collection of resources and metadata.
        A session template is used to create a Session which when combined with an
        action (i.e. boot, reconfigure, reboot, shutdown) will create a Kubernetes BOA job
        to complete the required tasks for the operation.

        A Session Template can be created from a JSON structure.  It will return
        a SessionTemplate name if successful.
        This name is required when creating a Session.

        ## Link Relationships

        * self : The session object
      properties:
        templateUrl:
          type: string
          description: |
            The URL to the resource providing the session template data.
            Specify either a templateURL, or the other session
            template parameters.
        name:
          type: string
          description: Name of the SessionTemplate. The length of the name is restricted to 45 characters.
          example: "cle-1.0.0"
          minLength: 1
          pattern: "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
        description:
          type: string
          description: |
            An optional description for the session template.
        cfs_url:
          type: string
          description: |
            The url for the repository providing the configuration. DEPRECATED
        cfs_branch:
          type: string
          description: |
            The name of the branch containing the configuration that you want to
            apply to the nodes.  DEPRECATED.
        enable_cfs:
          type: boolean
          description: |
            Whether to enable the Configuration Framework Service (CFS).
            Choices: true/false
          default: true
        cfs:
          $ref: '#/components/schemas/V1CfsParameters'
        partition:
          type: string
          description: |
            The machine partition to operate on.
        boot_sets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/V1BootSet'
        links:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      required: [name]
      additionalProperties: false
    V1Session:
      description: |
        A Session object

        ## Link Relationships

        * self : The session object
      type: object
      properties:
        operation:
          type: string
          description: >
            A Session represents an operation on a SessionTemplate.
            The creation of a session effectively results in the creation
            of a Kubernetes Boot Orchestration Agent (BOA) job to perform the
            duties required to complete the operation.

            Operation -- An operation to perform on nodes in this session.

                Boot         Boot nodes that are off.

                Configure    Reconfigure the nodes using the Configuration Framework
                             Service (CFS).

                Reboot       Gracefully power down nodes that are on and then power
                             them back up.

                Shutdown     Gracefully power down nodes that are on.

          pattern: '^(?i)boot|configure|reboot|shutdown$'
        templateUuid:
          type: string
          description: DEPRECATED - use templateName
          example: "my-session-template"
          format: string
        templateName:
          type: string
          description: The name of the Session Template
          example: "my-session-template"
          format: string
        job:
          type: string
          maxLength: 64
          readOnly: true
          description: >
            The identity of the Kubernetes job that is created to handle the session.
          example: "boa-07877de1-09bb-4ca8-a4e5-943b1262dbf0"
        limit:
          type: string
          description: >
            A comma-separated of nodes, groups, or roles to which the session
            will be limited. Components are treated as OR operations unless
            preceded by "&" for AND or "!" for NOT.
        links:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      required: [operation]
      additionalProperties: false
    V1NodeChangeList:
      type: object
      description: |
        The information used to update the status of a node list. It moves nodes from
        one category to another within a phase.
      properties:
        phase:
          type: string
          example: "Boot"
        source:
          type: string
          example: "in_progress"
        destination:
          type: string
          example: "Succeeded"
        node_list:
          $ref: '#/components/schemas/V1NodeList'
      additionalProperties: false
      required: [phase, source, destination, node_list]
    V1NodeErrorsList:
      type: object
      description: |
        Categorizing nodes into failures by the type of error they have.
        This is an additive characterization. Nodes will be added to existing errors.
        This does not overwrite previously existing errors.
      additionalProperties:
        $ref: '#/components/schemas/V1NodeList'
    V1UpdateRequestNodeChangeList:
      description: |
        This is the payload sent during an update request. It contains
        updates to which categories nodes are in.
      type: array
      items:
        type: object
        properties:
          update_type:
            description: The type of update data
            pattern: "NodeChangeList"
            type: string
          phase:
            description: |
              The phase that this data belongs to. If  blank, it belongs to
              the Boot Set itself, which only applies to the GenericMetadata type.
            pattern: "(?i)shutdown|boot|configure"
            type: string
          data:
            $ref: '#/components/schemas/V1NodeChangeList'
    V1UpdateRequestNodeErrorsList:
      description: |
        This is the payload sent during an update request. It contains
        updates to which errors have occurred and which nodes encountered those errors
      type: array
      items:
        type: object
        properties:
          update_type:
            description: The type of update data
            pattern: "NodeErrorsList"
            type: string
          phase:
            description: |
              The phase that this data belongs to. If  blank, it belongs to
              the Boot Set itself, which only applies to the GenericMetadata type.
            pattern: "(?i)shutdown|boot|configure"
            type: string
          data:
            $ref: '#/components/schemas/V1NodeErrorsList'
    V1UpdateRequestGenericMetadata:
      description: |
        This is the payload sent during an update request. It contains
        updates to metadata, specifically start and stop times
      type: array
      items:
        type: object
        properties:
          update_type:
            description: The type of update data
            pattern: "GenericMetadata"
            type: string
          phase:
            description: |
              The phase that this data belongs to. If the phase is boot_set, it belongs to
              the Boot Set itself, which only applies to the GenericMetadata type.
            pattern: '(?i)shutdown|boot|configure|boot_set'
            type: string
          data:
            $ref: '#/components/schemas/V1GenericMetadata'
    # V2
    V2CfsParameters:
      type: object
      description: |
        CFS Parameters is the collection of parameters that are passed to the Configuration
        Framework Service when configuration is enabled. Can be set as the global value for
        a Session Template, or individually within a boot set.
      properties:
        configuration:
          type: string
          description: |
            The name of configuration to be applied.
      additionalProperties: false
    V2SessionTemplate:
      type: object
      description: |
        A Session Template object represents a collection of resources and metadata.
        A session template is used to create a Session which applies the data to
        group of components.

        A Session Template can be created from a JSON structure.  It will return
        a SessionTemplate name if successful.
        This name is required when creating a Session.

        ## Link Relationships

        * self : The session object
      properties:
        name:
          type: string
          description: Name of the SessionTemplate. The length of the name is restricted to 45 characters.
          example: "cle-1.0.0"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
          readOnly: true
        description:
          type: string
          description: |
            An optional description for the session template.
        enable_cfs:
          type: boolean
          description: |
            Whether to enable the Configuration Framework Service (CFS).
            Choices: true/false
          default: true
        cfs:
          $ref: '#/components/schemas/V2CfsParameters'
        boot_sets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/V2BootSet'
        links:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      additionalProperties: false
    V2SessionTemplateArray:
      description: An array of session templates.
      type: array
      items:
        $ref: '#/components/schemas/V2SessionTemplate'
    V2SessionTemplateValidation:
      description: |
        Message describing errors or incompleteness in a Session Template.
      type: string
    V2SessionCreate:
      description: |
        A Session Creation object
      type: object
      properties:
        name:
          type: string
          description: Name of the session. A UUID name is generated if a name is not provided.
          example: "session-20190728032600"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
        operation:
          type: string
          enum: ['boot', 'reboot', 'shutdown']
          description: >
            A Session represents a desired state that is being applied to a group
            of components.  Sessions run until all components it manages have
            either been disabled due to completion, or until all components are
            managed by other newer sessions.

            Operation -- An operation to perform on nodes in this session.
                Boot                 Applies the template to the components and boots/reboots if necessary.
                Reboot               Applies the template to the components guarantees a reboot.
                Shutdown             Power down nodes that are on.
        template_name:
          type: string
          description: The name of the Session Template
          example: "my-session-template"
          format: string
        limit:
          type: string
          description: >
            A comma-separated of nodes, groups, or roles to which the session
            will be limited. Components are treated as OR operations unless
            preceded by "&" for AND or "!" for NOT.
        stage:
          type: boolean
          description: >
            Set to stage a session which will not immediately change the state of any components.
            The "applystaged" endpoint can be called at a later time to trigger the start of this session.
          default: false
      required: [operation, template_name]
      additionalProperties: false
    V2SessionStatus:
      type: object
      description: |
        Information on the status of a session.
      properties:
        start_time:
          type: string
          description: |
            When the session was created.
        end_time:
          type: string
          description: |
            When the session completed.
        status:
          type: string
          enum: ['pending', 'running', 'complete']
          description: |
            The status of a session.
        error:
          type: string
          description: |
            Error which prevented the session from running
      additionalProperties: false
    V2BootSet:
      description: |
        A boot set is a collection of nodes defined by an explicit list, their functional
        role, and their logical groupings. This collection of nodes is associated with one
        set of boot artifacts and optional additional records for configuration and root
        filesystem provisioning.
      type: object
      properties:
        name:
          type: string
          description: |
            The Boot Set name.
        path:
          type: string
          description: |
            A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.
            It will be processed based on the type attribute.
        cfs:
          $ref: '#/components/schemas/V2CfsParameters'
        type:
          type: string
          description: |
            The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.
        etag:
          type: string
          description: |
            This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.
        kernel_parameters:
          type: string
          description: |
            The kernel parameters to use to boot the nodes.
        node_list:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node list. This is an explicit mapping against hardware xnames.
        node_roles_groups:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.
        node_groups:
          type: array
          items:
            type: string
          minItems: 1
          description: |
            The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user-defined groups in SMD.
        rootfs_provider:
          type: string
          description: |
            The root file system provider.
        rootfs_provider_passthrough:
          type: string
          description: |
            The root file system provider passthrough.
            These are additional kernel parameters that will be appended to
            the 'rootfs=<protocol>' kernel parameter
      additionalProperties: false
      required: [path, type]
    V2Session:
      description: |
        A Session object

        ## Link Relationships

        * self : The session object
      type: object
      properties:
        name:
          type: string
          description: >
            Name of the session.
        operation:
          type: string
          enum: ['boot', 'reboot', 'shutdown']
          description: >
            A Session represents a desired state that is being applied to a group
            of components.  Sessions run until all components it manages have
            either been disabled due to completion, or until all components are
            managed by other newer sessions.

            Operation -- An operation to perform on nodes in this session.
                Boot                 Applies the template to the components and boots/reboots if necessary.
                Reboot               Applies the template to the components guarantees a reboot.
                Shutdown             Power down nodes that are on.
        template_name:
          type: string
          description: The name of the Session Template
          example: "my-session-template"
          format: string
        limit:
          type: string
          description: >
            A comma-separated of nodes, groups, or roles to which the session
            will be limited. Components are treated as OR operations unless
            preceded by "&" for AND or "!" for NOT.
        stage:
          type: boolean
          description: >
            Set to stage a session which will not immediately change the state of any components.
            The "applystaged" endpoint can be called at a later time to trigger the start of this session.
        components:
          type: string
          description: >
            A comma-separated list of nodes, representing the initial list of nodes
            the session should operate against.  The list will remain even if
            other sessions have taken over management of the nodes.
        status:
          $ref: '#/components/schemas/V2SessionStatus'
      additionalProperties: false
    V2SessionArray:
      description: An array of sessions.
      type: array
      items:
        $ref: '#/components/schemas/V2Session'
    V2SessionExtendedStatusPhases:
      type: object
      description: |
        Detailed information on the phases of a session.
      properties:
        percent_complete:
          type: number 
          description: |
            The percent of components currently in a completed/stable state
        percent_powering_on:
          type: number 
          description: |
            The percent of components currently in the powering-on phase
        percent_powering_off:
          type: number 
          description: |
            The percent of components currently in the powering-off phase
        percent_configuring:
          type: number 
          description: |
            The percent of components currently in the configuring phase
      additionalProperties: false
    V2SessionExtendedStatusTiming:
      type: object
      description: |
        Detailed information on the timing of a session.
      properties:
        start_time:
          type: string
          description: |
            When the session was created.
        end_time:
          type: string
          description: |
            When the session completed.
        duration:
          type: string
          description: |
            The current duration of the on-going session or final duration of the completed session.
      additionalProperties: false
    V2SessionExtendedStatus:
      type: object
      description: |
        Detailed information on the status of a session.
      properties:
        status:
          type: string
          enum: ['pending', 'running', 'complete']
          description: |
            The status of a session.
        managed_components_count:
          type: integer
          description: |
            The count of components currently managed by this session
        phases:
          $ref: '#/components/schemas/V2SessionExtendedStatusPhases'
        percent_successful:
          type: number 
          description: |
            The percent of components currently in a successful state
        percent_failed:
          type: number 
          description: |
            The percent of components currently in a failed state
        percent_staged:
          type: number 
          description: |
            The percent of components currently still staged for this session
        error_summary:
          type: object 
          description: |
            A summary of the errors currently listed by all components
        timing:
          $ref: '#/components/schemas/V2SessionExtendedStatusTiming'
      additionalProperties: false
    V2BootArtifacts:
      description: |
        A collection of boot artifacts.
      type: object
      properties:
        kernel:
          type: string
          description: An md5sum hash of the kernel ID
        kernel_parameters:
          type: string
          description: Kernel parameters
        initrd:
          type: string
          description: Initrd ID
      additionalProperties: false
    V2ComponentActualState:
      description: |
        The desired boot artifacts and configuration for a component
      type: object
      properties:
        boot_artifacts:
          $ref: '#/components/schemas/V2BootArtifacts'
        bss_token:
          type: string
          description: >
            A token received from the node identifying the boot artifacts. 
            For BOS use-only, users should not set this field. It will be overwritten.
        last_updated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
      additionalProperties: false
    V2ComponentDesiredState:
      description: |
        The desired boot artifacts and configuration for a component
      type: object
      properties:
        boot_artifacts:
          $ref: '#/components/schemas/V2BootArtifacts'
        configuration:
          type: string
          description: A CFS configuration ID.
        bss_token:
          type: string
          description: >
            A token received from BSS identifying the boot artifacts. 
            For BOS use-only, users should not set this field. It will be overwritten.
        last_updated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
      additionalProperties: false
    V2ComponentStagedState:
      description: |
        The desired boot artifacts and configuration for a component
      type: object
      properties:
        boot_artifacts:
          $ref: '#/components/schemas/V2BootArtifacts'
        configuration:
          type: string
          description: A CFS configuration ID.
        session:
          type: string
          description: A session which can be triggered at a later time against this component.
        last_updated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
      additionalProperties: false
    V2ComponentLastAction:
      description: |
        Information on the most recent action taken against the node.
      type: object
      properties:
        last_updated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
        action:
          type: string
          description: A description of the most recent operator/action to impact the component.
        failed:
          type: boolean
          description: Denotes if the last action failed to accomplish its task
      additionalProperties: false
    V2ComponentEventStats:
      description: |
        Information on the most recent attempt to return the node to its desired state.
      type: object
      properties:
        power_on_attempts:
          type: integer
          description: How many attempts have been made to power-on since the last time the node was in the desired state.
        power_off_graceful_attempts:
          type: integer
          description: How many attempts have been made to power-off gracefully since the last time the node was in the desired state.
        power_off_forceful_attempts:
          type: integer
          description: How many attempts have been made to power-off forcefully since the last time the node was in the desired state.
      additionalProperties: false
    V2ComponentStatus:
      description: Status information for the component
      type: object
      properties:
        phase:
          type: string
          description: The current phase of the component in the boot process.
        status:
          type: string
          description: The current status of the component.  More detailed than phase.
          readOnly: true
        status_override:
          type: string
          description: If set, this will override the status value.
      additionalProperties: false
    V2Component:
      description: |
        The current and desired artifacts state for a component.
      type: object
      properties:
        id:
          type: string
          description: The component's id. e.g. xname for hardware components
        actual_state:
          $ref: '#/components/schemas/V2ComponentActualState'
        desired_state:
          $ref: '#/components/schemas/V2ComponentDesiredState'
        staged_state:
          $ref: '#/components/schemas/V2ComponentStagedState'
        last_action:
          $ref: '#/components/schemas/V2ComponentLastAction'
        event_stats:
          $ref: '#/components/schemas/V2ComponentEventStats'
        status:
          $ref: '#/components/schemas/V2ComponentStatus'
        enabled:
          type: boolean
          description: A flag indicating if actions should be taken for this component.
        error:
          type: string
          description: A description of the most recent error to impact the component.
        session:
          type: string
          description: The session responsible for the component's current state
        retry_policy:
          type: integer
          description: |
            The maximum number attempts per action when actions fail.
            Defaults to the global default_retry_policy if not set
          example: 1
      additionalProperties: false
    V2ComponentArray:
      description: An array of component states.
      type: array
      items:
        $ref: '#/components/schemas/V2Component'
    V2ComponentsFilter:
      description: Information for patching multiple components.
      type: object
      properties:
        ids:
          type: string
          description: A comma-separated list of component IDs
        session:
          type: string
          description: A session name.  All components part of this session will be patched.
    V2ComponentsUpdate:
      description: Information for patching multiple components.
      type: object
      properties:
        patch:
          $ref: '#/components/schemas/V2Component'
        filters:
          $ref: '#/components/schemas/V2ComponentsFilter'
      required: [patch, filters]
    V2ApplyStagedComponents:
      description: |
        A list of components that should have their staged session applied.
      type: object
      properties:
        xnames:
          description: The list of component xnames
          type: array
          items:
            type: string
      additionalProperties: false
    V2ApplyStagedStatus:
      description: |
        A list of components that should have their staged session applied.
      type: object
      properties:
        succeeded:
          description: The list of component xnames
          type: array
          items:
            type: string
        failed:
          description: The list of component xnames
          type: array
          items:
            type: string
        ignored:
          description: The list of component xnames
          type: array
          items:
            type: string
      additionalProperties: false
    V2Options:
      description: |
        Options for the boot orchestration service.
      type: object
      properties:
        cleanup_completed_session_ttl:
          type: string
          description: Delete complete sessions that are older than cleanup_completed_session_ttl (in hours). 0h disables cleanup behavior.
        clear_stage:
          type: boolean
          description: Allows components staged information to be cleared when the requested staging action has been started. Defaults to false.
        component_actual_state_ttl:
          type: string
          description: The maximum amount of time a component's actual state is considered valid (in hours). 0h disables cleanup behavior for newly booted nodes and instructs bos-state-reporter to report once instead of periodically.
        disable_components_on_completion:
          type: boolean
          description: Allows for BOS components to be marked as disabled after a session has been completed. If false, BOS will continue to maintain the state of the nodes declaratively, even after a session finishes. 
        discovery_frequency:
          type: integer
          description: How frequently the BOS discovery agent syncs new components from HSM. (in seconds)
        logging_level:
          type: string
          description: The logging level for all BOS services
        max_boot_wait_time:
          type: integer
          description: How long BOS will wait for a node to boot into a usable state before rebooting it again (in seconds)
        max_power_on_wait_time:
          type: integer
          description: How long BOS will wait for a node to power on before calling power on again (in seconds)
        max_power_off_wait_time:
          type: integer
          description: How long BOS will wait for a node to power off before forcefully powering off (in seconds)
        polling_frequency:
          type: integer
          description: How frequently the BOS operators check component state for needed actions. (in seconds)
        default_retry_policy:
          type: integer
          description: The default maximum number attempts per node for failed actions.
          example: 1
      additionalProperties: true
  requestBodies:
    V2sessionCreateRequest:
      description: The information to create a session
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionCreate'
    V2componentUpdateRequest:
      description: The state for a single component
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Component'
    V2componentsPutRequest:
      description: The state for an array of components
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentArray'
    V2componentsUpdateRequest:
      description: The state for an array of components
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/V2ComponentsUpdate'
              - $ref: '#/components/schemas/V2ComponentArray'
    V2optionsUpdateRequest:
      description: Service-wide options
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Options'
    V2sessionUpdateRequest:
      description: The state for a single session
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Session'
    V2applyStagedRequest:
      description: A list of xnames that should have their staged session applied.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ApplyStagedComponents'

  responses:
    ServiceHealth:
      description: Service Health information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Healthz'
    Version:
      description: |
        Get version details
        The versioning system uses [semver](https://semver.org/).
        ## Link Relationships
        * self : Link to itself
        * versions : Link back to the versions resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Version'
    ResourceDeleted:
      description: The resource was deleted.
    # V1
    V1SessionDetails:
      description: Session details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V1Session'
    V1SessionStatus:
      description: A list of Boot Set Statuses and metadata
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V1SessionStatus'
    V1SessionTemplateDetails:
      description: Session template details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V1SessionTemplate'
    # V2
    V2SessionTemplateDetails:
      description: Session template details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionTemplate'
    V2SessionTemplateDetailsArray:
      description: Session template details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionTemplateArray'
    V2SessionTemplateValidation:
      description: Session template validity details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionTemplateValidation'
    V2SessionDetails:
      description: Session details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Session'
    V2SessionDetailsArray:
      description: Session details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionArray'
    V2SessionExtendedStatus:
      description: Session status details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionExtendedStatus'
    V2componentDetails:
      description: A single component state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Component'
    V2componentDetailsArray:
      description: A collection of component states
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentArray'
    V2applyStagedResponse:
      description: A list of xnames that should have their staged session applied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ApplyStagedStatus'
    V2options:
      description: A collection of service-wide options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Options'
    # Errors
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ResourceNotFound:
      description: The resource was not found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalError:
      description: An Internal Server Error occurred handling the request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
paths:
  /:
    get:
      summary: Get API versions
      description: Return list of versions currently running.
      tags:
        - version
      x-openapi-router-controller: bos.server.controllers.base
      responses:
        200:
          $ref: '#/components/responses/Version'
# See Version guidance is in
# https://connect.us.cray.com/confluence/display/SMA/Shasta+RESTful+Service+Design#ShastaRESTfulServiceDesign-Versioning
#
# Need standard fmt operationId  getVersion, postSession, etc.
  /v1:
    get:
      summary: Get API version
      tags:
        - version
      x-openapi-router-controller: bos.server.controllers.v1.base
      operationId: v1_get
      responses:
        200:
          $ref: '#/components/responses/Version'
        500:
          $ref: '#/components/responses/BadRequest'
  /v1/healthz:
    get:
      summary: Get service health details
      tags:
        - healthz
      x-openapi-router-controller: bos.server.controllers.v1.healthz
      operationId: v1_get_healthz
      description:
        Get bos health details.
      responses:
        200:
          $ref: '#/components/responses/ServiceHealth'
        500:
          $ref: '#/components/responses/BadRequest'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/sessiontemplate:
    post:
      summary: Create session template
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: create_v1_sessiontemplate
      description:
        Create a new session template.
      requestBody:
         description: A JSON object for creating a session template
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/V1SessionTemplate'
      responses:
        200:
          $ref: '#/components/responses/V1SessionTemplateDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: List session templates
      description: |
        List all session templates. Session templates are
        uniquely identified by the name.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplates
      responses:
        200:
          description: A collection of SessionTemplates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/V1SessionTemplate'
  /v1/sessiontemplate/{session_template_id}:
    parameters:
      - name: session_template_id
        in: path
        description: Session Template ID
        required: true
        schema:
          type: string
    get:
      summary: Get session template by id
      description: |
        Get session template by session_template_id.
        The session_template_id corresponds to the *name*
        of the session template.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplate
      responses:
        200:
          $ref: '#/components/responses/V1SessionTemplateDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete a session template
      description: Delete a session template.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: delete_v1_sessiontemplate
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v1/sessiontemplatetemplate:
    get:
      summary: Get an example session template.
      description: |
        Returns a skeleton of a session template, which can be
        used as a starting point for users creating their own
        session templates.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplatetemplate
      responses:
        200:
          $ref: '#/components/responses/V1SessionTemplateDetails'
  /v1/session:
    post:
      summary: Create a session
      description: |
        The creation of a session performs the operation
        specified in the SessionCreateRequest
        on the boot set(s) defined in the session template.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.session
      operationId: create_v1_session
      requestBody:
         description: A JSON object for creating a Session
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/V1Session'
      responses:
        200:
          $ref: '#/components/responses/V1SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: List sessions
      description: |
        List all sessions, including those in progress and those complete.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.session
      operationId: get_v1_sessions
      responses:
        200:
          description: A collection of Sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/V1Session'
  /v1/session/{session_id}:
    get:
      summary: Get session details by id
      description: Get session details by session_id.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.session
      operationId: get_v1_session
      responses:
        200:
          $ref: '#/components/responses/V1SessionDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete session by id
      description: Delete session by session_id.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.session
      operationId: delete_v1_session
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
  /v1/session/{session_id}/status:
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
    get:
      summary: A list of the statuses for the different boot sets.
      description: |
        A list of the statuses for the different boot sets.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: get_v1_session_status
      responses:
        200:
          $ref: '#/components/responses/V1SessionStatus'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    post:
      summary: Create the initial session status
      description: |
        Creates the initial session status.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: create_v1_session_status
      requestBody:
         description: A JSON object for creating the status for a session
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/V1SessionStatus'
      responses:
        204:
          $ref: '#/components/responses/V1SessionStatus'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update the session status
      description: |
        Update the session status. You can update the start or stop times.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: update_v1_session_status
      requestBody:
        description: A JSON object for updating the status for a session
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1GenericMetadata'
      responses:
        200:
          $ref: '#/components/responses/V1SessionStatus'
        404:
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete the session status
      description: |
        Deletes an existing Session status
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: delete_v1_session_status
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
  /v1/session/{session_id}/status/{boot_set_name}:
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
      - name: boot_set_name
        in: path
        description: Boot set name
        required: true
        schema:
          type: string
    get:
      summary: Get the status for a boot set.
      description: Get the status for a boot set.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: get_v1_session_status_by_bootset
      responses:
        200:
          description: A list of the Phase Statuses for the Boot Set and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BootSetStatus'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    post:
      summary: Create a Boot Set Status
      description: |
        Create a status for a Boot Set
      tags:
        - session
        - status
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: create_v1_boot_set_status
      requestBody:
        description: A JSON object for creating a status for a Boot Set
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1BootSetStatus'
      responses:
        201:
          description: The created Boot Set status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BootSetStatus'
    patch:
      summary: Update the status.
      description: |
        This will change the status for one or more nodes within
        the boot set.
      tags:
        - session
        # - cli_ignore
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: update_v1_session_status_by_bootset
      requestBody:
         description: A JSON object for updating the status for a session
         required: true
         content:
           application/json:
             schema:
               anyOf:
                 - $ref: '#/components/schemas/V1UpdateRequestNodeChangeList'
                 - $ref: '#/components/schemas/V1UpdateRequestNodeErrorsList'
                 - $ref: '#/components/schemas/V1UpdateRequestGenericMetadata'
      responses:
        200:
          description: A list of Boot Set Statuses and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BootSetStatus'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete the Boot Set status
      description: |
        Deletes an existing Boot Set status
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: delete_v1_boot_set_status
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
  /v1/session/{session_id}/status/{boot_set_name}/{phase_name}:
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
      - name: boot_set_name
        in: path
        description: Boot set name
        required: true
        schema:
          type: string
      - name: phase_name
        in: path
        description: The phase name
        required: true
        schema:
          type: string
    get:
      summary: Get the status for a specific boot set and phase.
      description: Get the status for a specific boot set and phase.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: get_v1_session_status_by_bootset_and_phase
      responses:
        200:
          description: A list of the nodes in the Phase and Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PhaseStatus'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v1/session/{session_id}/status/{boot_set_name}/{phase_name}/{category_name}:
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
      - name: boot_set_name
        in: path
        description: Boot set name
        required: true
        schema:
          type: string
      - name: phase_name
        in: path
        description: The phase name
        required: true
        schema:
          type: string
      - name: category_name
        in: path
        description: The category name
        required: true
        schema:
          type: string
    get:
      summary: Get the status for a specific boot set, phase, and category.
      description: Get the status for a specific boot set, phase, and category.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: get_v1_session_status_by_bootset_and_phase_and_category
      responses:
        200:
          description: A list of the nodes in the Phase and Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PhaseCategoryStatus'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v1/version:
    get:
      summary: Get API version
      tags:
        - version
      x-openapi-router-controller: bos.server.controllers.v1.base
      operationId: v1_get_version
      responses:
        200:
          $ref: '#/components/responses/Version'
        500:
          $ref: '#/components/responses/BadRequest'

  /v2:
    get:
      summary: Get API version
      tags:
        - v2
        - version
      x-openapi-router-controller: bos.server.controllers.v2.base
      operationId: get_v2
      responses:
        200:
          $ref: '#/components/responses/Version'
        500:
          $ref: '#/components/responses/BadRequest'
  /v2/healthz:
    get:
      summary: Get service health details
      tags:
        - v2
        - healthz
      x-openapi-router-controller: bos.server.controllers.v2.healthz
      operationId: get_v2_healthz
      description:
        Get bos health details.
      responses:
        200:
         $ref: '#/components/responses/ServiceHealth'
        500:
          $ref: '#/components/responses/BadRequest'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v2/sessiontemplates:
    get:
      summary: List session templates
      description: |
        List all session templates. Session templates are
        uniquely identified by the name.
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: get_v2_sessiontemplates
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetailsArray'
  /v2/sessiontemplatesvalid/{session_template_id}:
    parameters:
      - name: session_template_id
        in: path
        description: Session Template ID
        required: true
        schema:
          type: string
    get:
      summary: Validate the session template by id
      description: |
        Validate session template by session_template_id.
        The session_template_id corresponds to the *name*
        of the session template.
      tags:
        - v2
        - sessiontemplatess
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: validate_v2_sessiontemplate
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateValidation'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/sessiontemplates/{session_template_id}:
    parameters:
      - name: session_template_id
        in: path
        description: Session Template ID
        required: true
        schema:
          type: string
    get:
      summary: Get session template by id
      description: |
        Get session template by session_template_id.
        The session_template_id corresponds to the *name*
        of the session template.
      tags:
        - v2
        - sessiontemplatess
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: get_v2_sessiontemplate
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Create session template
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: put_v2_sessiontemplate
      description:
        Create a new session template.
      requestBody:
         description: A JSON object for creating a session template
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/V2SessionTemplate'
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a session template
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: patch_v2_sessiontemplate
      requestBody:
        description: A JSON object for updating a session template
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2SessionTemplate'
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
        400:
          $ref: '#/components/responses/BadRequest'        
    delete:
      summary: Delete a session template
      description: Delete a session template.
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: delete_v2_sessiontemplate
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/sessiontemplatetemplate:
    get:
      summary: Get an example session template.
      description: |
        Returns a skeleton of a session template, which can be
        used as a starting point for users creating their own
        session templates.
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: get_v2_sessiontemplatetemplate
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
  /v2/sessions:
    post:
      summary: Create a session
      description: |
        The creation of a session performs the operation
        specified in the SessionCreateRequest
        on the boot set(s) defined in the session template.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: post_v2_session
      requestBody:
         $ref: '#/components/requestBodies/V2sessionCreateRequest'
      responses:
        201:
          $ref: '#/components/responses/V2SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: List sessions
      description: |
        List all sessions, including those in progress and those complete.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: get_v2_sessions
      parameters:
        - name: min_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions older than the given age.  Age is given in the format "1d" or "6h"
        - name: max_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions younger than the given age.  Age is given in the format "1d" or "6h"
        - name: status
          schema:
            type: string
            enum: ['pending', 'running', 'complete']
          in: query
          description: >-
            Return only sessions with the given status.
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetailsArray'
    delete:
      summary: Delete multiple sessions.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: delete_v2_sessions
      parameters:
        - name: min_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions older than the given age.  Age is given in the format "1d" or "6h"
        - name: max_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions younger than the given age.  Age is given in the format "1d" or "6h"
        - name: status
          schema:
            enum: ['pending', 'running', 'complete']
            type: string
          in: query
          description: >-
            Return only sessions with the given status.
      description:
        Delete multiple sessions.  If filters are provided, only sessions matching
        all filters will be deleted.  By default only completed sessions will be deleted.
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/sessions/{session_id}:
    get:
      summary: Get session details by id
      description: Get session details by session_id.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: get_v2_session
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    patch:
      summary: Update a single session
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      description: Update the state for a given session in the BOS database
      operationId: patch_v2_session
      requestBody:
        $ref: '#/components/requestBodies/V2sessionUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete session by id
      description: Delete session by session_id.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: delete_v2_session
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
  /v2/sessions/{session_id}/status:
    get:
      summary: Get session extended status information by id
      description: Get session extended status information by id
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: get_v2_session_status
      responses:
        200:
          $ref: '#/components/responses/V2SessionExtendedStatus'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    post:
      summary: Saves the current session to database
      tags:
        - v2
        - sessions
        - cli_ignore
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      description: Saves the current session to database.  For use at session completion.
      operationId: save_v2_session_status
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: session_id
        in: path
        description: Session ID
        required: true
        schema:
          type: string
  /v2/components:
    get:
      summary: Retrieve the state of a collection of components
      tags:
        - v2
        - components
      x-openapi-router-controller: bos.server.controllers.v2.components
      description: >-
        Retrieve the full collection of components in the form of a
        ComponentArray. Full results can also be filtered by query
        parameters. Only the first filter parameter of each type is
        used and the parameters are applied in an AND fashion.
        If the collection is empty or the filters have no match, an
        empty array is returned.
      operationId: get_v2_components
      parameters:
        - name: ids
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given id
            (e.g. xname for hardware components). Can be chained
            for selecting groups of components.
        - name: session
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given session id.
        - name: staged_session
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given staged session id.
        - name: enabled
          schema:
            type: boolean
          in: query
          description: >-
            Retrieve the components with the "enabled" state.
        - name: phase
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components in the given phase.
        - name: status
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given status.
      responses:
        200:
          $ref: '#/components/responses/V2componentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    put:
      summary: Add or Replace a collection of components
      tags:
        - v2
        - components
        - cli_ignore
      x-openapi-router-controller: bos.server.controllers.v2.components
      description: Update the state for a collection of components in the BOS database
      operationId: put_v2_components
      requestBody:
        $ref: '#/components/requestBodies/V2componentsPutRequest'
      responses:
        200:
          $ref: '#/components/responses/V2componentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a collection of components
      tags:
        - v2
        - components
        - cli_ignore
      x-openapi-router-controller: bos.server.controllers.v2.components
      description: Update the state for a collection of components in the BOS database
      operationId: patch_v2_components
      requestBody:
        $ref: '#/components/requestBodies/V2componentsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2componentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/components/{component_id}:
    get:
      summary: Retrieve the state of a single component
      tags:
        - v2
        - components
      x-openapi-router-controller: bos.server.controllers.v2.components
      description: Retrieve the current and desired state of a single component
      operationId: get_v2_component
      responses:
        200:
          $ref: '#/components/responses/V2componentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Add or Replace a single component
      tags:
        - v2
        - components
      x-openapi-router-controller: bos.server.controllers.v2.components
      description: Update the state for a given component in the BOS database
      operationId: put_v2_component
      requestBody:
        $ref: '#/components/requestBodies/V2componentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2componentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a single component
      tags:
        - v2
        - components
      x-openapi-router-controller: bos.server.controllers.v2.components
      description: Update the state for a given component in the BOS database
      operationId: patch_v2_component
      requestBody:
        $ref: '#/components/requestBodies/V2componentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2componentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      tags:
        - v2
        - components
        - cli_ignore
      summary: Delete a single component
      x-openapi-router-controller: bos.server.controllers.v2.components
      description: Delete the given component
      operationId: delete_v2_component
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: component_id
        in: path
        description: Component id. e.g. xname for hardware components
        required: true
        schema:
          type: string
  /v2/applystaged:
    post:
      summary: Start a staged session for the specified components
      description: |
        Given a list of xnames, this will trigger the start of any sessions
        staged for those components.  Components without a staged session
        will be ignored, and a list all components that are acted on will
        be returned in the response.
      tags:
        - v2
        - applystaged
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: post_v2_apply_staged
      requestBody:
         $ref: '#/components/requestBodies/V2applyStagedRequest'
      responses:
        200:
          $ref: '#/components/responses/V2applyStagedResponse'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/options:
    get:
      summary: Retrieve the BOS service options
      tags:
        - options
      x-openapi-router-controller: bos.server.controllers.v2.options
      description: Retrieve the list of BOS service options.
      operationId: get_v2_options
      responses:
        200:
          $ref: '#/components/responses/V2options'
    patch:
      summary: Update BOS service options
      tags:
        - v2
        - options
      x-openapi-router-controller: bos.server.controllers.v2.options
      operationId: patch_v2_options
      description: Update one or more of the BOS service options.
      requestBody:
        $ref: '#/components/requestBodies/V2optionsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2options'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/version:
    get:
      summary: Get API version
      tags:
        - v2
        - version
      x-openapi-router-controller: bos.server.controllers.v2.base
      operationId: get_version_v2
      responses:
        200:
          $ref: '#/components/responses/Version'
        500:
          $ref: '#/components/responses/BadRequest'
