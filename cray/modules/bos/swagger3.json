{
    "openapi": "3.0.3",
    "info": {
        "title": "Boot Orchestration Service",
        "version": "2.30.0",
        "description": "The Boot Orchestration Service (BOS) provides coordinated provisioning actions\nover defined hardware sets to enable boot, reboot, shutdown, configuration and\nstaging for specified hardware subsets. These provisioning actions apply state\nthrough numerous system management APIs at the request of system administrators\nfor managed product environments.\n\nThe default content type for the BOS API is \"application/json\". Unsuccessful\nAPI calls return a content type of \"application/problem+json\" as per RFC 7807.\n\n## Resources\n\n\n### Session Template\n\nA Session Template sets the operational context of which nodes to operate on for\nany given set of nodes. It is largely comprised of one or more boot\nsets and their associated software configuration.\n\nA Boot Set defines a list of nodes, the image you want to boot/reboot the nodes with,\nkernel parameters to use to boot the nodes, and additional configuration management\nframework actions to apply during node bring up.\n\n### Session\n\nA BOS Session applies a provided action to the nodes defined in a Session Template.\n\n\n## Workflow: Create a New Session\n\n1. Choose the Session Template to use.\n\n  Session Templates which do not belong to a tenant are uniquely identified by their\n  names. All Session Templates that belong to a given tenant are uniquely identified\n  by their names, but may share names with Session Templates that belong to other\n  tenants or that do not belong to a tenant.\n\n  a. List available Session Templates.\n\n    GET /v2/sessiontemplates\n\n  b. Create a new Session Template if desired.\n\n    PUT /v2/sessiontemplate/{template_name}\n\n    If no Session Template exists that satisfies requirements,\n    then create a new Session Template.\n    This Session Template can be used to create a new Session later.\n\n2. Create the Session.\n\n  POST /v2/sessions\n\n  Specify template_name and an operation to create a new Session.\n  The template_name corresponds to the Session Template *name*.\n  A new Session is launched as a result of this call (in the case of\n  /v2/sessions, the option to stage but not begin the Session also exists).\n\n  A limit can also be specified to narrow the scope of the Session. The limit\n  can consist of nodes, groups, or roles in a comma-separated list.\n  Multiple groups are treated as separated by OR, unless \"&\" is added to\n  the start of the component, in which case this becomes an AND.  Components\n  can also be preceded by \"!\" to exclude them.\n\n  Note, the response from a successful Session launch contains *links*.\n  Within *links*, *href* is a string that uniquely identifies the Session.\n  *href* is constructed using the Session Template name and a generated UUID.\n  Use the entire *href* string as the path parameter *session_id*\n  to uniquely identify a Session.\n\n3. Get details on the Session.\n\n  GET /v2/sessions/{session_id}\n\n\n## Interactions with Other APIs\n\n### Configuration Framework Service (CFS)\n\nIf *enable_cfs* is true in a Session Template, then BOS will invoke CFS to\nconfigure the target nodes during *boot* or *reboot* operations.\n\n### Hardware State Manager (HSM)\n\nIn some situations BOS checks HSM to determine if a node has been disabled.\n\n### Image Management Service (IMS)\n\nBOS works in concert with IMS to access boot images.\nAll boot images specified via the Session Template must be available via IMS.\n"
    },
    "servers": [
        {
            "url": "https://api-gw-service-nmn.local/apis/bos",
            "description": "The production BOS API server through a standard API gateway"
        },
        {
            "url": "https://cray-bos",
            "description": "The service as exposed through Kubernetes DNS service mapping"
        }
    ],
    "components": {
        "schemas": {
            "AgeString": {
                "type": "string",
                "description": "Age in minutes (e.g. \"3m\"), hours (e.g. \"5h\"), days (e.g. \"10d\"), or weeks (e.g. \"2w\").",
                "example": "3d",
                "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                "minLength": 1,
                "maxLength": 8
            },
            "BootInitrdPath": {
                "type": "string",
                "description": "A path to the initrd to use for booting.",
                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                "maxLength": 4095
            },
            "BootKernelPath": {
                "type": "string",
                "description": "A path to the kernel to use for booting.",
                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                "maxLength": 4095
            },
            "BootManifestPath": {
                "type": "string",
                "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                "minLength": 1,
                "maxLength": 4095
            },
            "BootKernelParameters": {
                "type": "string",
                "description": "The kernel parameters to use to boot the nodes.",
                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                "maxLength": 4096
            },
            "BootSetEtag": {
                "type": "string",
                "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                "maxLength": 65536
            },
            "BootSetName": {
                "type": "string",
                "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                "example": "compute",
                "minLength": 1,
                "maxLength": 127,
                "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                "writeOnly": true
            },
            "BootSetRootfsProvider": {
                "type": "string",
                "description": "The root file system provider.",
                "example": "cpss3",
                "minLength": 1,
                "maxLength": 511
            },
            "BootSetRootfsProviderPassthrough": {
                "type": "string",
                "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                "maxLength": 4096
            },
            "BootSetType": {
                "type": "string",
                "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                "example": "s3",
                "minLength": 1,
                "maxLength": 127
            },
            "CfsConfiguration": {
                "type": "string",
                "description": "The name of configuration to be applied.",
                "example": "compute-23.4.0",
                "maxLength": 127
            },
            "EmptyString": {
                "type": "string",
                "description": "An empty string value.",
                "enum": [
                    ""
                ],
                "maxLength": 0
            },
            "EmptyStringNullable": {
                "type": "string",
                "description": "An empty string value.",
                "enum": [
                    ""
                ],
                "nullable": true,
                "maxLength": 0
            },
            "EnableCfs": {
                "type": "boolean",
                "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                "default": true
            },
            "HardwareComponentName": {
                "type": "string",
                "description": "Hardware component name (xname).",
                "example": "x3001c0s39b0n0",
                "minLength": 1,
                "maxLength": 127
            },
            "Healthz": {
                "description": "Service health status",
                "type": "object",
                "properties": {
                    "dbStatus": {
                        "type": "string"
                    },
                    "apiStatus": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "Link": {
                "description": "Link to other resources",
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string"
                    },
                    "rel": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "LinkList": {
                "description": "List of links to other resources",
                "type": "array",
                "items": {
                    "description": "Link to other resources",
                    "type": "object",
                    "properties": {
                        "href": {
                            "type": "string"
                        },
                        "rel": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "LinkListReadOnly": {
                "description": "List of links to other resources",
                "type": "array",
                "readOnly": true,
                "items": {
                    "description": "Link to other resources",
                    "type": "object",
                    "properties": {
                        "href": {
                            "type": "string"
                        },
                        "rel": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "NodeList": {
                "type": "array",
                "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                "minItems": 1,
                "maxItems": 65535,
                "example": [
                    "x3000c0s19b1n0",
                    "x3000c0s19b2n0"
                ],
                "items": {
                    "type": "string",
                    "description": "Hardware component name (xname).",
                    "example": "x3001c0s39b0n0",
                    "minLength": 1,
                    "maxLength": 127
                }
            },
            "NodeGroupList": {
                "type": "array",
                "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                "minItems": 1,
                "maxItems": 4095,
                "items": {
                    "type": "string",
                    "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                    "minLength": 1,
                    "maxLength": 127
                }
            },
            "NodeRoleList": {
                "type": "array",
                "description": "Node role list. Allows actions against nodes with associated roles.",
                "minItems": 1,
                "maxItems": 1023,
                "example": [
                    "Compute",
                    "Application"
                ],
                "items": {
                    "type": "string",
                    "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                    "example": "Compute",
                    "minLength": 1,
                    "maxLength": 127
                }
            },
            "ProblemDetails": {
                "description": "An error response for RFC 7807 problem details.",
                "type": "object",
                "properties": {
                    "type": {
                        "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                        "type": "string",
                        "format": "uri",
                        "default": "about:blank"
                    },
                    "title": {
                        "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "HTTP status code",
                        "type": "integer",
                        "example": 400
                    },
                    "instance": {
                        "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                        "format": "uri",
                        "type": "string"
                    },
                    "detail": {
                        "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "SessionLimit": {
                "type": "string",
                "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                "maxLength": 524288,
                "nullable": true,
                "default": ""
            },
            "SessionTemplateDescription": {
                "type": "string",
                "description": "An optional description for the Session Template.",
                "minLength": 1,
                "maxLength": 1023
            },
            "SessionTemplateName": {
                "type": "string",
                "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                "minLength": 1,
                "maxLength": 127,
                "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                "example": "cle-1.0.0"
            },
            "TenantName": {
                "type": "string",
                "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                "example": "vcluster-my-tenant1",
                "maxLength": 127
            },
            "Version": {
                "description": "Version data",
                "type": "object",
                "properties": {
                    "major": {
                        "type": "string",
                        "pattern": "^(0|[1-9][0-9]*)$"
                    },
                    "minor": {
                        "type": "string",
                        "pattern": "^(0|[1-9][0-9]*)$"
                    },
                    "patch": {
                        "type": "string",
                        "pattern": "^(0|[1-9][0-9]*)$"
                    },
                    "links": {
                        "description": "List of links to other resources",
                        "type": "array",
                        "items": {
                            "description": "Link to other resources",
                            "type": "object",
                            "properties": {
                                "href": {
                                    "type": "string"
                                },
                                "rel": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                },
                "additionalProperties": false
            },
            "V2TenantName": {
                "type": "string",
                "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                "nullable": true,
                "readOnly": true,
                "maxLength": 127
            },
            "V2CfsParameters": {
                "type": "object",
                "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                "properties": {
                    "configuration": {
                        "type": "string",
                        "description": "The name of configuration to be applied.",
                        "example": "compute-23.4.0",
                        "maxLength": 127
                    }
                },
                "additionalProperties": false
            },
            "V2SessionTemplate": {
                "type": "object",
                "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "readOnly": true,
                        "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "example": "cle-1.0.0"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                        "nullable": true,
                        "readOnly": true,
                        "maxLength": 127
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Session Template.",
                        "minLength": 1,
                        "maxLength": 1023
                    },
                    "enable_cfs": {
                        "type": "boolean",
                        "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                        "default": true
                    },
                    "cfs": {
                        "type": "object",
                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                        "properties": {
                            "configuration": {
                                "type": "string",
                                "description": "The name of configuration to be applied.",
                                "example": "compute-23.4.0",
                                "maxLength": 127
                            }
                        },
                        "additionalProperties": false
                    },
                    "boot_sets": {
                        "type": "object",
                        "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                        "minProperties": 1,
                        "maxProperties": 127,
                        "additionalProperties": {
                            "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                    "example": "compute",
                                    "minLength": 1,
                                    "maxLength": 127,
                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                    "writeOnly": true
                                },
                                "path": {
                                    "type": "string",
                                    "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                    "minLength": 1,
                                    "maxLength": 4095
                                },
                                "cfs": {
                                    "type": "object",
                                    "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                    "properties": {
                                        "configuration": {
                                            "type": "string",
                                            "description": "The name of configuration to be applied.",
                                            "example": "compute-23.4.0",
                                            "maxLength": 127
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "type": {
                                    "type": "string",
                                    "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                    "example": "s3",
                                    "minLength": 1,
                                    "maxLength": 127
                                },
                                "etag": {
                                    "type": "string",
                                    "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                    "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                    "maxLength": 65536
                                },
                                "kernel_parameters": {
                                    "type": "string",
                                    "description": "The kernel parameters to use to boot the nodes.",
                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                    "maxLength": 4096
                                },
                                "node_list": {
                                    "type": "array",
                                    "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                    "minItems": 1,
                                    "maxItems": 65535,
                                    "example": [
                                        "x3000c0s19b1n0",
                                        "x3000c0s19b2n0"
                                    ],
                                    "items": {
                                        "type": "string",
                                        "description": "Hardware component name (xname).",
                                        "example": "x3001c0s39b0n0",
                                        "minLength": 1,
                                        "maxLength": 127
                                    }
                                },
                                "node_roles_groups": {
                                    "type": "array",
                                    "description": "Node role list. Allows actions against nodes with associated roles.",
                                    "minItems": 1,
                                    "maxItems": 1023,
                                    "example": [
                                        "Compute",
                                        "Application"
                                    ],
                                    "items": {
                                        "type": "string",
                                        "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                        "example": "Compute",
                                        "minLength": 1,
                                        "maxLength": 127
                                    }
                                },
                                "node_groups": {
                                    "type": "array",
                                    "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                    "minItems": 1,
                                    "maxItems": 4095,
                                    "items": {
                                        "type": "string",
                                        "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                        "minLength": 1,
                                        "maxLength": 127
                                    }
                                },
                                "arch": {
                                    "type": "string",
                                    "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                    "default": "X86",
                                    "enum": [
                                        "X86",
                                        "ARM",
                                        "Other",
                                        "Unknown"
                                    ]
                                },
                                "rootfs_provider": {
                                    "type": "string",
                                    "description": "The root file system provider.",
                                    "example": "cpss3",
                                    "minLength": 1,
                                    "maxLength": 511
                                },
                                "rootfs_provider_passthrough": {
                                    "type": "string",
                                    "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                    "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                    "maxLength": 4096
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "path",
                                "type"
                            ]
                        }
                    },
                    "links": {
                        "description": "List of links to other resources",
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "description": "Link to other resources",
                            "type": "object",
                            "properties": {
                                "href": {
                                    "type": "string"
                                },
                                "rel": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                },
                "additionalProperties": false,
                "required": [
                    "boot_sets"
                ]
            },
            "V2SessionTemplateValidation": {
                "description": "Message describing errors or incompleteness in a Session Template.\n",
                "type": "string"
            },
            "V2SessionName": {
                "type": "string",
                "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                "minLength": 1,
                "maxLength": 127,
                "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                "example": "session-20190728032600"
            },
            "V2SessionNameOrEmpty": {
                "type": "string",
                "description": "Name of the Session or an empty string."
            },
            "V2SessionOperation": {
                "type": "string",
                "enum": [
                    "boot",
                    "reboot",
                    "shutdown"
                ],
                "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
            },
            "V2SessionCreate": {
                "description": "A Session Creation object. A UUID name is generated if a name is not provided. The limit parameter is\nrequired if the session_limit_required option is true.\n",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "session-20190728032600"
                    },
                    "operation": {
                        "type": "string",
                        "enum": [
                            "boot",
                            "reboot",
                            "shutdown"
                        ],
                        "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                    },
                    "template_name": {
                        "type": "string",
                        "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "cle-1.0.0"
                    },
                    "limit": {
                        "type": "string",
                        "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                        "maxLength": 524288,
                        "nullable": true,
                        "default": ""
                    },
                    "stage": {
                        "type": "boolean",
                        "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n",
                        "default": false
                    },
                    "include_disabled": {
                        "type": "boolean",
                        "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n",
                        "default": false
                    }
                },
                "required": [
                    "operation",
                    "template_name"
                ],
                "additionalProperties": false
            },
            "V2SessionStatusLabel": {
                "type": "string",
                "enum": [
                    "pending",
                    "running",
                    "complete"
                ],
                "description": "The status of a Session."
            },
            "V2SessionStartTime": {
                "type": "string",
                "description": "When the Session was created.",
                "maxLength": 127
            },
            "V2SessionEndTime": {
                "type": "string",
                "nullable": true,
                "description": "When the Session was completed. A null value means the Session has not ended.",
                "maxLength": 127
            },
            "V2SessionStatus": {
                "type": "object",
                "description": "Information on the status of a Session.\n",
                "properties": {
                    "start_time": {
                        "type": "string",
                        "description": "When the Session was created.",
                        "maxLength": 127
                    },
                    "end_time": {
                        "type": "string",
                        "nullable": true,
                        "description": "When the Session was completed. A null value means the Session has not ended.",
                        "maxLength": 127
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "running",
                            "complete"
                        ],
                        "description": "The status of a Session."
                    },
                    "error": {
                        "type": "string",
                        "nullable": true,
                        "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                        "maxLength": 65536
                    }
                },
                "additionalProperties": false
            },
            "V2BootSet": {
                "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                        "example": "compute",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "writeOnly": true
                    },
                    "path": {
                        "type": "string",
                        "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                        "minLength": 1,
                        "maxLength": 4095
                    },
                    "cfs": {
                        "type": "object",
                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                        "properties": {
                            "configuration": {
                                "type": "string",
                                "description": "The name of configuration to be applied.",
                                "example": "compute-23.4.0",
                                "maxLength": 127
                            }
                        },
                        "additionalProperties": false
                    },
                    "type": {
                        "type": "string",
                        "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                        "example": "s3",
                        "minLength": 1,
                        "maxLength": 127
                    },
                    "etag": {
                        "type": "string",
                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                        "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                        "maxLength": 65536
                    },
                    "kernel_parameters": {
                        "type": "string",
                        "description": "The kernel parameters to use to boot the nodes.",
                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                        "maxLength": 4096
                    },
                    "node_list": {
                        "type": "array",
                        "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                        "minItems": 1,
                        "maxItems": 65535,
                        "example": [
                            "x3000c0s19b1n0",
                            "x3000c0s19b2n0"
                        ],
                        "items": {
                            "type": "string",
                            "description": "Hardware component name (xname).",
                            "example": "x3001c0s39b0n0",
                            "minLength": 1,
                            "maxLength": 127
                        }
                    },
                    "node_roles_groups": {
                        "type": "array",
                        "description": "Node role list. Allows actions against nodes with associated roles.",
                        "minItems": 1,
                        "maxItems": 1023,
                        "example": [
                            "Compute",
                            "Application"
                        ],
                        "items": {
                            "type": "string",
                            "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                            "example": "Compute",
                            "minLength": 1,
                            "maxLength": 127
                        }
                    },
                    "node_groups": {
                        "type": "array",
                        "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                        "minItems": 1,
                        "maxItems": 4095,
                        "items": {
                            "type": "string",
                            "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                            "minLength": 1,
                            "maxLength": 127
                        }
                    },
                    "arch": {
                        "type": "string",
                        "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                        "default": "X86",
                        "enum": [
                            "X86",
                            "ARM",
                            "Other",
                            "Unknown"
                        ]
                    },
                    "rootfs_provider": {
                        "type": "string",
                        "description": "The root file system provider.",
                        "example": "cpss3",
                        "minLength": 1,
                        "maxLength": 511
                    },
                    "rootfs_provider_passthrough": {
                        "type": "string",
                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                        "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                        "maxLength": 4096
                    }
                },
                "additionalProperties": false,
                "required": [
                    "path",
                    "type"
                ]
            },
            "V2SessionTemplateArray": {
                "description": "An array of Session Templates.",
                "type": "array",
                "items": {
                    "type": "object",
                    "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                    "properties": {
                        "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 127,
                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                            "readOnly": true,
                            "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                            "example": "cle-1.0.0"
                        },
                        "tenant": {
                            "type": "string",
                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                            "nullable": true,
                            "readOnly": true,
                            "maxLength": 127
                        },
                        "description": {
                            "type": "string",
                            "description": "An optional description for the Session Template.",
                            "minLength": 1,
                            "maxLength": 1023
                        },
                        "enable_cfs": {
                            "type": "boolean",
                            "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                            "default": true
                        },
                        "cfs": {
                            "type": "object",
                            "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                            "properties": {
                                "configuration": {
                                    "type": "string",
                                    "description": "The name of configuration to be applied.",
                                    "example": "compute-23.4.0",
                                    "maxLength": 127
                                }
                            },
                            "additionalProperties": false
                        },
                        "boot_sets": {
                            "type": "object",
                            "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                            "minProperties": 1,
                            "maxProperties": 127,
                            "additionalProperties": {
                                "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                        "example": "compute",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "writeOnly": true
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                        "minLength": 1,
                                        "maxLength": 4095
                                    },
                                    "cfs": {
                                        "type": "object",
                                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                        "properties": {
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                        "example": "s3",
                                        "minLength": 1,
                                        "maxLength": 127
                                    },
                                    "etag": {
                                        "type": "string",
                                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                        "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                        "maxLength": 65536
                                    },
                                    "kernel_parameters": {
                                        "type": "string",
                                        "description": "The kernel parameters to use to boot the nodes.",
                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                        "maxLength": 4096
                                    },
                                    "node_list": {
                                        "type": "array",
                                        "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                        "minItems": 1,
                                        "maxItems": 65535,
                                        "example": [
                                            "x3000c0s19b1n0",
                                            "x3000c0s19b2n0"
                                        ],
                                        "items": {
                                            "type": "string",
                                            "description": "Hardware component name (xname).",
                                            "example": "x3001c0s39b0n0",
                                            "minLength": 1,
                                            "maxLength": 127
                                        }
                                    },
                                    "node_roles_groups": {
                                        "type": "array",
                                        "description": "Node role list. Allows actions against nodes with associated roles.",
                                        "minItems": 1,
                                        "maxItems": 1023,
                                        "example": [
                                            "Compute",
                                            "Application"
                                        ],
                                        "items": {
                                            "type": "string",
                                            "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                            "example": "Compute",
                                            "minLength": 1,
                                            "maxLength": 127
                                        }
                                    },
                                    "node_groups": {
                                        "type": "array",
                                        "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                        "minItems": 1,
                                        "maxItems": 4095,
                                        "items": {
                                            "type": "string",
                                            "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                            "minLength": 1,
                                            "maxLength": 127
                                        }
                                    },
                                    "arch": {
                                        "type": "string",
                                        "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                        "default": "X86",
                                        "enum": [
                                            "X86",
                                            "ARM",
                                            "Other",
                                            "Unknown"
                                        ]
                                    },
                                    "rootfs_provider": {
                                        "type": "string",
                                        "description": "The root file system provider.",
                                        "example": "cpss3",
                                        "minLength": 1,
                                        "maxLength": 511
                                    },
                                    "rootfs_provider_passthrough": {
                                        "type": "string",
                                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                        "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                        "maxLength": 4096
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "path",
                                    "type"
                                ]
                            }
                        },
                        "links": {
                            "description": "List of links to other resources",
                            "type": "array",
                            "readOnly": true,
                            "items": {
                                "description": "Link to other resources",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "type": "string"
                                    },
                                    "rel": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "boot_sets"
                    ]
                }
            },
            "V2Session": {
                "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "session-20190728032600"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                        "nullable": true,
                        "readOnly": true,
                        "maxLength": 127
                    },
                    "operation": {
                        "type": "string",
                        "enum": [
                            "boot",
                            "reboot",
                            "shutdown"
                        ],
                        "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                    },
                    "template_name": {
                        "type": "string",
                        "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "cle-1.0.0"
                    },
                    "limit": {
                        "type": "string",
                        "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                        "maxLength": 524288,
                        "nullable": true,
                        "default": ""
                    },
                    "stage": {
                        "type": "boolean",
                        "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                    },
                    "components": {
                        "type": "string",
                        "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                        "maxLength": 524288
                    },
                    "include_disabled": {
                        "type": "boolean",
                        "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                    },
                    "status": {
                        "type": "object",
                        "description": "Information on the status of a Session.\n",
                        "properties": {
                            "start_time": {
                                "type": "string",
                                "description": "When the Session was created.",
                                "maxLength": 127
                            },
                            "end_time": {
                                "type": "string",
                                "nullable": true,
                                "description": "When the Session was completed. A null value means the Session has not ended.",
                                "maxLength": 127
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "pending",
                                    "running",
                                    "complete"
                                ],
                                "description": "The status of a Session."
                            },
                            "error": {
                                "type": "string",
                                "nullable": true,
                                "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                "maxLength": 65536
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false,
                "required": [
                    "name",
                    "operation",
                    "template_name"
                ]
            },
            "V2SessionUpdate": {
                "description": "A Session update object\n\n## Link Relationships\n\n* self : The Session object\n",
                "type": "object",
                "properties": {
                    "components": {
                        "type": "string",
                        "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                        "maxLength": 524288
                    },
                    "status": {
                        "type": "object",
                        "description": "Information on the status of a Session.\n",
                        "properties": {
                            "start_time": {
                                "type": "string",
                                "description": "When the Session was created.",
                                "maxLength": 127
                            },
                            "end_time": {
                                "type": "string",
                                "nullable": true,
                                "description": "When the Session was completed. A null value means the Session has not ended.",
                                "maxLength": 127
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "pending",
                                    "running",
                                    "complete"
                                ],
                                "description": "The status of a Session."
                            },
                            "error": {
                                "type": "string",
                                "nullable": true,
                                "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                "maxLength": 65536
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "V2SessionArray": {
                "description": "An array of Sessions.",
                "type": "array",
                "items": {
                    "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                            "minLength": 1,
                            "maxLength": 127,
                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                            "example": "session-20190728032600"
                        },
                        "tenant": {
                            "type": "string",
                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                            "nullable": true,
                            "readOnly": true,
                            "maxLength": 127
                        },
                        "operation": {
                            "type": "string",
                            "enum": [
                                "boot",
                                "reboot",
                                "shutdown"
                            ],
                            "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                        },
                        "template_name": {
                            "type": "string",
                            "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                            "minLength": 1,
                            "maxLength": 127,
                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                            "example": "cle-1.0.0"
                        },
                        "limit": {
                            "type": "string",
                            "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                            "maxLength": 524288,
                            "nullable": true,
                            "default": ""
                        },
                        "stage": {
                            "type": "boolean",
                            "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                        },
                        "components": {
                            "type": "string",
                            "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                            "maxLength": 524288
                        },
                        "include_disabled": {
                            "type": "boolean",
                            "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                        },
                        "status": {
                            "type": "object",
                            "description": "Information on the status of a Session.\n",
                            "properties": {
                                "start_time": {
                                    "type": "string",
                                    "description": "When the Session was created.",
                                    "maxLength": 127
                                },
                                "end_time": {
                                    "type": "string",
                                    "nullable": true,
                                    "description": "When the Session was completed. A null value means the Session has not ended.",
                                    "maxLength": 127
                                },
                                "status": {
                                    "type": "string",
                                    "enum": [
                                        "pending",
                                        "running",
                                        "complete"
                                    ],
                                    "description": "The status of a Session."
                                },
                                "error": {
                                    "type": "string",
                                    "nullable": true,
                                    "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                    "maxLength": 65536
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "name",
                        "operation",
                        "template_name"
                    ]
                }
            },
            "V2SessionExtendedStatusPhases": {
                "type": "object",
                "description": "Detailed information on the phases of a Session.\n",
                "properties": {
                    "percent_complete": {
                        "type": "number",
                        "description": "The percent of Components currently in a completed/stable state\n"
                    },
                    "percent_powering_on": {
                        "type": "number",
                        "description": "The percent of Components currently in the powering-on phase\n"
                    },
                    "percent_powering_off": {
                        "type": "number",
                        "description": "The percent of Components currently in the powering-off phase\n"
                    },
                    "percent_configuring": {
                        "type": "number",
                        "description": "The percent of Components currently in the configuring phase\n"
                    }
                },
                "additionalProperties": false
            },
            "V2SessionExtendedStatusTiming": {
                "type": "object",
                "description": "Detailed information on the timing of a Session.\n",
                "properties": {
                    "start_time": {
                        "type": "string",
                        "description": "When the Session was created.",
                        "maxLength": 127
                    },
                    "end_time": {
                        "type": "string",
                        "nullable": true,
                        "description": "When the Session was completed. A null value means the Session has not ended.",
                        "maxLength": 127
                    },
                    "duration": {
                        "type": "string",
                        "description": "The current duration of the ongoing Session or final duration of the completed Session.\n"
                    }
                },
                "additionalProperties": false
            },
            "V2SessionExtendedStatus": {
                "type": "object",
                "description": "Detailed information on the status of a Session.\n",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "running",
                            "complete"
                        ],
                        "description": "The status of a Session."
                    },
                    "managed_components_count": {
                        "type": "integer",
                        "description": "The count of Components currently managed by this Session\n"
                    },
                    "phases": {
                        "type": "object",
                        "description": "Detailed information on the phases of a Session.\n",
                        "properties": {
                            "percent_complete": {
                                "type": "number",
                                "description": "The percent of Components currently in a completed/stable state\n"
                            },
                            "percent_powering_on": {
                                "type": "number",
                                "description": "The percent of Components currently in the powering-on phase\n"
                            },
                            "percent_powering_off": {
                                "type": "number",
                                "description": "The percent of Components currently in the powering-off phase\n"
                            },
                            "percent_configuring": {
                                "type": "number",
                                "description": "The percent of Components currently in the configuring phase\n"
                            }
                        },
                        "additionalProperties": false
                    },
                    "percent_successful": {
                        "type": "number",
                        "description": "The percent of Components currently in a successful state\n"
                    },
                    "percent_failed": {
                        "type": "number",
                        "description": "The percent of Components currently in a failed state\n"
                    },
                    "percent_staged": {
                        "type": "number",
                        "description": "The percent of Components currently still staged for this Session\n"
                    },
                    "error_summary": {
                        "type": "object",
                        "description": "A summary of the errors currently listed by all Components\n"
                    },
                    "timing": {
                        "type": "object",
                        "description": "Detailed information on the timing of a Session.\n",
                        "properties": {
                            "start_time": {
                                "type": "string",
                                "description": "When the Session was created.",
                                "maxLength": 127
                            },
                            "end_time": {
                                "type": "string",
                                "nullable": true,
                                "description": "When the Session was completed. A null value means the Session has not ended.",
                                "maxLength": 127
                            },
                            "duration": {
                                "type": "string",
                                "description": "The current duration of the ongoing Session or final duration of the completed Session.\n"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "V2BootArtifacts": {
                "description": "A collection of boot artifacts.\n",
                "type": "object",
                "properties": {
                    "kernel": {
                        "type": "string",
                        "description": "A path to the kernel to use for booting.",
                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                        "maxLength": 4095
                    },
                    "kernel_parameters": {
                        "type": "string",
                        "description": "The kernel parameters to use to boot the nodes.",
                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                        "maxLength": 4096
                    },
                    "initrd": {
                        "type": "string",
                        "description": "A path to the initrd to use for booting.",
                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                        "maxLength": 4095
                    }
                },
                "additionalProperties": false
            },
            "V2ComponentBssToken": {
                "type": "string",
                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                "maxLength": 65535
            },
            "V2ComponentId": {
                "type": "string",
                "description": "The Component's ID. (e.g. xname for hardware Components)",
                "minLength": 1,
                "maxLength": 127
            },
            "V2ComponentIdList": {
                "description": "A list of Component IDs (xnames)",
                "type": "array",
                "maxItems": 32768,
                "items": {
                    "type": "string",
                    "description": "The Component's ID. (e.g. xname for hardware Components)",
                    "minLength": 1,
                    "maxLength": 127
                }
            },
            "V2ComponentLastUpdated": {
                "type": "string",
                "description": "The date/time when the state was last updated in RFC 3339 format.",
                "example": "2019-07-28T03:26:00Z",
                "format": "date-time",
                "readOnly": true
            },
            "V2ComponentActualState": {
                "description": "The actual boot artifacts and configuration for a Component\n",
                "type": "object",
                "properties": {
                    "boot_artifacts": {
                        "description": "A collection of boot artifacts.\n",
                        "type": "object",
                        "properties": {
                            "kernel": {
                                "type": "string",
                                "description": "A path to the kernel to use for booting.",
                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                "maxLength": 4095
                            },
                            "kernel_parameters": {
                                "type": "string",
                                "description": "The kernel parameters to use to boot the nodes.",
                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                "maxLength": 4096
                            },
                            "initrd": {
                                "type": "string",
                                "description": "A path to the initrd to use for booting.",
                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                "maxLength": 4095
                            }
                        },
                        "additionalProperties": false
                    },
                    "bss_token": {
                        "type": "string",
                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                        "maxLength": 65535
                    },
                    "last_updated": {
                        "type": "string",
                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                        "example": "2019-07-28T03:26:00Z",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "V2ComponentDesiredState": {
                "description": "The desired boot artifacts and configuration for a Component\n",
                "type": "object",
                "properties": {
                    "boot_artifacts": {
                        "description": "A collection of boot artifacts.\n",
                        "type": "object",
                        "properties": {
                            "kernel": {
                                "type": "string",
                                "description": "A path to the kernel to use for booting.",
                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                "maxLength": 4095
                            },
                            "kernel_parameters": {
                                "type": "string",
                                "description": "The kernel parameters to use to boot the nodes.",
                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                "maxLength": 4096
                            },
                            "initrd": {
                                "type": "string",
                                "description": "A path to the initrd to use for booting.",
                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                "maxLength": 4095
                            }
                        },
                        "additionalProperties": false
                    },
                    "configuration": {
                        "type": "string",
                        "description": "The name of configuration to be applied.",
                        "example": "compute-23.4.0",
                        "maxLength": 127
                    },
                    "bss_token": {
                        "type": "string",
                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                        "maxLength": 65535
                    },
                    "last_updated": {
                        "type": "string",
                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                        "example": "2019-07-28T03:26:00Z",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "V2ComponentStagedState": {
                "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                "type": "object",
                "properties": {
                    "boot_artifacts": {
                        "description": "A collection of boot artifacts.\n",
                        "type": "object",
                        "properties": {
                            "kernel": {
                                "type": "string",
                                "description": "A path to the kernel to use for booting.",
                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                "maxLength": 4095
                            },
                            "kernel_parameters": {
                                "type": "string",
                                "description": "The kernel parameters to use to boot the nodes.",
                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                "maxLength": 4096
                            },
                            "initrd": {
                                "type": "string",
                                "description": "A path to the initrd to use for booting.",
                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                "maxLength": 4095
                            }
                        },
                        "additionalProperties": false
                    },
                    "configuration": {
                        "type": "string",
                        "description": "The name of configuration to be applied.",
                        "example": "compute-23.4.0",
                        "maxLength": 127
                    },
                    "session": {
                        "type": "string",
                        "description": "Name of the Session or an empty string."
                    },
                    "last_updated": {
                        "type": "string",
                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                        "example": "2019-07-28T03:26:00Z",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "V2ComponentLastAction": {
                "description": "Information on the most recent action taken against the node.\n",
                "type": "object",
                "properties": {
                    "last_updated": {
                        "type": "string",
                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                        "example": "2019-07-28T03:26:00Z",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "action": {
                        "type": "string",
                        "description": "A description of the most recent operator/action to impact the Component.",
                        "maxLength": 1024
                    },
                    "failed": {
                        "type": "boolean",
                        "description": "Denotes if the last action failed to accomplish its task"
                    }
                },
                "additionalProperties": false
            },
            "V2ComponentEventStats": {
                "description": "Information on the most recent attempt to return the node to its desired state.\n",
                "type": "object",
                "properties": {
                    "power_on_attempts": {
                        "type": "integer",
                        "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                        "minimum": 0,
                        "maximum": 1048576
                    },
                    "power_off_graceful_attempts": {
                        "type": "integer",
                        "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                        "minimum": 0,
                        "maximum": 1048576
                    },
                    "power_off_forceful_attempts": {
                        "type": "integer",
                        "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                        "minimum": 0,
                        "maximum": 1048576
                    }
                },
                "additionalProperties": false
            },
            "V2ComponentPhase": {
                "type": "string",
                "description": "The current phase of the Component in the boot process.",
                "maxLength": 128
            },
            "V2ComponentStatus": {
                "description": "Status information for the Component",
                "type": "object",
                "properties": {
                    "phase": {
                        "type": "string",
                        "description": "The current phase of the Component in the boot process.",
                        "maxLength": 128
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the Component.  More detailed than phase.",
                        "readOnly": true
                    },
                    "status_override": {
                        "type": "string",
                        "description": "If set, this will override the status value.",
                        "maxLength": 65536
                    }
                },
                "additionalProperties": false
            },
            "V2Component": {
                "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                        "minLength": 1,
                        "maxLength": 127
                    },
                    "actual_state": {
                        "description": "The actual boot artifacts and configuration for a Component\n",
                        "type": "object",
                        "properties": {
                            "boot_artifacts": {
                                "description": "A collection of boot artifacts.\n",
                                "type": "object",
                                "properties": {
                                    "kernel": {
                                        "type": "string",
                                        "description": "A path to the kernel to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                        "maxLength": 4095
                                    },
                                    "kernel_parameters": {
                                        "type": "string",
                                        "description": "The kernel parameters to use to boot the nodes.",
                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                        "maxLength": 4096
                                    },
                                    "initrd": {
                                        "type": "string",
                                        "description": "A path to the initrd to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                        "maxLength": 4095
                                    }
                                },
                                "additionalProperties": false
                            },
                            "bss_token": {
                                "type": "string",
                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                "maxLength": 65535
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                "example": "2019-07-28T03:26:00Z",
                                "format": "date-time",
                                "readOnly": true
                            }
                        },
                        "additionalProperties": false
                    },
                    "desired_state": {
                        "description": "The desired boot artifacts and configuration for a Component\n",
                        "type": "object",
                        "properties": {
                            "boot_artifacts": {
                                "description": "A collection of boot artifacts.\n",
                                "type": "object",
                                "properties": {
                                    "kernel": {
                                        "type": "string",
                                        "description": "A path to the kernel to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                        "maxLength": 4095
                                    },
                                    "kernel_parameters": {
                                        "type": "string",
                                        "description": "The kernel parameters to use to boot the nodes.",
                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                        "maxLength": 4096
                                    },
                                    "initrd": {
                                        "type": "string",
                                        "description": "A path to the initrd to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                        "maxLength": 4095
                                    }
                                },
                                "additionalProperties": false
                            },
                            "configuration": {
                                "type": "string",
                                "description": "The name of configuration to be applied.",
                                "example": "compute-23.4.0",
                                "maxLength": 127
                            },
                            "bss_token": {
                                "type": "string",
                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                "maxLength": 65535
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                "example": "2019-07-28T03:26:00Z",
                                "format": "date-time",
                                "readOnly": true
                            }
                        },
                        "additionalProperties": false
                    },
                    "staged_state": {
                        "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                        "type": "object",
                        "properties": {
                            "boot_artifacts": {
                                "description": "A collection of boot artifacts.\n",
                                "type": "object",
                                "properties": {
                                    "kernel": {
                                        "type": "string",
                                        "description": "A path to the kernel to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                        "maxLength": 4095
                                    },
                                    "kernel_parameters": {
                                        "type": "string",
                                        "description": "The kernel parameters to use to boot the nodes.",
                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                        "maxLength": 4096
                                    },
                                    "initrd": {
                                        "type": "string",
                                        "description": "A path to the initrd to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                        "maxLength": 4095
                                    }
                                },
                                "additionalProperties": false
                            },
                            "configuration": {
                                "type": "string",
                                "description": "The name of configuration to be applied.",
                                "example": "compute-23.4.0",
                                "maxLength": 127
                            },
                            "session": {
                                "type": "string",
                                "description": "Name of the Session or an empty string."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                "example": "2019-07-28T03:26:00Z",
                                "format": "date-time",
                                "readOnly": true
                            }
                        },
                        "additionalProperties": false
                    },
                    "last_action": {
                        "description": "Information on the most recent action taken against the node.\n",
                        "type": "object",
                        "properties": {
                            "last_updated": {
                                "type": "string",
                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                "example": "2019-07-28T03:26:00Z",
                                "format": "date-time",
                                "readOnly": true
                            },
                            "action": {
                                "type": "string",
                                "description": "A description of the most recent operator/action to impact the Component.",
                                "maxLength": 1024
                            },
                            "failed": {
                                "type": "boolean",
                                "description": "Denotes if the last action failed to accomplish its task"
                            }
                        },
                        "additionalProperties": false
                    },
                    "event_stats": {
                        "description": "Information on the most recent attempt to return the node to its desired state.\n",
                        "type": "object",
                        "properties": {
                            "power_on_attempts": {
                                "type": "integer",
                                "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                "minimum": 0,
                                "maximum": 1048576
                            },
                            "power_off_graceful_attempts": {
                                "type": "integer",
                                "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                "minimum": 0,
                                "maximum": 1048576
                            },
                            "power_off_forceful_attempts": {
                                "type": "integer",
                                "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                "minimum": 0,
                                "maximum": 1048576
                            }
                        },
                        "additionalProperties": false
                    },
                    "status": {
                        "description": "Status information for the Component",
                        "type": "object",
                        "properties": {
                            "phase": {
                                "type": "string",
                                "description": "The current phase of the Component in the boot process.",
                                "maxLength": 128
                            },
                            "status": {
                                "type": "string",
                                "description": "The current status of the Component.  More detailed than phase.",
                                "readOnly": true
                            },
                            "status_override": {
                                "type": "string",
                                "description": "If set, this will override the status value.",
                                "maxLength": 65536
                            }
                        },
                        "additionalProperties": false
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if actions should be taken for this Component."
                    },
                    "error": {
                        "type": "string",
                        "description": "A description of the most recent error to impact the Component.",
                        "maxLength": 65536
                    },
                    "session": {
                        "type": "string",
                        "description": "Name of the Session or an empty string."
                    },
                    "retry_policy": {
                        "type": "integer",
                        "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                        "example": 1,
                        "minimum": 0,
                        "maximum": 1048576
                    }
                },
                "additionalProperties": false,
                "minProperties": 1
            },
            "V2ComponentWithId": {
                "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                        "minLength": 1,
                        "maxLength": 127
                    },
                    "actual_state": {
                        "description": "The actual boot artifacts and configuration for a Component\n",
                        "type": "object",
                        "properties": {
                            "boot_artifacts": {
                                "description": "A collection of boot artifacts.\n",
                                "type": "object",
                                "properties": {
                                    "kernel": {
                                        "type": "string",
                                        "description": "A path to the kernel to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                        "maxLength": 4095
                                    },
                                    "kernel_parameters": {
                                        "type": "string",
                                        "description": "The kernel parameters to use to boot the nodes.",
                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                        "maxLength": 4096
                                    },
                                    "initrd": {
                                        "type": "string",
                                        "description": "A path to the initrd to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                        "maxLength": 4095
                                    }
                                },
                                "additionalProperties": false
                            },
                            "bss_token": {
                                "type": "string",
                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                "maxLength": 65535
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                "example": "2019-07-28T03:26:00Z",
                                "format": "date-time",
                                "readOnly": true
                            }
                        },
                        "additionalProperties": false
                    },
                    "desired_state": {
                        "description": "The desired boot artifacts and configuration for a Component\n",
                        "type": "object",
                        "properties": {
                            "boot_artifacts": {
                                "description": "A collection of boot artifacts.\n",
                                "type": "object",
                                "properties": {
                                    "kernel": {
                                        "type": "string",
                                        "description": "A path to the kernel to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                        "maxLength": 4095
                                    },
                                    "kernel_parameters": {
                                        "type": "string",
                                        "description": "The kernel parameters to use to boot the nodes.",
                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                        "maxLength": 4096
                                    },
                                    "initrd": {
                                        "type": "string",
                                        "description": "A path to the initrd to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                        "maxLength": 4095
                                    }
                                },
                                "additionalProperties": false
                            },
                            "configuration": {
                                "type": "string",
                                "description": "The name of configuration to be applied.",
                                "example": "compute-23.4.0",
                                "maxLength": 127
                            },
                            "bss_token": {
                                "type": "string",
                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                "maxLength": 65535
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                "example": "2019-07-28T03:26:00Z",
                                "format": "date-time",
                                "readOnly": true
                            }
                        },
                        "additionalProperties": false
                    },
                    "staged_state": {
                        "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                        "type": "object",
                        "properties": {
                            "boot_artifacts": {
                                "description": "A collection of boot artifacts.\n",
                                "type": "object",
                                "properties": {
                                    "kernel": {
                                        "type": "string",
                                        "description": "A path to the kernel to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                        "maxLength": 4095
                                    },
                                    "kernel_parameters": {
                                        "type": "string",
                                        "description": "The kernel parameters to use to boot the nodes.",
                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                        "maxLength": 4096
                                    },
                                    "initrd": {
                                        "type": "string",
                                        "description": "A path to the initrd to use for booting.",
                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                        "maxLength": 4095
                                    }
                                },
                                "additionalProperties": false
                            },
                            "configuration": {
                                "type": "string",
                                "description": "The name of configuration to be applied.",
                                "example": "compute-23.4.0",
                                "maxLength": 127
                            },
                            "session": {
                                "type": "string",
                                "description": "Name of the Session or an empty string."
                            },
                            "last_updated": {
                                "type": "string",
                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                "example": "2019-07-28T03:26:00Z",
                                "format": "date-time",
                                "readOnly": true
                            }
                        },
                        "additionalProperties": false
                    },
                    "last_action": {
                        "description": "Information on the most recent action taken against the node.\n",
                        "type": "object",
                        "properties": {
                            "last_updated": {
                                "type": "string",
                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                "example": "2019-07-28T03:26:00Z",
                                "format": "date-time",
                                "readOnly": true
                            },
                            "action": {
                                "type": "string",
                                "description": "A description of the most recent operator/action to impact the Component.",
                                "maxLength": 1024
                            },
                            "failed": {
                                "type": "boolean",
                                "description": "Denotes if the last action failed to accomplish its task"
                            }
                        },
                        "additionalProperties": false
                    },
                    "event_stats": {
                        "description": "Information on the most recent attempt to return the node to its desired state.\n",
                        "type": "object",
                        "properties": {
                            "power_on_attempts": {
                                "type": "integer",
                                "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                "minimum": 0,
                                "maximum": 1048576
                            },
                            "power_off_graceful_attempts": {
                                "type": "integer",
                                "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                "minimum": 0,
                                "maximum": 1048576
                            },
                            "power_off_forceful_attempts": {
                                "type": "integer",
                                "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                "minimum": 0,
                                "maximum": 1048576
                            }
                        },
                        "additionalProperties": false
                    },
                    "status": {
                        "description": "Status information for the Component",
                        "type": "object",
                        "properties": {
                            "phase": {
                                "type": "string",
                                "description": "The current phase of the Component in the boot process.",
                                "maxLength": 128
                            },
                            "status": {
                                "type": "string",
                                "description": "The current status of the Component.  More detailed than phase.",
                                "readOnly": true
                            },
                            "status_override": {
                                "type": "string",
                                "description": "If set, this will override the status value.",
                                "maxLength": 65536
                            }
                        },
                        "additionalProperties": false
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if actions should be taken for this Component."
                    },
                    "error": {
                        "type": "string",
                        "description": "A description of the most recent error to impact the Component.",
                        "maxLength": 65536
                    },
                    "session": {
                        "type": "string",
                        "description": "Name of the Session or an empty string."
                    },
                    "retry_policy": {
                        "type": "integer",
                        "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                        "example": 1,
                        "minimum": 0,
                        "maximum": 1048576
                    }
                },
                "additionalProperties": false,
                "required": [
                    "id"
                ]
            },
            "V2ComponentArray": {
                "description": "An array of Component states.",
                "type": "array",
                "items": {
                    "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                            "minLength": 1,
                            "maxLength": 127
                        },
                        "actual_state": {
                            "description": "The actual boot artifacts and configuration for a Component\n",
                            "type": "object",
                            "properties": {
                                "boot_artifacts": {
                                    "description": "A collection of boot artifacts.\n",
                                    "type": "object",
                                    "properties": {
                                        "kernel": {
                                            "type": "string",
                                            "description": "A path to the kernel to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                            "maxLength": 4095
                                        },
                                        "kernel_parameters": {
                                            "type": "string",
                                            "description": "The kernel parameters to use to boot the nodes.",
                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                            "maxLength": 4096
                                        },
                                        "initrd": {
                                            "type": "string",
                                            "description": "A path to the initrd to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                            "maxLength": 4095
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "bss_token": {
                                    "type": "string",
                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                    "maxLength": 65535
                                },
                                "last_updated": {
                                    "type": "string",
                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                    "example": "2019-07-28T03:26:00Z",
                                    "format": "date-time",
                                    "readOnly": true
                                }
                            },
                            "additionalProperties": false
                        },
                        "desired_state": {
                            "description": "The desired boot artifacts and configuration for a Component\n",
                            "type": "object",
                            "properties": {
                                "boot_artifacts": {
                                    "description": "A collection of boot artifacts.\n",
                                    "type": "object",
                                    "properties": {
                                        "kernel": {
                                            "type": "string",
                                            "description": "A path to the kernel to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                            "maxLength": 4095
                                        },
                                        "kernel_parameters": {
                                            "type": "string",
                                            "description": "The kernel parameters to use to boot the nodes.",
                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                            "maxLength": 4096
                                        },
                                        "initrd": {
                                            "type": "string",
                                            "description": "A path to the initrd to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                            "maxLength": 4095
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "configuration": {
                                    "type": "string",
                                    "description": "The name of configuration to be applied.",
                                    "example": "compute-23.4.0",
                                    "maxLength": 127
                                },
                                "bss_token": {
                                    "type": "string",
                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                    "maxLength": 65535
                                },
                                "last_updated": {
                                    "type": "string",
                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                    "example": "2019-07-28T03:26:00Z",
                                    "format": "date-time",
                                    "readOnly": true
                                }
                            },
                            "additionalProperties": false
                        },
                        "staged_state": {
                            "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                            "type": "object",
                            "properties": {
                                "boot_artifacts": {
                                    "description": "A collection of boot artifacts.\n",
                                    "type": "object",
                                    "properties": {
                                        "kernel": {
                                            "type": "string",
                                            "description": "A path to the kernel to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                            "maxLength": 4095
                                        },
                                        "kernel_parameters": {
                                            "type": "string",
                                            "description": "The kernel parameters to use to boot the nodes.",
                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                            "maxLength": 4096
                                        },
                                        "initrd": {
                                            "type": "string",
                                            "description": "A path to the initrd to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                            "maxLength": 4095
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "configuration": {
                                    "type": "string",
                                    "description": "The name of configuration to be applied.",
                                    "example": "compute-23.4.0",
                                    "maxLength": 127
                                },
                                "session": {
                                    "type": "string",
                                    "description": "Name of the Session or an empty string."
                                },
                                "last_updated": {
                                    "type": "string",
                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                    "example": "2019-07-28T03:26:00Z",
                                    "format": "date-time",
                                    "readOnly": true
                                }
                            },
                            "additionalProperties": false
                        },
                        "last_action": {
                            "description": "Information on the most recent action taken against the node.\n",
                            "type": "object",
                            "properties": {
                                "last_updated": {
                                    "type": "string",
                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                    "example": "2019-07-28T03:26:00Z",
                                    "format": "date-time",
                                    "readOnly": true
                                },
                                "action": {
                                    "type": "string",
                                    "description": "A description of the most recent operator/action to impact the Component.",
                                    "maxLength": 1024
                                },
                                "failed": {
                                    "type": "boolean",
                                    "description": "Denotes if the last action failed to accomplish its task"
                                }
                            },
                            "additionalProperties": false
                        },
                        "event_stats": {
                            "description": "Information on the most recent attempt to return the node to its desired state.\n",
                            "type": "object",
                            "properties": {
                                "power_on_attempts": {
                                    "type": "integer",
                                    "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "power_off_graceful_attempts": {
                                    "type": "integer",
                                    "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "power_off_forceful_attempts": {
                                    "type": "integer",
                                    "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                    "minimum": 0,
                                    "maximum": 1048576
                                }
                            },
                            "additionalProperties": false
                        },
                        "status": {
                            "description": "Status information for the Component",
                            "type": "object",
                            "properties": {
                                "phase": {
                                    "type": "string",
                                    "description": "The current phase of the Component in the boot process.",
                                    "maxLength": 128
                                },
                                "status": {
                                    "type": "string",
                                    "description": "The current status of the Component.  More detailed than phase.",
                                    "readOnly": true
                                },
                                "status_override": {
                                    "type": "string",
                                    "description": "If set, this will override the status value.",
                                    "maxLength": 65536
                                }
                            },
                            "additionalProperties": false
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "A flag indicating if actions should be taken for this Component."
                        },
                        "error": {
                            "type": "string",
                            "description": "A description of the most recent error to impact the Component.",
                            "maxLength": 65536
                        },
                        "session": {
                            "type": "string",
                            "description": "Name of the Session or an empty string."
                        },
                        "retry_policy": {
                            "type": "integer",
                            "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                            "example": 1,
                            "minimum": 0,
                            "maximum": 1048576
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1
                }
            },
            "V2ComponentArrayWithIds": {
                "description": "An array of Component states with associated Ids.",
                "type": "array",
                "items": {
                    "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                            "minLength": 1,
                            "maxLength": 127
                        },
                        "actual_state": {
                            "description": "The actual boot artifacts and configuration for a Component\n",
                            "type": "object",
                            "properties": {
                                "boot_artifacts": {
                                    "description": "A collection of boot artifacts.\n",
                                    "type": "object",
                                    "properties": {
                                        "kernel": {
                                            "type": "string",
                                            "description": "A path to the kernel to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                            "maxLength": 4095
                                        },
                                        "kernel_parameters": {
                                            "type": "string",
                                            "description": "The kernel parameters to use to boot the nodes.",
                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                            "maxLength": 4096
                                        },
                                        "initrd": {
                                            "type": "string",
                                            "description": "A path to the initrd to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                            "maxLength": 4095
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "bss_token": {
                                    "type": "string",
                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                    "maxLength": 65535
                                },
                                "last_updated": {
                                    "type": "string",
                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                    "example": "2019-07-28T03:26:00Z",
                                    "format": "date-time",
                                    "readOnly": true
                                }
                            },
                            "additionalProperties": false
                        },
                        "desired_state": {
                            "description": "The desired boot artifacts and configuration for a Component\n",
                            "type": "object",
                            "properties": {
                                "boot_artifacts": {
                                    "description": "A collection of boot artifacts.\n",
                                    "type": "object",
                                    "properties": {
                                        "kernel": {
                                            "type": "string",
                                            "description": "A path to the kernel to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                            "maxLength": 4095
                                        },
                                        "kernel_parameters": {
                                            "type": "string",
                                            "description": "The kernel parameters to use to boot the nodes.",
                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                            "maxLength": 4096
                                        },
                                        "initrd": {
                                            "type": "string",
                                            "description": "A path to the initrd to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                            "maxLength": 4095
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "configuration": {
                                    "type": "string",
                                    "description": "The name of configuration to be applied.",
                                    "example": "compute-23.4.0",
                                    "maxLength": 127
                                },
                                "bss_token": {
                                    "type": "string",
                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                    "maxLength": 65535
                                },
                                "last_updated": {
                                    "type": "string",
                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                    "example": "2019-07-28T03:26:00Z",
                                    "format": "date-time",
                                    "readOnly": true
                                }
                            },
                            "additionalProperties": false
                        },
                        "staged_state": {
                            "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                            "type": "object",
                            "properties": {
                                "boot_artifacts": {
                                    "description": "A collection of boot artifacts.\n",
                                    "type": "object",
                                    "properties": {
                                        "kernel": {
                                            "type": "string",
                                            "description": "A path to the kernel to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                            "maxLength": 4095
                                        },
                                        "kernel_parameters": {
                                            "type": "string",
                                            "description": "The kernel parameters to use to boot the nodes.",
                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                            "maxLength": 4096
                                        },
                                        "initrd": {
                                            "type": "string",
                                            "description": "A path to the initrd to use for booting.",
                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                            "maxLength": 4095
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "configuration": {
                                    "type": "string",
                                    "description": "The name of configuration to be applied.",
                                    "example": "compute-23.4.0",
                                    "maxLength": 127
                                },
                                "session": {
                                    "type": "string",
                                    "description": "Name of the Session or an empty string."
                                },
                                "last_updated": {
                                    "type": "string",
                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                    "example": "2019-07-28T03:26:00Z",
                                    "format": "date-time",
                                    "readOnly": true
                                }
                            },
                            "additionalProperties": false
                        },
                        "last_action": {
                            "description": "Information on the most recent action taken against the node.\n",
                            "type": "object",
                            "properties": {
                                "last_updated": {
                                    "type": "string",
                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                    "example": "2019-07-28T03:26:00Z",
                                    "format": "date-time",
                                    "readOnly": true
                                },
                                "action": {
                                    "type": "string",
                                    "description": "A description of the most recent operator/action to impact the Component.",
                                    "maxLength": 1024
                                },
                                "failed": {
                                    "type": "boolean",
                                    "description": "Denotes if the last action failed to accomplish its task"
                                }
                            },
                            "additionalProperties": false
                        },
                        "event_stats": {
                            "description": "Information on the most recent attempt to return the node to its desired state.\n",
                            "type": "object",
                            "properties": {
                                "power_on_attempts": {
                                    "type": "integer",
                                    "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "power_off_graceful_attempts": {
                                    "type": "integer",
                                    "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "power_off_forceful_attempts": {
                                    "type": "integer",
                                    "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                    "minimum": 0,
                                    "maximum": 1048576
                                }
                            },
                            "additionalProperties": false
                        },
                        "status": {
                            "description": "Status information for the Component",
                            "type": "object",
                            "properties": {
                                "phase": {
                                    "type": "string",
                                    "description": "The current phase of the Component in the boot process.",
                                    "maxLength": 128
                                },
                                "status": {
                                    "type": "string",
                                    "description": "The current status of the Component.  More detailed than phase.",
                                    "readOnly": true
                                },
                                "status_override": {
                                    "type": "string",
                                    "description": "If set, this will override the status value.",
                                    "maxLength": 65536
                                }
                            },
                            "additionalProperties": false
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "A flag indicating if actions should be taken for this Component."
                        },
                        "error": {
                            "type": "string",
                            "description": "A description of the most recent error to impact the Component.",
                            "maxLength": 65536
                        },
                        "session": {
                            "type": "string",
                            "description": "Name of the Session or an empty string."
                        },
                        "retry_policy": {
                            "type": "integer",
                            "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                            "example": 1,
                            "minimum": 0,
                            "maximum": 1048576
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "id"
                    ]
                }
            },
            "V2ComponentsFilterByIds": {
                "description": "Information for patching multiple Components by listing their IDs.\n",
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "string",
                        "description": "A comma-separated list of Component IDs.",
                        "minLength": 1,
                        "maxLength": 65535
                    },
                    "session": {
                        "type": "string",
                        "description": "An empty string value.",
                        "enum": [
                            ""
                        ],
                        "nullable": true,
                        "maxLength": 0
                    }
                },
                "required": [
                    "ids"
                ],
                "additionalProperties": false
            },
            "V2ComponentsFilterBySession": {
                "description": "Information for patching multiple Components by Session name.\nAll Components part of this Session will be patched.\n",
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "string",
                        "description": "An empty string value.",
                        "enum": [
                            ""
                        ],
                        "nullable": true,
                        "maxLength": 0
                    },
                    "session": {
                        "type": "string",
                        "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "session-20190728032600"
                    }
                },
                "required": [
                    "session"
                ],
                "additionalProperties": false
            },
            "V2ComponentsUpdate": {
                "description": "Information for patching multiple Components.",
                "type": "object",
                "properties": {
                    "patch": {
                        "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The Component's ID. (e.g. xname for hardware Components)",
                                "minLength": 1,
                                "maxLength": 127
                            },
                            "actual_state": {
                                "description": "The actual boot artifacts and configuration for a Component\n",
                                "type": "object",
                                "properties": {
                                    "boot_artifacts": {
                                        "description": "A collection of boot artifacts.\n",
                                        "type": "object",
                                        "properties": {
                                            "kernel": {
                                                "type": "string",
                                                "description": "A path to the kernel to use for booting.",
                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                "maxLength": 4095
                                            },
                                            "kernel_parameters": {
                                                "type": "string",
                                                "description": "The kernel parameters to use to boot the nodes.",
                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                "maxLength": 4096
                                            },
                                            "initrd": {
                                                "type": "string",
                                                "description": "A path to the initrd to use for booting.",
                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                "maxLength": 4095
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "bss_token": {
                                        "type": "string",
                                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                        "maxLength": 65535
                                    },
                                    "last_updated": {
                                        "type": "string",
                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                        "example": "2019-07-28T03:26:00Z",
                                        "format": "date-time",
                                        "readOnly": true
                                    }
                                },
                                "additionalProperties": false
                            },
                            "desired_state": {
                                "description": "The desired boot artifacts and configuration for a Component\n",
                                "type": "object",
                                "properties": {
                                    "boot_artifacts": {
                                        "description": "A collection of boot artifacts.\n",
                                        "type": "object",
                                        "properties": {
                                            "kernel": {
                                                "type": "string",
                                                "description": "A path to the kernel to use for booting.",
                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                "maxLength": 4095
                                            },
                                            "kernel_parameters": {
                                                "type": "string",
                                                "description": "The kernel parameters to use to boot the nodes.",
                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                "maxLength": 4096
                                            },
                                            "initrd": {
                                                "type": "string",
                                                "description": "A path to the initrd to use for booting.",
                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                "maxLength": 4095
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "configuration": {
                                        "type": "string",
                                        "description": "The name of configuration to be applied.",
                                        "example": "compute-23.4.0",
                                        "maxLength": 127
                                    },
                                    "bss_token": {
                                        "type": "string",
                                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                        "maxLength": 65535
                                    },
                                    "last_updated": {
                                        "type": "string",
                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                        "example": "2019-07-28T03:26:00Z",
                                        "format": "date-time",
                                        "readOnly": true
                                    }
                                },
                                "additionalProperties": false
                            },
                            "staged_state": {
                                "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                "type": "object",
                                "properties": {
                                    "boot_artifacts": {
                                        "description": "A collection of boot artifacts.\n",
                                        "type": "object",
                                        "properties": {
                                            "kernel": {
                                                "type": "string",
                                                "description": "A path to the kernel to use for booting.",
                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                "maxLength": 4095
                                            },
                                            "kernel_parameters": {
                                                "type": "string",
                                                "description": "The kernel parameters to use to boot the nodes.",
                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                "maxLength": 4096
                                            },
                                            "initrd": {
                                                "type": "string",
                                                "description": "A path to the initrd to use for booting.",
                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                "maxLength": 4095
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "configuration": {
                                        "type": "string",
                                        "description": "The name of configuration to be applied.",
                                        "example": "compute-23.4.0",
                                        "maxLength": 127
                                    },
                                    "session": {
                                        "type": "string",
                                        "description": "Name of the Session or an empty string."
                                    },
                                    "last_updated": {
                                        "type": "string",
                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                        "example": "2019-07-28T03:26:00Z",
                                        "format": "date-time",
                                        "readOnly": true
                                    }
                                },
                                "additionalProperties": false
                            },
                            "last_action": {
                                "description": "Information on the most recent action taken against the node.\n",
                                "type": "object",
                                "properties": {
                                    "last_updated": {
                                        "type": "string",
                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                        "example": "2019-07-28T03:26:00Z",
                                        "format": "date-time",
                                        "readOnly": true
                                    },
                                    "action": {
                                        "type": "string",
                                        "description": "A description of the most recent operator/action to impact the Component.",
                                        "maxLength": 1024
                                    },
                                    "failed": {
                                        "type": "boolean",
                                        "description": "Denotes if the last action failed to accomplish its task"
                                    }
                                },
                                "additionalProperties": false
                            },
                            "event_stats": {
                                "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                "type": "object",
                                "properties": {
                                    "power_on_attempts": {
                                        "type": "integer",
                                        "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                        "minimum": 0,
                                        "maximum": 1048576
                                    },
                                    "power_off_graceful_attempts": {
                                        "type": "integer",
                                        "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                        "minimum": 0,
                                        "maximum": 1048576
                                    },
                                    "power_off_forceful_attempts": {
                                        "type": "integer",
                                        "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                        "minimum": 0,
                                        "maximum": 1048576
                                    }
                                },
                                "additionalProperties": false
                            },
                            "status": {
                                "description": "Status information for the Component",
                                "type": "object",
                                "properties": {
                                    "phase": {
                                        "type": "string",
                                        "description": "The current phase of the Component in the boot process.",
                                        "maxLength": 128
                                    },
                                    "status": {
                                        "type": "string",
                                        "description": "The current status of the Component.  More detailed than phase.",
                                        "readOnly": true
                                    },
                                    "status_override": {
                                        "type": "string",
                                        "description": "If set, this will override the status value.",
                                        "maxLength": 65536
                                    }
                                },
                                "additionalProperties": false
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "A flag indicating if actions should be taken for this Component."
                            },
                            "error": {
                                "type": "string",
                                "description": "A description of the most recent error to impact the Component.",
                                "maxLength": 65536
                            },
                            "session": {
                                "type": "string",
                                "description": "Name of the Session or an empty string."
                            },
                            "retry_policy": {
                                "type": "integer",
                                "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                "example": 1,
                                "minimum": 0,
                                "maximum": 1048576
                            }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                    },
                    "filters": {
                        "oneOf": [
                            {
                                "description": "Information for patching multiple Components by listing their IDs.\n",
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "type": "string",
                                        "description": "A comma-separated list of Component IDs.",
                                        "minLength": 1,
                                        "maxLength": 65535
                                    },
                                    "session": {
                                        "type": "string",
                                        "description": "An empty string value.",
                                        "enum": [
                                            ""
                                        ],
                                        "nullable": true,
                                        "maxLength": 0
                                    }
                                },
                                "required": [
                                    "ids"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "description": "Information for patching multiple Components by Session name.\nAll Components part of this Session will be patched.\n",
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "type": "string",
                                        "description": "An empty string value.",
                                        "enum": [
                                            ""
                                        ],
                                        "nullable": true,
                                        "maxLength": 0
                                    },
                                    "session": {
                                        "type": "string",
                                        "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "example": "session-20190728032600"
                                    }
                                },
                                "required": [
                                    "session"
                                ],
                                "additionalProperties": false
                            }
                        ]
                    }
                },
                "required": [
                    "patch",
                    "filters"
                ],
                "additionalProperties": false
            },
            "V2ApplyStagedComponents": {
                "description": "A list of Components that should have their staged Session applied.\n",
                "type": "object",
                "properties": {
                    "xnames": {
                        "description": "A list of Component IDs (xnames)",
                        "type": "array",
                        "maxItems": 32768,
                        "items": {
                            "type": "string",
                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                            "minLength": 1,
                            "maxLength": 127
                        }
                    }
                },
                "additionalProperties": false
            },
            "V2ApplyStagedStatus": {
                "description": "Mapping from Component staged Session statuses to Components with that status.\n",
                "type": "object",
                "properties": {
                    "succeeded": {
                        "description": "A list of Component IDs (xnames)",
                        "type": "array",
                        "maxItems": 32768,
                        "items": {
                            "type": "string",
                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                            "minLength": 1,
                            "maxLength": 127
                        }
                    },
                    "failed": {
                        "description": "A list of Component IDs (xnames)",
                        "type": "array",
                        "maxItems": 32768,
                        "items": {
                            "type": "string",
                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                            "minLength": 1,
                            "maxLength": 127
                        }
                    },
                    "ignored": {
                        "description": "A list of Component IDs (xnames)",
                        "type": "array",
                        "maxItems": 32768,
                        "items": {
                            "type": "string",
                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                            "minLength": 1,
                            "maxLength": 127
                        }
                    }
                },
                "additionalProperties": false
            },
            "V2Options": {
                "description": "Options for the Boot Orchestration Service.\n",
                "type": "object",
                "properties": {
                    "cfs_read_timeout": {
                        "type": "integer",
                        "description": "The amount of time (in seconds) to wait for a response before timing out a request to CFS\n",
                        "example": 20,
                        "minimum": 10,
                        "maximum": 86400
                    },
                    "cleanup_completed_session_ttl": {
                        "type": "string",
                        "description": "Delete complete Sessions that are older than cleanup_completed_session_ttl (in minutes, hours, days, or weeks).\n0 disables cleanup behavior.\n",
                        "example": "3d",
                        "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                        "minLength": 1,
                        "maxLength": 8
                    },
                    "clear_stage": {
                        "type": "boolean",
                        "description": "Allows a Component's staged information to be cleared when the requested staging action has been started. Defaults to false."
                    },
                    "component_actual_state_ttl": {
                        "type": "string",
                        "description": "The maximum amount of time a Component's actual state is considered valid (in minutes, hours, days, or weeks).\n0 disables cleanup behavior for newly booted nodes and instructs bos-state-reporter to report once instead of periodically.\n",
                        "example": "6h",
                        "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                        "minLength": 1,
                        "maxLength": 8
                    },
                    "default_retry_policy": {
                        "type": "integer",
                        "description": "The default maximum number attempts per node for failed actions.",
                        "example": 1,
                        "minimum": 0,
                        "maximum": 1048576
                    },
                    "disable_components_on_completion": {
                        "type": "boolean",
                        "description": "If true, when a Session has brought a Component to its desired state, that Component will be marked as disabled in BOS.\nIf false, BOS will continue to maintain the state of the nodes declaratively, even after a Session finishes.\n"
                    },
                    "discovery_frequency": {
                        "type": "integer",
                        "description": "How frequently the BOS discovery agent syncs new Components from HSM (in seconds)",
                        "minimum": 0,
                        "maximum": 33554432
                    },
                    "ims_errors_fatal": {
                        "type": "boolean",
                        "description": "This option modifies how BOS behaves when validating the architecture of a boot image in a boot set.\nSpecifically, this option comes into play when BOS needs data from IMS in order to do this validation, but\nIMS is unreachable.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this.\n"
                    },
                    "ims_images_must_exist": {
                        "type": "boolean",
                        "description": "This option modifies how BOS behaves when validating a boot set whose boot image appears to be from IMS.\nSpecifically, this option comes into play when the image does not actually exist in IMS.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this. Note that if ims_images_must_exist is true but ims_errors_fatal is false, then\na failure to determine whether or not an image is in IMS will NOT result in a fatal error.\n"
                    },
                    "logging_level": {
                        "type": "string",
                        "description": "The logging level for all BOS services",
                        "pattern": "^([dD][eE][bB][uU][gG]|[iI][nN][fF][oO]|[wW][aA][rR][nN][iI][nN][gG]|[eE][rR][rR][oO][rR]|[cC][rR][iI][tT][iI][cC][aA][lL])$"
                    },
                    "max_boot_wait_time": {
                        "type": "integer",
                        "description": "How long BOS will wait for a node to boot into a usable state before rebooting it again (in seconds)",
                        "minimum": 0,
                        "maximum": 1048576
                    },
                    "max_component_batch_size": {
                        "type": "integer",
                        "description": "The maximum number of Components that a BOS operator will process at once. 0 means no limit.",
                        "example": 1000,
                        "minimum": 0,
                        "maximum": 131071
                    },
                    "max_power_off_wait_time": {
                        "type": "integer",
                        "description": "How long BOS will wait for a node to power off before forcefully powering off (in seconds)",
                        "minimum": 0,
                        "maximum": 1048576
                    },
                    "max_power_on_wait_time": {
                        "type": "integer",
                        "description": "How long BOS will wait for a node to power on before calling power on again (in seconds)",
                        "minimum": 0,
                        "maximum": 1048576
                    },
                    "polling_frequency": {
                        "type": "integer",
                        "description": "How frequently the BOS operators check Component state for needed actions (in seconds)",
                        "minimum": 0,
                        "maximum": 1048576
                    },
                    "reject_nids": {
                        "type": "boolean",
                        "description": "If true, then BOS will attempt to prevent Sessions and Session Templates that reference NIDs (which BOS does not support).\nSpecifically, if this option is true, then:\n- When creating a Session, if the Session limit or a Session Template node list appear to contain NID values, then Session creation will fail.\n- When creating a Session Template, if a node list appears to contain a NID value, then the Session Template creation will fail.\n- When validating an existing Session Template, if a node list appears to contain a NID value, then the validation will report an error.\n\nThis option does NOT have an effect on Sessions that were created prior to it being enabled (even if they have not yet started).\n"
                    },
                    "session_limit_required": {
                        "type": "boolean",
                        "description": "If true, Sessions cannot be created without specifying the limit parameter."
                    }
                },
                "additionalProperties": true,
                "minProperties": 1,
                "maxProperties": 1024
            }
        },
        "requestBodies": {
            "V2sessionCreateRequest": {
                "description": "The information to create a Session",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "A Session Creation object. A UUID name is generated if a name is not provided. The limit parameter is\nrequired if the session_limit_required option is true.\n",
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                    "minLength": 1,
                                    "maxLength": 127,
                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                    "example": "session-20190728032600"
                                },
                                "operation": {
                                    "type": "string",
                                    "enum": [
                                        "boot",
                                        "reboot",
                                        "shutdown"
                                    ],
                                    "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                },
                                "template_name": {
                                    "type": "string",
                                    "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                    "minLength": 1,
                                    "maxLength": 127,
                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                    "example": "cle-1.0.0"
                                },
                                "limit": {
                                    "type": "string",
                                    "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                    "maxLength": 524288,
                                    "nullable": true,
                                    "default": ""
                                },
                                "stage": {
                                    "type": "boolean",
                                    "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n",
                                    "default": false
                                },
                                "include_disabled": {
                                    "type": "boolean",
                                    "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n",
                                    "default": false
                                }
                            },
                            "required": [
                                "operation",
                                "template_name"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            },
            "V2componentUpdateRequest": {
                "description": "The state for a single Component",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "The Component's ID. (e.g. xname for hardware Components)",
                                    "minLength": 1,
                                    "maxLength": 127
                                },
                                "actual_state": {
                                    "description": "The actual boot artifacts and configuration for a Component\n",
                                    "type": "object",
                                    "properties": {
                                        "boot_artifacts": {
                                            "description": "A collection of boot artifacts.\n",
                                            "type": "object",
                                            "properties": {
                                                "kernel": {
                                                    "type": "string",
                                                    "description": "A path to the kernel to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                    "maxLength": 4095
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "initrd": {
                                                    "type": "string",
                                                    "description": "A path to the initrd to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                    "maxLength": 4095
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "bss_token": {
                                            "type": "string",
                                            "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                            "maxLength": 65535
                                        },
                                        "last_updated": {
                                            "type": "string",
                                            "description": "The date/time when the state was last updated in RFC 3339 format.",
                                            "example": "2019-07-28T03:26:00Z",
                                            "format": "date-time",
                                            "readOnly": true
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "desired_state": {
                                    "description": "The desired boot artifacts and configuration for a Component\n",
                                    "type": "object",
                                    "properties": {
                                        "boot_artifacts": {
                                            "description": "A collection of boot artifacts.\n",
                                            "type": "object",
                                            "properties": {
                                                "kernel": {
                                                    "type": "string",
                                                    "description": "A path to the kernel to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                    "maxLength": 4095
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "initrd": {
                                                    "type": "string",
                                                    "description": "A path to the initrd to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                    "maxLength": 4095
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "configuration": {
                                            "type": "string",
                                            "description": "The name of configuration to be applied.",
                                            "example": "compute-23.4.0",
                                            "maxLength": 127
                                        },
                                        "bss_token": {
                                            "type": "string",
                                            "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                            "maxLength": 65535
                                        },
                                        "last_updated": {
                                            "type": "string",
                                            "description": "The date/time when the state was last updated in RFC 3339 format.",
                                            "example": "2019-07-28T03:26:00Z",
                                            "format": "date-time",
                                            "readOnly": true
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "staged_state": {
                                    "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                    "type": "object",
                                    "properties": {
                                        "boot_artifacts": {
                                            "description": "A collection of boot artifacts.\n",
                                            "type": "object",
                                            "properties": {
                                                "kernel": {
                                                    "type": "string",
                                                    "description": "A path to the kernel to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                    "maxLength": 4095
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "initrd": {
                                                    "type": "string",
                                                    "description": "A path to the initrd to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                    "maxLength": 4095
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "configuration": {
                                            "type": "string",
                                            "description": "The name of configuration to be applied.",
                                            "example": "compute-23.4.0",
                                            "maxLength": 127
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Name of the Session or an empty string."
                                        },
                                        "last_updated": {
                                            "type": "string",
                                            "description": "The date/time when the state was last updated in RFC 3339 format.",
                                            "example": "2019-07-28T03:26:00Z",
                                            "format": "date-time",
                                            "readOnly": true
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "last_action": {
                                    "description": "Information on the most recent action taken against the node.\n",
                                    "type": "object",
                                    "properties": {
                                        "last_updated": {
                                            "type": "string",
                                            "description": "The date/time when the state was last updated in RFC 3339 format.",
                                            "example": "2019-07-28T03:26:00Z",
                                            "format": "date-time",
                                            "readOnly": true
                                        },
                                        "action": {
                                            "type": "string",
                                            "description": "A description of the most recent operator/action to impact the Component.",
                                            "maxLength": 1024
                                        },
                                        "failed": {
                                            "type": "boolean",
                                            "description": "Denotes if the last action failed to accomplish its task"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "event_stats": {
                                    "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                    "type": "object",
                                    "properties": {
                                        "power_on_attempts": {
                                            "type": "integer",
                                            "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "power_off_graceful_attempts": {
                                            "type": "integer",
                                            "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "power_off_forceful_attempts": {
                                            "type": "integer",
                                            "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "status": {
                                    "description": "Status information for the Component",
                                    "type": "object",
                                    "properties": {
                                        "phase": {
                                            "type": "string",
                                            "description": "The current phase of the Component in the boot process.",
                                            "maxLength": 128
                                        },
                                        "status": {
                                            "type": "string",
                                            "description": "The current status of the Component.  More detailed than phase.",
                                            "readOnly": true
                                        },
                                        "status_override": {
                                            "type": "string",
                                            "description": "If set, this will override the status value.",
                                            "maxLength": 65536
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "enabled": {
                                    "type": "boolean",
                                    "description": "A flag indicating if actions should be taken for this Component."
                                },
                                "error": {
                                    "type": "string",
                                    "description": "A description of the most recent error to impact the Component.",
                                    "maxLength": 65536
                                },
                                "session": {
                                    "type": "string",
                                    "description": "Name of the Session or an empty string."
                                },
                                "retry_policy": {
                                    "type": "integer",
                                    "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                    "example": 1,
                                    "minimum": 0,
                                    "maximum": 1048576
                                }
                            },
                            "additionalProperties": false,
                            "minProperties": 1
                        }
                    }
                }
            },
            "V2componentsPutRequest": {
                "description": "The state for an array of Components",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An array of Component states with associated Ids.",
                            "type": "array",
                            "items": {
                                "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                                        "minLength": 1,
                                        "maxLength": 127
                                    },
                                    "actual_state": {
                                        "description": "The actual boot artifacts and configuration for a Component\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "bss_token": {
                                                "type": "string",
                                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                "maxLength": 65535
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "desired_state": {
                                        "description": "The desired boot artifacts and configuration for a Component\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            },
                                            "bss_token": {
                                                "type": "string",
                                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                "maxLength": 65535
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "staged_state": {
                                        "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            },
                                            "session": {
                                                "type": "string",
                                                "description": "Name of the Session or an empty string."
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "last_action": {
                                        "description": "Information on the most recent action taken against the node.\n",
                                        "type": "object",
                                        "properties": {
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "A description of the most recent operator/action to impact the Component.",
                                                "maxLength": 1024
                                            },
                                            "failed": {
                                                "type": "boolean",
                                                "description": "Denotes if the last action failed to accomplish its task"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "event_stats": {
                                        "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                        "type": "object",
                                        "properties": {
                                            "power_on_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            },
                                            "power_off_graceful_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            },
                                            "power_off_forceful_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "status": {
                                        "description": "Status information for the Component",
                                        "type": "object",
                                        "properties": {
                                            "phase": {
                                                "type": "string",
                                                "description": "The current phase of the Component in the boot process.",
                                                "maxLength": 128
                                            },
                                            "status": {
                                                "type": "string",
                                                "description": "The current status of the Component.  More detailed than phase.",
                                                "readOnly": true
                                            },
                                            "status_override": {
                                                "type": "string",
                                                "description": "If set, this will override the status value.",
                                                "maxLength": 65536
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "A flag indicating if actions should be taken for this Component."
                                    },
                                    "error": {
                                        "type": "string",
                                        "description": "A description of the most recent error to impact the Component.",
                                        "maxLength": 65536
                                    },
                                    "session": {
                                        "type": "string",
                                        "description": "Name of the Session or an empty string."
                                    },
                                    "retry_policy": {
                                        "type": "integer",
                                        "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                        "example": 1,
                                        "minimum": 0,
                                        "maximum": 1048576
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                }
            },
            "V2componentsUpdateRequest": {
                "description": "The state for an array of Components",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "V2optionsUpdateRequest": {
                "description": "Service-wide options",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Options for the Boot Orchestration Service.\n",
                            "type": "object",
                            "properties": {
                                "cfs_read_timeout": {
                                    "type": "integer",
                                    "description": "The amount of time (in seconds) to wait for a response before timing out a request to CFS\n",
                                    "example": 20,
                                    "minimum": 10,
                                    "maximum": 86400
                                },
                                "cleanup_completed_session_ttl": {
                                    "type": "string",
                                    "description": "Delete complete Sessions that are older than cleanup_completed_session_ttl (in minutes, hours, days, or weeks).\n0 disables cleanup behavior.\n",
                                    "example": "3d",
                                    "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                    "minLength": 1,
                                    "maxLength": 8
                                },
                                "clear_stage": {
                                    "type": "boolean",
                                    "description": "Allows a Component's staged information to be cleared when the requested staging action has been started. Defaults to false."
                                },
                                "component_actual_state_ttl": {
                                    "type": "string",
                                    "description": "The maximum amount of time a Component's actual state is considered valid (in minutes, hours, days, or weeks).\n0 disables cleanup behavior for newly booted nodes and instructs bos-state-reporter to report once instead of periodically.\n",
                                    "example": "6h",
                                    "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                    "minLength": 1,
                                    "maxLength": 8
                                },
                                "default_retry_policy": {
                                    "type": "integer",
                                    "description": "The default maximum number attempts per node for failed actions.",
                                    "example": 1,
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "disable_components_on_completion": {
                                    "type": "boolean",
                                    "description": "If true, when a Session has brought a Component to its desired state, that Component will be marked as disabled in BOS.\nIf false, BOS will continue to maintain the state of the nodes declaratively, even after a Session finishes.\n"
                                },
                                "discovery_frequency": {
                                    "type": "integer",
                                    "description": "How frequently the BOS discovery agent syncs new Components from HSM (in seconds)",
                                    "minimum": 0,
                                    "maximum": 33554432
                                },
                                "ims_errors_fatal": {
                                    "type": "boolean",
                                    "description": "This option modifies how BOS behaves when validating the architecture of a boot image in a boot set.\nSpecifically, this option comes into play when BOS needs data from IMS in order to do this validation, but\nIMS is unreachable.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this.\n"
                                },
                                "ims_images_must_exist": {
                                    "type": "boolean",
                                    "description": "This option modifies how BOS behaves when validating a boot set whose boot image appears to be from IMS.\nSpecifically, this option comes into play when the image does not actually exist in IMS.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this. Note that if ims_images_must_exist is true but ims_errors_fatal is false, then\na failure to determine whether or not an image is in IMS will NOT result in a fatal error.\n"
                                },
                                "logging_level": {
                                    "type": "string",
                                    "description": "The logging level for all BOS services",
                                    "pattern": "^([dD][eE][bB][uU][gG]|[iI][nN][fF][oO]|[wW][aA][rR][nN][iI][nN][gG]|[eE][rR][rR][oO][rR]|[cC][rR][iI][tT][iI][cC][aA][lL])$"
                                },
                                "max_boot_wait_time": {
                                    "type": "integer",
                                    "description": "How long BOS will wait for a node to boot into a usable state before rebooting it again (in seconds)",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "max_component_batch_size": {
                                    "type": "integer",
                                    "description": "The maximum number of Components that a BOS operator will process at once. 0 means no limit.",
                                    "example": 1000,
                                    "minimum": 0,
                                    "maximum": 131071
                                },
                                "max_power_off_wait_time": {
                                    "type": "integer",
                                    "description": "How long BOS will wait for a node to power off before forcefully powering off (in seconds)",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "max_power_on_wait_time": {
                                    "type": "integer",
                                    "description": "How long BOS will wait for a node to power on before calling power on again (in seconds)",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "polling_frequency": {
                                    "type": "integer",
                                    "description": "How frequently the BOS operators check Component state for needed actions (in seconds)",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "reject_nids": {
                                    "type": "boolean",
                                    "description": "If true, then BOS will attempt to prevent Sessions and Session Templates that reference NIDs (which BOS does not support).\nSpecifically, if this option is true, then:\n- When creating a Session, if the Session limit or a Session Template node list appear to contain NID values, then Session creation will fail.\n- When creating a Session Template, if a node list appears to contain a NID value, then the Session Template creation will fail.\n- When validating an existing Session Template, if a node list appears to contain a NID value, then the validation will report an error.\n\nThis option does NOT have an effect on Sessions that were created prior to it being enabled (even if they have not yet started).\n"
                                },
                                "session_limit_required": {
                                    "type": "boolean",
                                    "description": "If true, Sessions cannot be created without specifying the limit parameter."
                                }
                            },
                            "additionalProperties": true,
                            "minProperties": 1,
                            "maxProperties": 1024
                        }
                    }
                }
            },
            "V2sessionUpdateRequest": {
                "description": "The state for a single Session",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "A Session update object\n\n## Link Relationships\n\n* self : The Session object\n",
                            "type": "object",
                            "properties": {
                                "components": {
                                    "type": "string",
                                    "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                    "maxLength": 524288
                                },
                                "status": {
                                    "type": "object",
                                    "description": "Information on the status of a Session.\n",
                                    "properties": {
                                        "start_time": {
                                            "type": "string",
                                            "description": "When the Session was created.",
                                            "maxLength": 127
                                        },
                                        "end_time": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "When the Session was completed. A null value means the Session has not ended.",
                                            "maxLength": 127
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "pending",
                                                "running",
                                                "complete"
                                            ],
                                            "description": "The status of a Session."
                                        },
                                        "error": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                            "maxLength": 65536
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "V2applyStagedRequest": {
                "description": "A list of xnames that should have their staged Session applied.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "A list of Components that should have their staged Session applied.\n",
                            "type": "object",
                            "properties": {
                                "xnames": {
                                    "description": "A list of Component IDs (xnames)",
                                    "type": "array",
                                    "maxItems": 32768,
                                    "items": {
                                        "type": "string",
                                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                                        "minLength": 1,
                                        "maxLength": 127
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            }
        },
        "responses": {
            "ResourceDeleted": {
                "description": "The resource was deleted."
            },
            "ServiceHealth": {
                "description": "Service Health information",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Service health status",
                            "type": "object",
                            "properties": {
                                "dbStatus": {
                                    "type": "string"
                                },
                                "apiStatus": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "Version": {
                "description": "Get version details\nThe versioning system uses [semver](https://semver.org/).\n## Link Relationships\n* self : Link to itself\n* versions : Link back to the versions resource\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Version data",
                            "type": "object",
                            "properties": {
                                "major": {
                                    "type": "string",
                                    "pattern": "^(0|[1-9][0-9]*)$"
                                },
                                "minor": {
                                    "type": "string",
                                    "pattern": "^(0|[1-9][0-9]*)$"
                                },
                                "patch": {
                                    "type": "string",
                                    "pattern": "^(0|[1-9][0-9]*)$"
                                },
                                "links": {
                                    "description": "List of links to other resources",
                                    "type": "array",
                                    "items": {
                                        "description": "Link to other resources",
                                        "type": "object",
                                        "properties": {
                                            "href": {
                                                "type": "string"
                                            },
                                            "rel": {
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "V2SessionTemplateDetails": {
                "description": "Session Template details",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 127,
                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                    "readOnly": true,
                                    "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                    "example": "cle-1.0.0"
                                },
                                "tenant": {
                                    "type": "string",
                                    "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                    "nullable": true,
                                    "readOnly": true,
                                    "maxLength": 127
                                },
                                "description": {
                                    "type": "string",
                                    "description": "An optional description for the Session Template.",
                                    "minLength": 1,
                                    "maxLength": 1023
                                },
                                "enable_cfs": {
                                    "type": "boolean",
                                    "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                    "default": true
                                },
                                "cfs": {
                                    "type": "object",
                                    "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                    "properties": {
                                        "configuration": {
                                            "type": "string",
                                            "description": "The name of configuration to be applied.",
                                            "example": "compute-23.4.0",
                                            "maxLength": 127
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "boot_sets": {
                                    "type": "object",
                                    "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                    "minProperties": 1,
                                    "maxProperties": 127,
                                    "additionalProperties": {
                                        "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                "example": "compute",
                                                "minLength": 1,
                                                "maxLength": 127,
                                                "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                "writeOnly": true
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                "minLength": 1,
                                                "maxLength": 4095
                                            },
                                            "cfs": {
                                                "type": "object",
                                                "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                "properties": {
                                                    "configuration": {
                                                        "type": "string",
                                                        "description": "The name of configuration to be applied.",
                                                        "example": "compute-23.4.0",
                                                        "maxLength": 127
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                "example": "s3",
                                                "minLength": 1,
                                                "maxLength": 127
                                            },
                                            "etag": {
                                                "type": "string",
                                                "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                "maxLength": 65536
                                            },
                                            "kernel_parameters": {
                                                "type": "string",
                                                "description": "The kernel parameters to use to boot the nodes.",
                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                "maxLength": 4096
                                            },
                                            "node_list": {
                                                "type": "array",
                                                "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                "minItems": 1,
                                                "maxItems": 65535,
                                                "example": [
                                                    "x3000c0s19b1n0",
                                                    "x3000c0s19b2n0"
                                                ],
                                                "items": {
                                                    "type": "string",
                                                    "description": "Hardware component name (xname).",
                                                    "example": "x3001c0s39b0n0",
                                                    "minLength": 1,
                                                    "maxLength": 127
                                                }
                                            },
                                            "node_roles_groups": {
                                                "type": "array",
                                                "description": "Node role list. Allows actions against nodes with associated roles.",
                                                "minItems": 1,
                                                "maxItems": 1023,
                                                "example": [
                                                    "Compute",
                                                    "Application"
                                                ],
                                                "items": {
                                                    "type": "string",
                                                    "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                    "example": "Compute",
                                                    "minLength": 1,
                                                    "maxLength": 127
                                                }
                                            },
                                            "node_groups": {
                                                "type": "array",
                                                "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                "minItems": 1,
                                                "maxItems": 4095,
                                                "items": {
                                                    "type": "string",
                                                    "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                    "minLength": 1,
                                                    "maxLength": 127
                                                }
                                            },
                                            "arch": {
                                                "type": "string",
                                                "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                "default": "X86",
                                                "enum": [
                                                    "X86",
                                                    "ARM",
                                                    "Other",
                                                    "Unknown"
                                                ]
                                            },
                                            "rootfs_provider": {
                                                "type": "string",
                                                "description": "The root file system provider.",
                                                "example": "cpss3",
                                                "minLength": 1,
                                                "maxLength": 511
                                            },
                                            "rootfs_provider_passthrough": {
                                                "type": "string",
                                                "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                "maxLength": 4096
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "path",
                                            "type"
                                        ]
                                    }
                                },
                                "links": {
                                    "description": "List of links to other resources",
                                    "type": "array",
                                    "readOnly": true,
                                    "items": {
                                        "description": "Link to other resources",
                                        "type": "object",
                                        "properties": {
                                            "href": {
                                                "type": "string"
                                            },
                                            "rel": {
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "boot_sets"
                            ]
                        }
                    }
                }
            },
            "V2SessionTemplateDetailsArray": {
                "description": "Session Template details array",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An array of Session Templates.",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "readOnly": true,
                                        "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                        "example": "cle-1.0.0"
                                    },
                                    "tenant": {
                                        "type": "string",
                                        "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                        "nullable": true,
                                        "readOnly": true,
                                        "maxLength": 127
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "An optional description for the Session Template.",
                                        "minLength": 1,
                                        "maxLength": 1023
                                    },
                                    "enable_cfs": {
                                        "type": "boolean",
                                        "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                        "default": true
                                    },
                                    "cfs": {
                                        "type": "object",
                                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                        "properties": {
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boot_sets": {
                                        "type": "object",
                                        "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                        "minProperties": 1,
                                        "maxProperties": 127,
                                        "additionalProperties": {
                                            "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                    "example": "compute",
                                                    "minLength": 1,
                                                    "maxLength": 127,
                                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                    "writeOnly": true
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                    "minLength": 1,
                                                    "maxLength": 4095
                                                },
                                                "cfs": {
                                                    "type": "object",
                                                    "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                    "properties": {
                                                        "configuration": {
                                                            "type": "string",
                                                            "description": "The name of configuration to be applied.",
                                                            "example": "compute-23.4.0",
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                    "example": "s3",
                                                    "minLength": 1,
                                                    "maxLength": 127
                                                },
                                                "etag": {
                                                    "type": "string",
                                                    "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                    "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                    "maxLength": 65536
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "node_list": {
                                                    "type": "array",
                                                    "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                    "minItems": 1,
                                                    "maxItems": 65535,
                                                    "example": [
                                                        "x3000c0s19b1n0",
                                                        "x3000c0s19b2n0"
                                                    ],
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Hardware component name (xname).",
                                                        "example": "x3001c0s39b0n0",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "node_roles_groups": {
                                                    "type": "array",
                                                    "description": "Node role list. Allows actions against nodes with associated roles.",
                                                    "minItems": 1,
                                                    "maxItems": 1023,
                                                    "example": [
                                                        "Compute",
                                                        "Application"
                                                    ],
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                        "example": "Compute",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "node_groups": {
                                                    "type": "array",
                                                    "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                    "minItems": 1,
                                                    "maxItems": 4095,
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "arch": {
                                                    "type": "string",
                                                    "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                    "default": "X86",
                                                    "enum": [
                                                        "X86",
                                                        "ARM",
                                                        "Other",
                                                        "Unknown"
                                                    ]
                                                },
                                                "rootfs_provider": {
                                                    "type": "string",
                                                    "description": "The root file system provider.",
                                                    "example": "cpss3",
                                                    "minLength": 1,
                                                    "maxLength": 511
                                                },
                                                "rootfs_provider_passthrough": {
                                                    "type": "string",
                                                    "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                    "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                    "maxLength": 4096
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "path",
                                                "type"
                                            ]
                                        }
                                    },
                                    "links": {
                                        "description": "List of links to other resources",
                                        "type": "array",
                                        "readOnly": true,
                                        "items": {
                                            "description": "Link to other resources",
                                            "type": "object",
                                            "properties": {
                                                "href": {
                                                    "type": "string"
                                                },
                                                "rel": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "boot_sets"
                                ]
                            }
                        }
                    }
                }
            },
            "V2SessionTemplateValidation": {
                "description": "Session Template validity details",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Message describing errors or incompleteness in a Session Template.\n",
                            "type": "string"
                        }
                    }
                }
            },
            "V2SessionDetails": {
                "description": "Session details",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                    "minLength": 1,
                                    "maxLength": 127,
                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                    "example": "session-20190728032600"
                                },
                                "tenant": {
                                    "type": "string",
                                    "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                    "nullable": true,
                                    "readOnly": true,
                                    "maxLength": 127
                                },
                                "operation": {
                                    "type": "string",
                                    "enum": [
                                        "boot",
                                        "reboot",
                                        "shutdown"
                                    ],
                                    "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                },
                                "template_name": {
                                    "type": "string",
                                    "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                    "minLength": 1,
                                    "maxLength": 127,
                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                    "example": "cle-1.0.0"
                                },
                                "limit": {
                                    "type": "string",
                                    "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                    "maxLength": 524288,
                                    "nullable": true,
                                    "default": ""
                                },
                                "stage": {
                                    "type": "boolean",
                                    "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                                },
                                "components": {
                                    "type": "string",
                                    "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                    "maxLength": 524288
                                },
                                "include_disabled": {
                                    "type": "boolean",
                                    "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                                },
                                "status": {
                                    "type": "object",
                                    "description": "Information on the status of a Session.\n",
                                    "properties": {
                                        "start_time": {
                                            "type": "string",
                                            "description": "When the Session was created.",
                                            "maxLength": 127
                                        },
                                        "end_time": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "When the Session was completed. A null value means the Session has not ended.",
                                            "maxLength": 127
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "pending",
                                                "running",
                                                "complete"
                                            ],
                                            "description": "The status of a Session."
                                        },
                                        "error": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                            "maxLength": 65536
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "name",
                                "operation",
                                "template_name"
                            ]
                        }
                    }
                }
            },
            "V2SessionDetailsArray": {
                "description": "Session details array",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An array of Sessions.",
                            "type": "array",
                            "items": {
                                "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "example": "session-20190728032600"
                                    },
                                    "tenant": {
                                        "type": "string",
                                        "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                        "nullable": true,
                                        "readOnly": true,
                                        "maxLength": 127
                                    },
                                    "operation": {
                                        "type": "string",
                                        "enum": [
                                            "boot",
                                            "reboot",
                                            "shutdown"
                                        ],
                                        "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                    },
                                    "template_name": {
                                        "type": "string",
                                        "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "example": "cle-1.0.0"
                                    },
                                    "limit": {
                                        "type": "string",
                                        "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                        "maxLength": 524288,
                                        "nullable": true,
                                        "default": ""
                                    },
                                    "stage": {
                                        "type": "boolean",
                                        "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                                    },
                                    "components": {
                                        "type": "string",
                                        "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                        "maxLength": 524288
                                    },
                                    "include_disabled": {
                                        "type": "boolean",
                                        "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                                    },
                                    "status": {
                                        "type": "object",
                                        "description": "Information on the status of a Session.\n",
                                        "properties": {
                                            "start_time": {
                                                "type": "string",
                                                "description": "When the Session was created.",
                                                "maxLength": 127
                                            },
                                            "end_time": {
                                                "type": "string",
                                                "nullable": true,
                                                "description": "When the Session was completed. A null value means the Session has not ended.",
                                                "maxLength": 127
                                            },
                                            "status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "running",
                                                    "complete"
                                                ],
                                                "description": "The status of a Session."
                                            },
                                            "error": {
                                                "type": "string",
                                                "nullable": true,
                                                "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                                "maxLength": 65536
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "name",
                                    "operation",
                                    "template_name"
                                ]
                            }
                        }
                    }
                }
            },
            "V2SessionExtendedStatus": {
                "description": "Session status details",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "description": "Detailed information on the status of a Session.\n",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "enum": [
                                        "pending",
                                        "running",
                                        "complete"
                                    ],
                                    "description": "The status of a Session."
                                },
                                "managed_components_count": {
                                    "type": "integer",
                                    "description": "The count of Components currently managed by this Session\n"
                                },
                                "phases": {
                                    "type": "object",
                                    "description": "Detailed information on the phases of a Session.\n",
                                    "properties": {
                                        "percent_complete": {
                                            "type": "number",
                                            "description": "The percent of Components currently in a completed/stable state\n"
                                        },
                                        "percent_powering_on": {
                                            "type": "number",
                                            "description": "The percent of Components currently in the powering-on phase\n"
                                        },
                                        "percent_powering_off": {
                                            "type": "number",
                                            "description": "The percent of Components currently in the powering-off phase\n"
                                        },
                                        "percent_configuring": {
                                            "type": "number",
                                            "description": "The percent of Components currently in the configuring phase\n"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "percent_successful": {
                                    "type": "number",
                                    "description": "The percent of Components currently in a successful state\n"
                                },
                                "percent_failed": {
                                    "type": "number",
                                    "description": "The percent of Components currently in a failed state\n"
                                },
                                "percent_staged": {
                                    "type": "number",
                                    "description": "The percent of Components currently still staged for this Session\n"
                                },
                                "error_summary": {
                                    "type": "object",
                                    "description": "A summary of the errors currently listed by all Components\n"
                                },
                                "timing": {
                                    "type": "object",
                                    "description": "Detailed information on the timing of a Session.\n",
                                    "properties": {
                                        "start_time": {
                                            "type": "string",
                                            "description": "When the Session was created.",
                                            "maxLength": 127
                                        },
                                        "end_time": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "When the Session was completed. A null value means the Session has not ended.",
                                            "maxLength": 127
                                        },
                                        "duration": {
                                            "type": "string",
                                            "description": "The current duration of the ongoing Session or final duration of the completed Session.\n"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "V2componentDetails": {
                "description": "A single Component state",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "The Component's ID. (e.g. xname for hardware Components)",
                                    "minLength": 1,
                                    "maxLength": 127
                                },
                                "actual_state": {
                                    "description": "The actual boot artifacts and configuration for a Component\n",
                                    "type": "object",
                                    "properties": {
                                        "boot_artifacts": {
                                            "description": "A collection of boot artifacts.\n",
                                            "type": "object",
                                            "properties": {
                                                "kernel": {
                                                    "type": "string",
                                                    "description": "A path to the kernel to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                    "maxLength": 4095
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "initrd": {
                                                    "type": "string",
                                                    "description": "A path to the initrd to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                    "maxLength": 4095
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "bss_token": {
                                            "type": "string",
                                            "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                            "maxLength": 65535
                                        },
                                        "last_updated": {
                                            "type": "string",
                                            "description": "The date/time when the state was last updated in RFC 3339 format.",
                                            "example": "2019-07-28T03:26:00Z",
                                            "format": "date-time",
                                            "readOnly": true
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "desired_state": {
                                    "description": "The desired boot artifacts and configuration for a Component\n",
                                    "type": "object",
                                    "properties": {
                                        "boot_artifacts": {
                                            "description": "A collection of boot artifacts.\n",
                                            "type": "object",
                                            "properties": {
                                                "kernel": {
                                                    "type": "string",
                                                    "description": "A path to the kernel to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                    "maxLength": 4095
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "initrd": {
                                                    "type": "string",
                                                    "description": "A path to the initrd to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                    "maxLength": 4095
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "configuration": {
                                            "type": "string",
                                            "description": "The name of configuration to be applied.",
                                            "example": "compute-23.4.0",
                                            "maxLength": 127
                                        },
                                        "bss_token": {
                                            "type": "string",
                                            "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                            "maxLength": 65535
                                        },
                                        "last_updated": {
                                            "type": "string",
                                            "description": "The date/time when the state was last updated in RFC 3339 format.",
                                            "example": "2019-07-28T03:26:00Z",
                                            "format": "date-time",
                                            "readOnly": true
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "staged_state": {
                                    "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                    "type": "object",
                                    "properties": {
                                        "boot_artifacts": {
                                            "description": "A collection of boot artifacts.\n",
                                            "type": "object",
                                            "properties": {
                                                "kernel": {
                                                    "type": "string",
                                                    "description": "A path to the kernel to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                    "maxLength": 4095
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "initrd": {
                                                    "type": "string",
                                                    "description": "A path to the initrd to use for booting.",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                    "maxLength": 4095
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "configuration": {
                                            "type": "string",
                                            "description": "The name of configuration to be applied.",
                                            "example": "compute-23.4.0",
                                            "maxLength": 127
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Name of the Session or an empty string."
                                        },
                                        "last_updated": {
                                            "type": "string",
                                            "description": "The date/time when the state was last updated in RFC 3339 format.",
                                            "example": "2019-07-28T03:26:00Z",
                                            "format": "date-time",
                                            "readOnly": true
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "last_action": {
                                    "description": "Information on the most recent action taken against the node.\n",
                                    "type": "object",
                                    "properties": {
                                        "last_updated": {
                                            "type": "string",
                                            "description": "The date/time when the state was last updated in RFC 3339 format.",
                                            "example": "2019-07-28T03:26:00Z",
                                            "format": "date-time",
                                            "readOnly": true
                                        },
                                        "action": {
                                            "type": "string",
                                            "description": "A description of the most recent operator/action to impact the Component.",
                                            "maxLength": 1024
                                        },
                                        "failed": {
                                            "type": "boolean",
                                            "description": "Denotes if the last action failed to accomplish its task"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "event_stats": {
                                    "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                    "type": "object",
                                    "properties": {
                                        "power_on_attempts": {
                                            "type": "integer",
                                            "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "power_off_graceful_attempts": {
                                            "type": "integer",
                                            "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "power_off_forceful_attempts": {
                                            "type": "integer",
                                            "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "status": {
                                    "description": "Status information for the Component",
                                    "type": "object",
                                    "properties": {
                                        "phase": {
                                            "type": "string",
                                            "description": "The current phase of the Component in the boot process.",
                                            "maxLength": 128
                                        },
                                        "status": {
                                            "type": "string",
                                            "description": "The current status of the Component.  More detailed than phase.",
                                            "readOnly": true
                                        },
                                        "status_override": {
                                            "type": "string",
                                            "description": "If set, this will override the status value.",
                                            "maxLength": 65536
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "enabled": {
                                    "type": "boolean",
                                    "description": "A flag indicating if actions should be taken for this Component."
                                },
                                "error": {
                                    "type": "string",
                                    "description": "A description of the most recent error to impact the Component.",
                                    "maxLength": 65536
                                },
                                "session": {
                                    "type": "string",
                                    "description": "Name of the Session or an empty string."
                                },
                                "retry_policy": {
                                    "type": "integer",
                                    "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                    "example": 1,
                                    "minimum": 0,
                                    "maximum": 1048576
                                }
                            },
                            "additionalProperties": false,
                            "minProperties": 1
                        }
                    }
                }
            },
            "V2componentDetailsArray": {
                "description": "A collection of Component states",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An array of Component states.",
                            "type": "array",
                            "items": {
                                "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                                        "minLength": 1,
                                        "maxLength": 127
                                    },
                                    "actual_state": {
                                        "description": "The actual boot artifacts and configuration for a Component\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "bss_token": {
                                                "type": "string",
                                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                "maxLength": 65535
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "desired_state": {
                                        "description": "The desired boot artifacts and configuration for a Component\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            },
                                            "bss_token": {
                                                "type": "string",
                                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                "maxLength": 65535
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "staged_state": {
                                        "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            },
                                            "session": {
                                                "type": "string",
                                                "description": "Name of the Session or an empty string."
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "last_action": {
                                        "description": "Information on the most recent action taken against the node.\n",
                                        "type": "object",
                                        "properties": {
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "A description of the most recent operator/action to impact the Component.",
                                                "maxLength": 1024
                                            },
                                            "failed": {
                                                "type": "boolean",
                                                "description": "Denotes if the last action failed to accomplish its task"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "event_stats": {
                                        "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                        "type": "object",
                                        "properties": {
                                            "power_on_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            },
                                            "power_off_graceful_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            },
                                            "power_off_forceful_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "status": {
                                        "description": "Status information for the Component",
                                        "type": "object",
                                        "properties": {
                                            "phase": {
                                                "type": "string",
                                                "description": "The current phase of the Component in the boot process.",
                                                "maxLength": 128
                                            },
                                            "status": {
                                                "type": "string",
                                                "description": "The current status of the Component.  More detailed than phase.",
                                                "readOnly": true
                                            },
                                            "status_override": {
                                                "type": "string",
                                                "description": "If set, this will override the status value.",
                                                "maxLength": 65536
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "A flag indicating if actions should be taken for this Component."
                                    },
                                    "error": {
                                        "type": "string",
                                        "description": "A description of the most recent error to impact the Component.",
                                        "maxLength": 65536
                                    },
                                    "session": {
                                        "type": "string",
                                        "description": "Name of the Session or an empty string."
                                    },
                                    "retry_policy": {
                                        "type": "integer",
                                        "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                        "example": 1,
                                        "minimum": 0,
                                        "maximum": 1048576
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        }
                    }
                }
            },
            "V2applyStagedResponse": {
                "description": "A list of xnames that should have their staged Session applied.",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Mapping from Component staged Session statuses to Components with that status.\n",
                            "type": "object",
                            "properties": {
                                "succeeded": {
                                    "description": "A list of Component IDs (xnames)",
                                    "type": "array",
                                    "maxItems": 32768,
                                    "items": {
                                        "type": "string",
                                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                                        "minLength": 1,
                                        "maxLength": 127
                                    }
                                },
                                "failed": {
                                    "description": "A list of Component IDs (xnames)",
                                    "type": "array",
                                    "maxItems": 32768,
                                    "items": {
                                        "type": "string",
                                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                                        "minLength": 1,
                                        "maxLength": 127
                                    }
                                },
                                "ignored": {
                                    "description": "A list of Component IDs (xnames)",
                                    "type": "array",
                                    "maxItems": 32768,
                                    "items": {
                                        "type": "string",
                                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                                        "minLength": 1,
                                        "maxLength": 127
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "V2options": {
                "description": "A collection of service-wide options",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Options for the Boot Orchestration Service.\n",
                            "type": "object",
                            "properties": {
                                "cfs_read_timeout": {
                                    "type": "integer",
                                    "description": "The amount of time (in seconds) to wait for a response before timing out a request to CFS\n",
                                    "example": 20,
                                    "minimum": 10,
                                    "maximum": 86400
                                },
                                "cleanup_completed_session_ttl": {
                                    "type": "string",
                                    "description": "Delete complete Sessions that are older than cleanup_completed_session_ttl (in minutes, hours, days, or weeks).\n0 disables cleanup behavior.\n",
                                    "example": "3d",
                                    "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                    "minLength": 1,
                                    "maxLength": 8
                                },
                                "clear_stage": {
                                    "type": "boolean",
                                    "description": "Allows a Component's staged information to be cleared when the requested staging action has been started. Defaults to false."
                                },
                                "component_actual_state_ttl": {
                                    "type": "string",
                                    "description": "The maximum amount of time a Component's actual state is considered valid (in minutes, hours, days, or weeks).\n0 disables cleanup behavior for newly booted nodes and instructs bos-state-reporter to report once instead of periodically.\n",
                                    "example": "6h",
                                    "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                    "minLength": 1,
                                    "maxLength": 8
                                },
                                "default_retry_policy": {
                                    "type": "integer",
                                    "description": "The default maximum number attempts per node for failed actions.",
                                    "example": 1,
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "disable_components_on_completion": {
                                    "type": "boolean",
                                    "description": "If true, when a Session has brought a Component to its desired state, that Component will be marked as disabled in BOS.\nIf false, BOS will continue to maintain the state of the nodes declaratively, even after a Session finishes.\n"
                                },
                                "discovery_frequency": {
                                    "type": "integer",
                                    "description": "How frequently the BOS discovery agent syncs new Components from HSM (in seconds)",
                                    "minimum": 0,
                                    "maximum": 33554432
                                },
                                "ims_errors_fatal": {
                                    "type": "boolean",
                                    "description": "This option modifies how BOS behaves when validating the architecture of a boot image in a boot set.\nSpecifically, this option comes into play when BOS needs data from IMS in order to do this validation, but\nIMS is unreachable.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this.\n"
                                },
                                "ims_images_must_exist": {
                                    "type": "boolean",
                                    "description": "This option modifies how BOS behaves when validating a boot set whose boot image appears to be from IMS.\nSpecifically, this option comes into play when the image does not actually exist in IMS.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this. Note that if ims_images_must_exist is true but ims_errors_fatal is false, then\na failure to determine whether or not an image is in IMS will NOT result in a fatal error.\n"
                                },
                                "logging_level": {
                                    "type": "string",
                                    "description": "The logging level for all BOS services",
                                    "pattern": "^([dD][eE][bB][uU][gG]|[iI][nN][fF][oO]|[wW][aA][rR][nN][iI][nN][gG]|[eE][rR][rR][oO][rR]|[cC][rR][iI][tT][iI][cC][aA][lL])$"
                                },
                                "max_boot_wait_time": {
                                    "type": "integer",
                                    "description": "How long BOS will wait for a node to boot into a usable state before rebooting it again (in seconds)",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "max_component_batch_size": {
                                    "type": "integer",
                                    "description": "The maximum number of Components that a BOS operator will process at once. 0 means no limit.",
                                    "example": 1000,
                                    "minimum": 0,
                                    "maximum": 131071
                                },
                                "max_power_off_wait_time": {
                                    "type": "integer",
                                    "description": "How long BOS will wait for a node to power off before forcefully powering off (in seconds)",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "max_power_on_wait_time": {
                                    "type": "integer",
                                    "description": "How long BOS will wait for a node to power on before calling power on again (in seconds)",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "polling_frequency": {
                                    "type": "integer",
                                    "description": "How frequently the BOS operators check Component state for needed actions (in seconds)",
                                    "minimum": 0,
                                    "maximum": 1048576
                                },
                                "reject_nids": {
                                    "type": "boolean",
                                    "description": "If true, then BOS will attempt to prevent Sessions and Session Templates that reference NIDs (which BOS does not support).\nSpecifically, if this option is true, then:\n- When creating a Session, if the Session limit or a Session Template node list appear to contain NID values, then Session creation will fail.\n- When creating a Session Template, if a node list appears to contain a NID value, then the Session Template creation will fail.\n- When validating an existing Session Template, if a node list appears to contain a NID value, then the validation will report an error.\n\nThis option does NOT have an effect on Sessions that were created prior to it being enabled (even if they have not yet started).\n"
                                },
                                "session_limit_required": {
                                    "type": "boolean",
                                    "description": "If true, Sessions cannot be created without specifying the limit parameter."
                                }
                            },
                            "additionalProperties": true,
                            "minProperties": 1,
                            "maxProperties": 1024
                        }
                    }
                }
            },
            "AlreadyExists": {
                "description": "The resource to be created already exists",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "BadRequest": {
                "description": "Bad Request",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "BadRequestOrMultiTenancyNotSupported": {
                "description": "Multi-tenancy is not supported for this request.\nIf no tenant was specified, then the request was bad for another reason.\n",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "MultiTenancyNotSupported": {
                "description": "Multi-tenancy is not supported for this BOS request.",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "ResourceNotFound": {
                "description": "The resource was not found.",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "UpdateConflict": {
                "description": "The update was not allowed due to a conflict.",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "ServiceUnavailable": {
                "description": "Service Unavailable",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "InternalError": {
                "description": "An Internal Server Error occurred handling the request.",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            }
        },
        "parameters": {
            "TemplateIdPathParam": {
                "name": "session_template_id",
                "in": "path",
                "description": "Session Template name",
                "required": true,
                "schema": {
                    "type": "string",
                    "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                    "minLength": 1,
                    "maxLength": 127,
                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                    "example": "cle-1.0.0"
                }
            },
            "V2ComponentIdPathParam": {
                "name": "component_id",
                "in": "path",
                "description": "Component ID. e.g. xname for hardware Components",
                "required": true,
                "schema": {
                    "type": "string",
                    "description": "The Component's ID. (e.g. xname for hardware Components)",
                    "minLength": 1,
                    "maxLength": 127
                }
            },
            "V2SessionIdPathParam": {
                "name": "session_id",
                "in": "path",
                "description": "Session ID",
                "required": true,
                "schema": {
                    "type": "string",
                    "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                    "minLength": 1,
                    "maxLength": 127,
                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                    "example": "session-20190728032600"
                }
            },
            "V2SessionsMaxAgeQueryParam": {
                "name": "max_age",
                "schema": {
                    "type": "string",
                    "description": "Age in minutes (e.g. \"3m\"), hours (e.g. \"5h\"), days (e.g. \"10d\"), or weeks (e.g. \"2w\").",
                    "example": "3d",
                    "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                    "minLength": 1,
                    "maxLength": 8
                },
                "in": "query",
                "description": "Only include Sessions younger than the given age.  Age is given in the format \"1d\" or \"6h\""
            },
            "V2SessionsMinAgeQueryParam": {
                "name": "min_age",
                "schema": {
                    "type": "string",
                    "description": "Age in minutes (e.g. \"3m\"), hours (e.g. \"5h\"), days (e.g. \"10d\"), or weeks (e.g. \"2w\").",
                    "example": "3d",
                    "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                    "minLength": 1,
                    "maxLength": 8
                },
                "in": "query",
                "description": "Only include Sessions older than the given age.  Age is given in the format \"1d\" or \"6h\""
            },
            "V2SessionsStatusQueryParam": {
                "name": "status",
                "schema": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "running",
                        "complete"
                    ],
                    "description": "The status of a Session."
                },
                "in": "query",
                "description": "Only include Sessions with the given status."
            },
            "V2TenantHeaderParam": {
                "name": "Cray-Tenant-Name",
                "in": "header",
                "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                "required": false,
                "schema": {
                    "type": "string",
                    "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                    "example": "vcluster-my-tenant1",
                    "maxLength": 127
                }
            }
        }
    },
    "paths": {
        "/": {
            "get": {
                "summary": "Get API versions",
                "description": "Return list of versions currently running.",
                "tags": [
                    "version"
                ],
                "x-openapi-router-controller": "bos.server.controllers.base",
                "operationId": "root_get",
                "responses": {
                    "200": {
                        "description": "A collection of Versions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "description": "Version data",
                                        "type": "object",
                                        "properties": {
                                            "major": {
                                                "type": "string",
                                                "pattern": "^(0|[1-9][0-9]*)$"
                                            },
                                            "minor": {
                                                "type": "string",
                                                "pattern": "^(0|[1-9][0-9]*)$"
                                            },
                                            "patch": {
                                                "type": "string",
                                                "pattern": "^(0|[1-9][0-9]*)$"
                                            },
                                            "links": {
                                                "description": "List of links to other resources",
                                                "type": "array",
                                                "items": {
                                                    "description": "Link to other resources",
                                                    "type": "object",
                                                    "properties": {
                                                        "href": {
                                                            "type": "string"
                                                        },
                                                        "rel": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An Internal Server Error occurred handling the request.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2": {
            "get": {
                "summary": "Get API version",
                "description": "Return the API version",
                "tags": [
                    "v2",
                    "version"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.base",
                "operationId": "get_v2",
                "responses": {
                    "200": {
                        "description": "Get version details\nThe versioning system uses [semver](https://semver.org/).\n## Link Relationships\n* self : Link to itself\n* versions : Link back to the versions resource\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Version data",
                                    "type": "object",
                                    "properties": {
                                        "major": {
                                            "type": "string",
                                            "pattern": "^(0|[1-9][0-9]*)$"
                                        },
                                        "minor": {
                                            "type": "string",
                                            "pattern": "^(0|[1-9][0-9]*)$"
                                        },
                                        "patch": {
                                            "type": "string",
                                            "pattern": "^(0|[1-9][0-9]*)$"
                                        },
                                        "links": {
                                            "description": "List of links to other resources",
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "href": {
                                                        "type": "string"
                                                    },
                                                    "rel": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An Internal Server Error occurred handling the request.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/healthz": {
            "get": {
                "summary": "Get service health details",
                "description": "Get BOS health details.",
                "tags": [
                    "v2",
                    "healthz"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.healthz",
                "operationId": "get_v2_healthz",
                "responses": {
                    "200": {
                        "description": "Service Health information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Service health status",
                                    "type": "object",
                                    "properties": {
                                        "dbStatus": {
                                            "type": "string"
                                        },
                                        "apiStatus": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/sessiontemplates": {
            "parameters": [
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "get": {
                "summary": "List Session Templates",
                "description": "List all Session Templates.",
                "tags": [
                    "v2",
                    "sessiontemplates"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessiontemplates",
                "operationId": "get_v2_sessiontemplates",
                "responses": {
                    "200": {
                        "description": "Session Template details array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An array of Session Templates.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "minLength": 1,
                                                "maxLength": 127,
                                                "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                "readOnly": true,
                                                "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                                "example": "cle-1.0.0"
                                            },
                                            "tenant": {
                                                "type": "string",
                                                "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                                "nullable": true,
                                                "readOnly": true,
                                                "maxLength": 127
                                            },
                                            "description": {
                                                "type": "string",
                                                "description": "An optional description for the Session Template.",
                                                "minLength": 1,
                                                "maxLength": 1023
                                            },
                                            "enable_cfs": {
                                                "type": "boolean",
                                                "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                                "default": true
                                            },
                                            "cfs": {
                                                "type": "object",
                                                "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                "properties": {
                                                    "configuration": {
                                                        "type": "string",
                                                        "description": "The name of configuration to be applied.",
                                                        "example": "compute-23.4.0",
                                                        "maxLength": 127
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "boot_sets": {
                                                "type": "object",
                                                "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                "minProperties": 1,
                                                "maxProperties": 127,
                                                "additionalProperties": {
                                                    "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string",
                                                            "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                            "example": "compute",
                                                            "minLength": 1,
                                                            "maxLength": 127,
                                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                            "writeOnly": true
                                                        },
                                                        "path": {
                                                            "type": "string",
                                                            "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                            "minLength": 1,
                                                            "maxLength": 4095
                                                        },
                                                        "cfs": {
                                                            "type": "object",
                                                            "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                            "properties": {
                                                                "configuration": {
                                                                    "type": "string",
                                                                    "description": "The name of configuration to be applied.",
                                                                    "example": "compute-23.4.0",
                                                                    "maxLength": 127
                                                                }
                                                            },
                                                            "additionalProperties": false
                                                        },
                                                        "type": {
                                                            "type": "string",
                                                            "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                            "example": "s3",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        },
                                                        "etag": {
                                                            "type": "string",
                                                            "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                            "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                            "maxLength": 65536
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "node_list": {
                                                            "type": "array",
                                                            "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                            "minItems": 1,
                                                            "maxItems": 65535,
                                                            "example": [
                                                                "x3000c0s19b1n0",
                                                                "x3000c0s19b2n0"
                                                            ],
                                                            "items": {
                                                                "type": "string",
                                                                "description": "Hardware component name (xname).",
                                                                "example": "x3001c0s39b0n0",
                                                                "minLength": 1,
                                                                "maxLength": 127
                                                            }
                                                        },
                                                        "node_roles_groups": {
                                                            "type": "array",
                                                            "description": "Node role list. Allows actions against nodes with associated roles.",
                                                            "minItems": 1,
                                                            "maxItems": 1023,
                                                            "example": [
                                                                "Compute",
                                                                "Application"
                                                            ],
                                                            "items": {
                                                                "type": "string",
                                                                "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                                "example": "Compute",
                                                                "minLength": 1,
                                                                "maxLength": 127
                                                            }
                                                        },
                                                        "node_groups": {
                                                            "type": "array",
                                                            "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                            "minItems": 1,
                                                            "maxItems": 4095,
                                                            "items": {
                                                                "type": "string",
                                                                "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                                "minLength": 1,
                                                                "maxLength": 127
                                                            }
                                                        },
                                                        "arch": {
                                                            "type": "string",
                                                            "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                            "default": "X86",
                                                            "enum": [
                                                                "X86",
                                                                "ARM",
                                                                "Other",
                                                                "Unknown"
                                                            ]
                                                        },
                                                        "rootfs_provider": {
                                                            "type": "string",
                                                            "description": "The root file system provider.",
                                                            "example": "cpss3",
                                                            "minLength": 1,
                                                            "maxLength": 511
                                                        },
                                                        "rootfs_provider_passthrough": {
                                                            "type": "string",
                                                            "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                            "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                            "maxLength": 4096
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "path",
                                                        "type"
                                                    ]
                                                }
                                            },
                                            "links": {
                                                "description": "List of links to other resources",
                                                "type": "array",
                                                "readOnly": true,
                                                "items": {
                                                    "description": "Link to other resources",
                                                    "type": "object",
                                                    "properties": {
                                                        "href": {
                                                            "type": "string"
                                                        },
                                                        "rel": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "boot_sets"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/sessiontemplatesvalid/{session_template_id}": {
            "parameters": [
                {
                    "name": "session_template_id",
                    "in": "path",
                    "description": "Session Template name",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "cle-1.0.0"
                    }
                },
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "get": {
                "summary": "Validate the Session Template by ID",
                "description": "Validate Session Template by Session Template ID.\nThe Session Template ID corresponds to the *name*\nof the Session Template.\n",
                "tags": [
                    "v2",
                    "sessiontemplatess"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessiontemplates",
                "operationId": "validate_v2_sessiontemplate",
                "responses": {
                    "200": {
                        "description": "Session Template validity details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Message describing errors or incompleteness in a Session Template.\n",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/sessiontemplates/{session_template_id}": {
            "parameters": [
                {
                    "name": "session_template_id",
                    "in": "path",
                    "description": "Session Template name",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "cle-1.0.0"
                    }
                },
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "get": {
                "summary": "Get Session Template by ID",
                "description": "Get Session Template by Session Template ID.\nThe Session Template ID corresponds to the *name*\nof the Session Template.\n",
                "tags": [
                    "v2",
                    "sessiontemplatess"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessiontemplates",
                "operationId": "get_v2_sessiontemplate",
                "responses": {
                    "200": {
                        "description": "Session Template details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "readOnly": true,
                                            "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "example": "cle-1.0.0"
                                        },
                                        "tenant": {
                                            "type": "string",
                                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                            "nullable": true,
                                            "readOnly": true,
                                            "maxLength": 127
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "An optional description for the Session Template.",
                                            "minLength": 1,
                                            "maxLength": 1023
                                        },
                                        "enable_cfs": {
                                            "type": "boolean",
                                            "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                            "default": true
                                        },
                                        "cfs": {
                                            "type": "object",
                                            "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                            "properties": {
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "boot_sets": {
                                            "type": "object",
                                            "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                            "minProperties": 1,
                                            "maxProperties": 127,
                                            "additionalProperties": {
                                                "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                        "example": "compute",
                                                        "minLength": 1,
                                                        "maxLength": 127,
                                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                        "writeOnly": true
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                        "minLength": 1,
                                                        "maxLength": 4095
                                                    },
                                                    "cfs": {
                                                        "type": "object",
                                                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                        "properties": {
                                                            "configuration": {
                                                                "type": "string",
                                                                "description": "The name of configuration to be applied.",
                                                                "example": "compute-23.4.0",
                                                                "maxLength": 127
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                        "example": "s3",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    },
                                                    "etag": {
                                                        "type": "string",
                                                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                        "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                        "maxLength": 65536
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "node_list": {
                                                        "type": "array",
                                                        "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                        "minItems": 1,
                                                        "maxItems": 65535,
                                                        "example": [
                                                            "x3000c0s19b1n0",
                                                            "x3000c0s19b2n0"
                                                        ],
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Hardware component name (xname).",
                                                            "example": "x3001c0s39b0n0",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "node_roles_groups": {
                                                        "type": "array",
                                                        "description": "Node role list. Allows actions against nodes with associated roles.",
                                                        "minItems": 1,
                                                        "maxItems": 1023,
                                                        "example": [
                                                            "Compute",
                                                            "Application"
                                                        ],
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                            "example": "Compute",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "node_groups": {
                                                        "type": "array",
                                                        "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                        "minItems": 1,
                                                        "maxItems": 4095,
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "arch": {
                                                        "type": "string",
                                                        "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                        "default": "X86",
                                                        "enum": [
                                                            "X86",
                                                            "ARM",
                                                            "Other",
                                                            "Unknown"
                                                        ]
                                                    },
                                                    "rootfs_provider": {
                                                        "type": "string",
                                                        "description": "The root file system provider.",
                                                        "example": "cpss3",
                                                        "minLength": 1,
                                                        "maxLength": 511
                                                    },
                                                    "rootfs_provider_passthrough": {
                                                        "type": "string",
                                                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                        "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                        "maxLength": 4096
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "required": [
                                                    "path",
                                                    "type"
                                                ]
                                            }
                                        },
                                        "links": {
                                            "description": "List of links to other resources",
                                            "type": "array",
                                            "readOnly": true,
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "href": {
                                                        "type": "string"
                                                    },
                                                    "rel": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "boot_sets"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Create Session Template",
                "description": "Create a new Session Template.",
                "tags": [
                    "v2",
                    "sessiontemplates"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessiontemplates",
                "operationId": "put_v2_sessiontemplate",
                "requestBody": {
                    "description": "A JSON object for creating a Session Template",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "readOnly": true,
                                        "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                        "example": "cle-1.0.0"
                                    },
                                    "tenant": {
                                        "type": "string",
                                        "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                        "nullable": true,
                                        "readOnly": true,
                                        "maxLength": 127
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "An optional description for the Session Template.",
                                        "minLength": 1,
                                        "maxLength": 1023
                                    },
                                    "enable_cfs": {
                                        "type": "boolean",
                                        "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                        "default": true
                                    },
                                    "cfs": {
                                        "type": "object",
                                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                        "properties": {
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boot_sets": {
                                        "type": "object",
                                        "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                        "minProperties": 1,
                                        "maxProperties": 127,
                                        "additionalProperties": {
                                            "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                    "example": "compute",
                                                    "minLength": 1,
                                                    "maxLength": 127,
                                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                    "writeOnly": true
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                    "minLength": 1,
                                                    "maxLength": 4095
                                                },
                                                "cfs": {
                                                    "type": "object",
                                                    "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                    "properties": {
                                                        "configuration": {
                                                            "type": "string",
                                                            "description": "The name of configuration to be applied.",
                                                            "example": "compute-23.4.0",
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                    "example": "s3",
                                                    "minLength": 1,
                                                    "maxLength": 127
                                                },
                                                "etag": {
                                                    "type": "string",
                                                    "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                    "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                    "maxLength": 65536
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "node_list": {
                                                    "type": "array",
                                                    "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                    "minItems": 1,
                                                    "maxItems": 65535,
                                                    "example": [
                                                        "x3000c0s19b1n0",
                                                        "x3000c0s19b2n0"
                                                    ],
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Hardware component name (xname).",
                                                        "example": "x3001c0s39b0n0",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "node_roles_groups": {
                                                    "type": "array",
                                                    "description": "Node role list. Allows actions against nodes with associated roles.",
                                                    "minItems": 1,
                                                    "maxItems": 1023,
                                                    "example": [
                                                        "Compute",
                                                        "Application"
                                                    ],
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                        "example": "Compute",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "node_groups": {
                                                    "type": "array",
                                                    "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                    "minItems": 1,
                                                    "maxItems": 4095,
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "arch": {
                                                    "type": "string",
                                                    "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                    "default": "X86",
                                                    "enum": [
                                                        "X86",
                                                        "ARM",
                                                        "Other",
                                                        "Unknown"
                                                    ]
                                                },
                                                "rootfs_provider": {
                                                    "type": "string",
                                                    "description": "The root file system provider.",
                                                    "example": "cpss3",
                                                    "minLength": 1,
                                                    "maxLength": 511
                                                },
                                                "rootfs_provider_passthrough": {
                                                    "type": "string",
                                                    "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                    "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                    "maxLength": 4096
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "path",
                                                "type"
                                            ]
                                        }
                                    },
                                    "links": {
                                        "description": "List of links to other resources",
                                        "type": "array",
                                        "readOnly": true,
                                        "items": {
                                            "description": "Link to other resources",
                                            "type": "object",
                                            "properties": {
                                                "href": {
                                                    "type": "string"
                                                },
                                                "rel": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "boot_sets"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session Template details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "readOnly": true,
                                            "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "example": "cle-1.0.0"
                                        },
                                        "tenant": {
                                            "type": "string",
                                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                            "nullable": true,
                                            "readOnly": true,
                                            "maxLength": 127
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "An optional description for the Session Template.",
                                            "minLength": 1,
                                            "maxLength": 1023
                                        },
                                        "enable_cfs": {
                                            "type": "boolean",
                                            "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                            "default": true
                                        },
                                        "cfs": {
                                            "type": "object",
                                            "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                            "properties": {
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "boot_sets": {
                                            "type": "object",
                                            "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                            "minProperties": 1,
                                            "maxProperties": 127,
                                            "additionalProperties": {
                                                "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                        "example": "compute",
                                                        "minLength": 1,
                                                        "maxLength": 127,
                                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                        "writeOnly": true
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                        "minLength": 1,
                                                        "maxLength": 4095
                                                    },
                                                    "cfs": {
                                                        "type": "object",
                                                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                        "properties": {
                                                            "configuration": {
                                                                "type": "string",
                                                                "description": "The name of configuration to be applied.",
                                                                "example": "compute-23.4.0",
                                                                "maxLength": 127
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                        "example": "s3",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    },
                                                    "etag": {
                                                        "type": "string",
                                                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                        "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                        "maxLength": 65536
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "node_list": {
                                                        "type": "array",
                                                        "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                        "minItems": 1,
                                                        "maxItems": 65535,
                                                        "example": [
                                                            "x3000c0s19b1n0",
                                                            "x3000c0s19b2n0"
                                                        ],
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Hardware component name (xname).",
                                                            "example": "x3001c0s39b0n0",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "node_roles_groups": {
                                                        "type": "array",
                                                        "description": "Node role list. Allows actions against nodes with associated roles.",
                                                        "minItems": 1,
                                                        "maxItems": 1023,
                                                        "example": [
                                                            "Compute",
                                                            "Application"
                                                        ],
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                            "example": "Compute",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "node_groups": {
                                                        "type": "array",
                                                        "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                        "minItems": 1,
                                                        "maxItems": 4095,
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "arch": {
                                                        "type": "string",
                                                        "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                        "default": "X86",
                                                        "enum": [
                                                            "X86",
                                                            "ARM",
                                                            "Other",
                                                            "Unknown"
                                                        ]
                                                    },
                                                    "rootfs_provider": {
                                                        "type": "string",
                                                        "description": "The root file system provider.",
                                                        "example": "cpss3",
                                                        "minLength": 1,
                                                        "maxLength": 511
                                                    },
                                                    "rootfs_provider_passthrough": {
                                                        "type": "string",
                                                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                        "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                        "maxLength": 4096
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "required": [
                                                    "path",
                                                    "type"
                                                ]
                                            }
                                        },
                                        "links": {
                                            "description": "List of links to other resources",
                                            "type": "array",
                                            "readOnly": true,
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "href": {
                                                        "type": "string"
                                                    },
                                                    "rel": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "boot_sets"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update a Session Template",
                "description": "Update an existing Session Template.",
                "tags": [
                    "v2",
                    "sessiontemplates"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessiontemplates",
                "operationId": "patch_v2_sessiontemplate",
                "requestBody": {
                    "description": "A JSON object for updating a Session Template",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "readOnly": true,
                                        "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                        "example": "cle-1.0.0"
                                    },
                                    "tenant": {
                                        "type": "string",
                                        "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                        "nullable": true,
                                        "readOnly": true,
                                        "maxLength": 127
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "An optional description for the Session Template.",
                                        "minLength": 1,
                                        "maxLength": 1023
                                    },
                                    "enable_cfs": {
                                        "type": "boolean",
                                        "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                        "default": true
                                    },
                                    "cfs": {
                                        "type": "object",
                                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                        "properties": {
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boot_sets": {
                                        "type": "object",
                                        "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                        "minProperties": 1,
                                        "maxProperties": 127,
                                        "additionalProperties": {
                                            "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                    "example": "compute",
                                                    "minLength": 1,
                                                    "maxLength": 127,
                                                    "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                    "writeOnly": true
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                    "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                    "minLength": 1,
                                                    "maxLength": 4095
                                                },
                                                "cfs": {
                                                    "type": "object",
                                                    "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                    "properties": {
                                                        "configuration": {
                                                            "type": "string",
                                                            "description": "The name of configuration to be applied.",
                                                            "example": "compute-23.4.0",
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                    "example": "s3",
                                                    "minLength": 1,
                                                    "maxLength": 127
                                                },
                                                "etag": {
                                                    "type": "string",
                                                    "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                    "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                    "maxLength": 65536
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.",
                                                    "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                    "maxLength": 4096
                                                },
                                                "node_list": {
                                                    "type": "array",
                                                    "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                    "minItems": 1,
                                                    "maxItems": 65535,
                                                    "example": [
                                                        "x3000c0s19b1n0",
                                                        "x3000c0s19b2n0"
                                                    ],
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Hardware component name (xname).",
                                                        "example": "x3001c0s39b0n0",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "node_roles_groups": {
                                                    "type": "array",
                                                    "description": "Node role list. Allows actions against nodes with associated roles.",
                                                    "minItems": 1,
                                                    "maxItems": 1023,
                                                    "example": [
                                                        "Compute",
                                                        "Application"
                                                    ],
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                        "example": "Compute",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "node_groups": {
                                                    "type": "array",
                                                    "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                    "minItems": 1,
                                                    "maxItems": 4095,
                                                    "items": {
                                                        "type": "string",
                                                        "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    }
                                                },
                                                "arch": {
                                                    "type": "string",
                                                    "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                    "default": "X86",
                                                    "enum": [
                                                        "X86",
                                                        "ARM",
                                                        "Other",
                                                        "Unknown"
                                                    ]
                                                },
                                                "rootfs_provider": {
                                                    "type": "string",
                                                    "description": "The root file system provider.",
                                                    "example": "cpss3",
                                                    "minLength": 1,
                                                    "maxLength": 511
                                                },
                                                "rootfs_provider_passthrough": {
                                                    "type": "string",
                                                    "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                    "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                    "maxLength": 4096
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "path",
                                                "type"
                                            ]
                                        }
                                    },
                                    "links": {
                                        "description": "List of links to other resources",
                                        "type": "array",
                                        "readOnly": true,
                                        "items": {
                                            "description": "Link to other resources",
                                            "type": "object",
                                            "properties": {
                                                "href": {
                                                    "type": "string"
                                                },
                                                "rel": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "boot_sets"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session Template details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "readOnly": true,
                                            "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "example": "cle-1.0.0"
                                        },
                                        "tenant": {
                                            "type": "string",
                                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                            "nullable": true,
                                            "readOnly": true,
                                            "maxLength": 127
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "An optional description for the Session Template.",
                                            "minLength": 1,
                                            "maxLength": 1023
                                        },
                                        "enable_cfs": {
                                            "type": "boolean",
                                            "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                            "default": true
                                        },
                                        "cfs": {
                                            "type": "object",
                                            "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                            "properties": {
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "boot_sets": {
                                            "type": "object",
                                            "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                            "minProperties": 1,
                                            "maxProperties": 127,
                                            "additionalProperties": {
                                                "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                        "example": "compute",
                                                        "minLength": 1,
                                                        "maxLength": 127,
                                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                        "writeOnly": true
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                        "minLength": 1,
                                                        "maxLength": 4095
                                                    },
                                                    "cfs": {
                                                        "type": "object",
                                                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                        "properties": {
                                                            "configuration": {
                                                                "type": "string",
                                                                "description": "The name of configuration to be applied.",
                                                                "example": "compute-23.4.0",
                                                                "maxLength": 127
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                        "example": "s3",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    },
                                                    "etag": {
                                                        "type": "string",
                                                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                        "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                        "maxLength": 65536
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "node_list": {
                                                        "type": "array",
                                                        "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                        "minItems": 1,
                                                        "maxItems": 65535,
                                                        "example": [
                                                            "x3000c0s19b1n0",
                                                            "x3000c0s19b2n0"
                                                        ],
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Hardware component name (xname).",
                                                            "example": "x3001c0s39b0n0",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "node_roles_groups": {
                                                        "type": "array",
                                                        "description": "Node role list. Allows actions against nodes with associated roles.",
                                                        "minItems": 1,
                                                        "maxItems": 1023,
                                                        "example": [
                                                            "Compute",
                                                            "Application"
                                                        ],
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                            "example": "Compute",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "node_groups": {
                                                        "type": "array",
                                                        "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                        "minItems": 1,
                                                        "maxItems": 4095,
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "arch": {
                                                        "type": "string",
                                                        "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                        "default": "X86",
                                                        "enum": [
                                                            "X86",
                                                            "ARM",
                                                            "Other",
                                                            "Unknown"
                                                        ]
                                                    },
                                                    "rootfs_provider": {
                                                        "type": "string",
                                                        "description": "The root file system provider.",
                                                        "example": "cpss3",
                                                        "minLength": 1,
                                                        "maxLength": 511
                                                    },
                                                    "rootfs_provider_passthrough": {
                                                        "type": "string",
                                                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                        "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                        "maxLength": 4096
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "required": [
                                                    "path",
                                                    "type"
                                                ]
                                            }
                                        },
                                        "links": {
                                            "description": "List of links to other resources",
                                            "type": "array",
                                            "readOnly": true,
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "href": {
                                                        "type": "string"
                                                    },
                                                    "rel": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "boot_sets"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a Session Template",
                "description": "Delete a Session Template.",
                "tags": [
                    "v2",
                    "sessiontemplates"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessiontemplates",
                "operationId": "delete_v2_sessiontemplate",
                "responses": {
                    "204": {
                        "description": "The resource was deleted."
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/sessiontemplatetemplate": {
            "get": {
                "summary": "Get an example Session Template.",
                "description": "Returns a skeleton of a Session Template, which can be\nused as a starting point for users creating their own\nSession Templates.\n",
                "tags": [
                    "v2",
                    "sessiontemplates"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessiontemplates",
                "operationId": "get_v2_sessiontemplatetemplate",
                "responses": {
                    "200": {
                        "description": "Session Template details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "A Session Template object represents a collection of resources and metadata.\nA Session Template is used to create a Session which applies the data to\ngroup of Components.\n\n## Link Relationships\n\n* self : The Session Template object\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "readOnly": true,
                                            "description": "Name of the Session Template.\n\nNames must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "example": "cle-1.0.0"
                                        },
                                        "tenant": {
                                            "type": "string",
                                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                            "nullable": true,
                                            "readOnly": true,
                                            "maxLength": 127
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "An optional description for the Session Template.",
                                            "minLength": 1,
                                            "maxLength": 1023
                                        },
                                        "enable_cfs": {
                                            "type": "boolean",
                                            "description": "Whether to enable the Configuration Framework Service (CFS).\n",
                                            "default": true
                                        },
                                        "cfs": {
                                            "type": "object",
                                            "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                            "properties": {
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "boot_sets": {
                                            "type": "object",
                                            "description": "Mapping from Boot Set names to Boot Sets.\n\n* Boot Set names must be 1-127 characters in length.\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                            "minProperties": 1,
                                            "maxProperties": 127,
                                            "additionalProperties": {
                                                "description": "A Boot Set is a collection of nodes defined by an explicit list, their functional\nrole, and their logical groupings. This collection of nodes is associated with one\nset of boot artifacts and optional additional records for configuration and root\nfilesystem provisioning.\n\nA boot set requires at least one of the following fields to be specified:\nnode_list, node_roles_groups, node_groups\n\nIf specified, the name field must match the key mapping to this boot set in the\nboot_sets field of the containing V2SessionTemplate.\n",
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "The Boot Set name.\n\n* Boot Set names must use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Boot Set names must begin and end with a letter or digit.\n",
                                                        "example": "compute",
                                                        "minLength": 1,
                                                        "maxLength": 127,
                                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                        "writeOnly": true
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "A path identifying the metadata describing the components of the boot image.\nThis could be a URI, URL, etc, depending on the type of the Boot Set.\n",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json",
                                                        "minLength": 1,
                                                        "maxLength": 4095
                                                    },
                                                    "cfs": {
                                                        "type": "object",
                                                        "description": "This is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled. Can be set as the global value for\na Session Template, or individually within a Boot Set.\n",
                                                        "properties": {
                                                            "configuration": {
                                                                "type": "string",
                                                                "description": "The name of configuration to be applied.",
                                                                "example": "compute-23.4.0",
                                                                "maxLength": 127
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n",
                                                        "example": "s3",
                                                        "minLength": 1,
                                                        "maxLength": 127
                                                    },
                                                    "etag": {
                                                        "type": "string",
                                                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.",
                                                        "example": "1cc4eef4f407bd8a62d7d66ee4b9e9c8",
                                                        "maxLength": 65536
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "node_list": {
                                                        "type": "array",
                                                        "description": "A node list that is required to have at least one node.\nNodes must be specified by component name (xname). NIDs are not supported.\nIf the reject_nids option is enabled, then Session Template creation or validation will fail if\nany of the boot sets contain a NodeList that appears to contain a NID.\n",
                                                        "minItems": 1,
                                                        "maxItems": 65535,
                                                        "example": [
                                                            "x3000c0s19b1n0",
                                                            "x3000c0s19b2n0"
                                                        ],
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Hardware component name (xname).",
                                                            "example": "x3001c0s39b0n0",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "node_roles_groups": {
                                                        "type": "array",
                                                        "description": "Node role list. Allows actions against nodes with associated roles.",
                                                        "minItems": 1,
                                                        "maxItems": 1023,
                                                        "example": [
                                                            "Compute",
                                                            "Application"
                                                        ],
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Name of a role that is defined in the Hardware State Manager (HSM).",
                                                            "example": "Compute",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "node_groups": {
                                                        "type": "array",
                                                        "description": "Node group list. Allows actions against associated nodes by logical groupings.",
                                                        "minItems": 1,
                                                        "maxItems": 4095,
                                                        "items": {
                                                            "type": "string",
                                                            "description": "Name of a user-defined logical group in the Hardware State Manager (HSM).",
                                                            "minLength": 1,
                                                            "maxLength": 127
                                                        }
                                                    },
                                                    "arch": {
                                                        "type": "string",
                                                        "description": "The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown are treated as being of type X86.\n",
                                                        "default": "X86",
                                                        "enum": [
                                                            "X86",
                                                            "ARM",
                                                            "Other",
                                                            "Unknown"
                                                        ]
                                                    },
                                                    "rootfs_provider": {
                                                        "type": "string",
                                                        "description": "The root file system provider.",
                                                        "example": "cpss3",
                                                        "minLength": 1,
                                                        "maxLength": 511
                                                    },
                                                    "rootfs_provider_passthrough": {
                                                        "type": "string",
                                                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n",
                                                        "example": "dvs:api-gw-service-nmn.local:300:nmn0",
                                                        "maxLength": 4096
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "required": [
                                                    "path",
                                                    "type"
                                                ]
                                            }
                                        },
                                        "links": {
                                            "description": "List of links to other resources",
                                            "type": "array",
                                            "readOnly": true,
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "href": {
                                                        "type": "string"
                                                    },
                                                    "rel": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "boot_sets"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/sessions": {
            "parameters": [
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "post": {
                "summary": "Create a Session",
                "description": "The creation of a Session performs the operation\nspecified in the SessionCreateRequest\non the Boot Sets defined in the Session Template.\n",
                "tags": [
                    "v2",
                    "sessions"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessions",
                "operationId": "post_v2_session",
                "requestBody": {
                    "description": "The information to create a Session",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "A Session Creation object. A UUID name is generated if a name is not provided. The limit parameter is\nrequired if the session_limit_required option is true.\n",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "example": "session-20190728032600"
                                    },
                                    "operation": {
                                        "type": "string",
                                        "enum": [
                                            "boot",
                                            "reboot",
                                            "shutdown"
                                        ],
                                        "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                    },
                                    "template_name": {
                                        "type": "string",
                                        "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                        "minLength": 1,
                                        "maxLength": 127,
                                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                        "example": "cle-1.0.0"
                                    },
                                    "limit": {
                                        "type": "string",
                                        "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                        "maxLength": 524288,
                                        "nullable": true,
                                        "default": ""
                                    },
                                    "stage": {
                                        "type": "boolean",
                                        "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n",
                                        "default": false
                                    },
                                    "include_disabled": {
                                        "type": "boolean",
                                        "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "operation",
                                    "template_name"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Session details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "example": "session-20190728032600"
                                        },
                                        "tenant": {
                                            "type": "string",
                                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                            "nullable": true,
                                            "readOnly": true,
                                            "maxLength": 127
                                        },
                                        "operation": {
                                            "type": "string",
                                            "enum": [
                                                "boot",
                                                "reboot",
                                                "shutdown"
                                            ],
                                            "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                        },
                                        "template_name": {
                                            "type": "string",
                                            "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "example": "cle-1.0.0"
                                        },
                                        "limit": {
                                            "type": "string",
                                            "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                            "maxLength": 524288,
                                            "nullable": true,
                                            "default": ""
                                        },
                                        "stage": {
                                            "type": "boolean",
                                            "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                                        },
                                        "components": {
                                            "type": "string",
                                            "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                            "maxLength": 524288
                                        },
                                        "include_disabled": {
                                            "type": "boolean",
                                            "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                                        },
                                        "status": {
                                            "type": "object",
                                            "description": "Information on the status of a Session.\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "When the Session was created.",
                                                    "maxLength": 127
                                                },
                                                "end_time": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "When the Session was completed. A null value means the Session has not ended.",
                                                    "maxLength": 127
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "pending",
                                                        "running",
                                                        "complete"
                                                    ],
                                                    "description": "The status of a Session."
                                                },
                                                "error": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                                    "maxLength": 65536
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "name",
                                        "operation",
                                        "template_name"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "List Sessions",
                "parameters": [
                    {
                        "name": "min_age",
                        "schema": {
                            "type": "string",
                            "description": "Age in minutes (e.g. \"3m\"), hours (e.g. \"5h\"), days (e.g. \"10d\"), or weeks (e.g. \"2w\").",
                            "example": "3d",
                            "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                            "minLength": 1,
                            "maxLength": 8
                        },
                        "in": "query",
                        "description": "Only include Sessions older than the given age.  Age is given in the format \"1d\" or \"6h\""
                    },
                    {
                        "name": "max_age",
                        "schema": {
                            "type": "string",
                            "description": "Age in minutes (e.g. \"3m\"), hours (e.g. \"5h\"), days (e.g. \"10d\"), or weeks (e.g. \"2w\").",
                            "example": "3d",
                            "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                            "minLength": 1,
                            "maxLength": 8
                        },
                        "in": "query",
                        "description": "Only include Sessions younger than the given age.  Age is given in the format \"1d\" or \"6h\""
                    },
                    {
                        "name": "status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "running",
                                "complete"
                            ],
                            "description": "The status of a Session."
                        },
                        "in": "query",
                        "description": "Only include Sessions with the given status."
                    }
                ],
                "description": "List all Sessions, including those in progress and those complete.\n",
                "tags": [
                    "v2",
                    "sessions"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessions",
                "operationId": "get_v2_sessions",
                "responses": {
                    "200": {
                        "description": "Session details array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An array of Sessions.",
                                    "type": "array",
                                    "items": {
                                        "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                                "minLength": 1,
                                                "maxLength": 127,
                                                "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                "example": "session-20190728032600"
                                            },
                                            "tenant": {
                                                "type": "string",
                                                "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                                "nullable": true,
                                                "readOnly": true,
                                                "maxLength": 127
                                            },
                                            "operation": {
                                                "type": "string",
                                                "enum": [
                                                    "boot",
                                                    "reboot",
                                                    "shutdown"
                                                ],
                                                "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                            },
                                            "template_name": {
                                                "type": "string",
                                                "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                                "minLength": 1,
                                                "maxLength": 127,
                                                "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                                "example": "cle-1.0.0"
                                            },
                                            "limit": {
                                                "type": "string",
                                                "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                                "maxLength": 524288,
                                                "nullable": true,
                                                "default": ""
                                            },
                                            "stage": {
                                                "type": "boolean",
                                                "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                                            },
                                            "components": {
                                                "type": "string",
                                                "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                                "maxLength": 524288
                                            },
                                            "include_disabled": {
                                                "type": "boolean",
                                                "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                                            },
                                            "status": {
                                                "type": "object",
                                                "description": "Information on the status of a Session.\n",
                                                "properties": {
                                                    "start_time": {
                                                        "type": "string",
                                                        "description": "When the Session was created.",
                                                        "maxLength": 127
                                                    },
                                                    "end_time": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "description": "When the Session was completed. A null value means the Session has not ended.",
                                                        "maxLength": 127
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "enum": [
                                                            "pending",
                                                            "running",
                                                            "complete"
                                                        ],
                                                        "description": "The status of a Session."
                                                    },
                                                    "error": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                                        "maxLength": 65536
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "name",
                                            "operation",
                                            "template_name"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete multiple Sessions.",
                "parameters": [
                    {
                        "name": "min_age",
                        "schema": {
                            "type": "string",
                            "description": "Age in minutes (e.g. \"3m\"), hours (e.g. \"5h\"), days (e.g. \"10d\"), or weeks (e.g. \"2w\").",
                            "example": "3d",
                            "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                            "minLength": 1,
                            "maxLength": 8
                        },
                        "in": "query",
                        "description": "Only include Sessions older than the given age.  Age is given in the format \"1d\" or \"6h\""
                    },
                    {
                        "name": "max_age",
                        "schema": {
                            "type": "string",
                            "description": "Age in minutes (e.g. \"3m\"), hours (e.g. \"5h\"), days (e.g. \"10d\"), or weeks (e.g. \"2w\").",
                            "example": "3d",
                            "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                            "minLength": 1,
                            "maxLength": 8
                        },
                        "in": "query",
                        "description": "Only include Sessions younger than the given age.  Age is given in the format \"1d\" or \"6h\""
                    },
                    {
                        "name": "status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "running",
                                "complete"
                            ],
                            "description": "The status of a Session."
                        },
                        "in": "query",
                        "description": "Only include Sessions with the given status."
                    }
                ],
                "description": "Delete multiple Sessions.  If filters are provided, only Sessions matching\nall filters will be deleted.  By default only completed Sessions will be deleted.\n",
                "tags": [
                    "v2",
                    "sessions"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessions",
                "operationId": "delete_v2_sessions",
                "responses": {
                    "204": {
                        "description": "The resource was deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/sessions/{session_id}": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "description": "Session ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "session-20190728032600"
                    }
                },
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "get": {
                "summary": "Get Session details by ID",
                "description": "Get Session details by Session ID.",
                "tags": [
                    "v2",
                    "sessions"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessions",
                "operationId": "get_v2_session",
                "responses": {
                    "200": {
                        "description": "Session details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "example": "session-20190728032600"
                                        },
                                        "tenant": {
                                            "type": "string",
                                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                            "nullable": true,
                                            "readOnly": true,
                                            "maxLength": 127
                                        },
                                        "operation": {
                                            "type": "string",
                                            "enum": [
                                                "boot",
                                                "reboot",
                                                "shutdown"
                                            ],
                                            "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                        },
                                        "template_name": {
                                            "type": "string",
                                            "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "example": "cle-1.0.0"
                                        },
                                        "limit": {
                                            "type": "string",
                                            "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                            "maxLength": 524288,
                                            "nullable": true,
                                            "default": ""
                                        },
                                        "stage": {
                                            "type": "boolean",
                                            "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                                        },
                                        "components": {
                                            "type": "string",
                                            "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                            "maxLength": 524288
                                        },
                                        "include_disabled": {
                                            "type": "boolean",
                                            "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                                        },
                                        "status": {
                                            "type": "object",
                                            "description": "Information on the status of a Session.\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "When the Session was created.",
                                                    "maxLength": 127
                                                },
                                                "end_time": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "When the Session was completed. A null value means the Session has not ended.",
                                                    "maxLength": 127
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "pending",
                                                        "running",
                                                        "complete"
                                                    ],
                                                    "description": "The status of a Session."
                                                },
                                                "error": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                                    "maxLength": 65536
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "name",
                                        "operation",
                                        "template_name"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update status of a single Session",
                "description": "Update the state for a given Session in the BOS database.\nThis is intended only for internal use by the BOS service.\n",
                "tags": [
                    "v2",
                    "sessions",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessions",
                "operationId": "patch_v2_session",
                "requestBody": {
                    "description": "The state for a single Session",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "A Session update object\n\n## Link Relationships\n\n* self : The Session object\n",
                                "type": "object",
                                "properties": {
                                    "components": {
                                        "type": "string",
                                        "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                        "maxLength": 524288
                                    },
                                    "status": {
                                        "type": "object",
                                        "description": "Information on the status of a Session.\n",
                                        "properties": {
                                            "start_time": {
                                                "type": "string",
                                                "description": "When the Session was created.",
                                                "maxLength": 127
                                            },
                                            "end_time": {
                                                "type": "string",
                                                "nullable": true,
                                                "description": "When the Session was completed. A null value means the Session has not ended.",
                                                "maxLength": 127
                                            },
                                            "status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "running",
                                                    "complete"
                                                ],
                                                "description": "The status of a Session."
                                            },
                                            "error": {
                                                "type": "string",
                                                "nullable": true,
                                                "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                                "maxLength": 65536
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "example": "session-20190728032600"
                                        },
                                        "tenant": {
                                            "type": "string",
                                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                            "nullable": true,
                                            "readOnly": true,
                                            "maxLength": 127
                                        },
                                        "operation": {
                                            "type": "string",
                                            "enum": [
                                                "boot",
                                                "reboot",
                                                "shutdown"
                                            ],
                                            "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                        },
                                        "template_name": {
                                            "type": "string",
                                            "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "example": "cle-1.0.0"
                                        },
                                        "limit": {
                                            "type": "string",
                                            "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                            "maxLength": 524288,
                                            "nullable": true,
                                            "default": ""
                                        },
                                        "stage": {
                                            "type": "boolean",
                                            "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                                        },
                                        "components": {
                                            "type": "string",
                                            "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                            "maxLength": 524288
                                        },
                                        "include_disabled": {
                                            "type": "boolean",
                                            "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                                        },
                                        "status": {
                                            "type": "object",
                                            "description": "Information on the status of a Session.\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "When the Session was created.",
                                                    "maxLength": 127
                                                },
                                                "end_time": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "When the Session was completed. A null value means the Session has not ended.",
                                                    "maxLength": 127
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "pending",
                                                        "running",
                                                        "complete"
                                                    ],
                                                    "description": "The status of a Session."
                                                },
                                                "error": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                                    "maxLength": 65536
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "name",
                                        "operation",
                                        "template_name"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Session by ID",
                "description": "Delete Session by Session ID.",
                "tags": [
                    "v2",
                    "sessions"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessions",
                "operationId": "delete_v2_session",
                "responses": {
                    "204": {
                        "description": "The resource was deleted."
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/sessions/{session_id}/status": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "description": "Session ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                        "minLength": 1,
                        "maxLength": 127,
                        "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                        "example": "session-20190728032600"
                    }
                },
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "get": {
                "summary": "Get Session extended status information by ID",
                "description": "Get Session extended status information by ID",
                "tags": [
                    "v2",
                    "sessions"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessions",
                "operationId": "get_v2_session_status",
                "responses": {
                    "200": {
                        "description": "Session status details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Detailed information on the status of a Session.\n",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "pending",
                                                "running",
                                                "complete"
                                            ],
                                            "description": "The status of a Session."
                                        },
                                        "managed_components_count": {
                                            "type": "integer",
                                            "description": "The count of Components currently managed by this Session\n"
                                        },
                                        "phases": {
                                            "type": "object",
                                            "description": "Detailed information on the phases of a Session.\n",
                                            "properties": {
                                                "percent_complete": {
                                                    "type": "number",
                                                    "description": "The percent of Components currently in a completed/stable state\n"
                                                },
                                                "percent_powering_on": {
                                                    "type": "number",
                                                    "description": "The percent of Components currently in the powering-on phase\n"
                                                },
                                                "percent_powering_off": {
                                                    "type": "number",
                                                    "description": "The percent of Components currently in the powering-off phase\n"
                                                },
                                                "percent_configuring": {
                                                    "type": "number",
                                                    "description": "The percent of Components currently in the configuring phase\n"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "percent_successful": {
                                            "type": "number",
                                            "description": "The percent of Components currently in a successful state\n"
                                        },
                                        "percent_failed": {
                                            "type": "number",
                                            "description": "The percent of Components currently in a failed state\n"
                                        },
                                        "percent_staged": {
                                            "type": "number",
                                            "description": "The percent of Components currently still staged for this Session\n"
                                        },
                                        "error_summary": {
                                            "type": "object",
                                            "description": "A summary of the errors currently listed by all Components\n"
                                        },
                                        "timing": {
                                            "type": "object",
                                            "description": "Detailed information on the timing of a Session.\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "When the Session was created.",
                                                    "maxLength": 127
                                                },
                                                "end_time": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "When the Session was completed. A null value means the Session has not ended.",
                                                    "maxLength": 127
                                                },
                                                "duration": {
                                                    "type": "string",
                                                    "description": "The current duration of the ongoing Session or final duration of the completed Session.\n"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Saves the current Session to database",
                "tags": [
                    "v2",
                    "sessions",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.sessions",
                "description": "Saves the current Session to database.  For use at Session completion.",
                "operationId": "save_v2_session_status",
                "responses": {
                    "200": {
                        "description": "Session details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A Session object\n\n## Link Relationships\n\n* self : The Session object\n",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "example": "session-20190728032600"
                                        },
                                        "tenant": {
                                            "type": "string",
                                            "description": "Name of the tenant that owns this resource. Only used in environments\nwith multi-tenancy enabled. An empty string or null value means the resource\nis not owned by a tenant. The absence of this field from a resource indicates\nthe same.\n",
                                            "nullable": true,
                                            "readOnly": true,
                                            "maxLength": 127
                                        },
                                        "operation": {
                                            "type": "string",
                                            "enum": [
                                                "boot",
                                                "reboot",
                                                "shutdown"
                                            ],
                                            "description": "A Session represents a desired state that is being applied to a group\nof Components.  Sessions run until all Components it manages have\neither been disabled due to completion, or until all Components are\nmanaged by other newer Sessions.\n\nOperation -- An operation to perform on Components in this Session.\n    Boot                 Applies the Template to the Components and boots/reboots if necessary.\n    Reboot               Applies the Template to the Components; guarantees a reboot.\n    Shutdown             Power down Components that are on.\n"
                                        },
                                        "template_name": {
                                            "type": "string",
                                            "description": "Name of the Session Template.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                                            "minLength": 1,
                                            "maxLength": 127,
                                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                                            "example": "cle-1.0.0"
                                        },
                                        "limit": {
                                            "type": "string",
                                            "description": "A comma-separated list of nodes, groups, or roles to which the Session\nwill be limited. Components are treated as OR operations unless\npreceded by \"&\" for AND or \"!\" for NOT.\n\nAlternatively, the limit can be set to \"*\", which means no limit.\n\nAn empty string or null value is the same as specifying no limit.\n\nIf the reject_nids option is enabled, then Session creation will fail if its\nlimit appears to contain a NID value.\n",
                                            "maxLength": 524288,
                                            "nullable": true,
                                            "default": ""
                                        },
                                        "stage": {
                                            "type": "boolean",
                                            "description": "Set to stage a Session which will not immediately change the state of any Components.\nThe \"applystaged\" endpoint can be called at a later time to trigger the start of this Session.\n"
                                        },
                                        "components": {
                                            "type": "string",
                                            "description": "A comma-separated list of nodes, representing the initial list of nodes\nthe Session should operate against.  The list will remain even if\nother Sessions have taken over management of the nodes.\n",
                                            "maxLength": 524288
                                        },
                                        "include_disabled": {
                                            "type": "boolean",
                                            "description": "Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).\n"
                                        },
                                        "status": {
                                            "type": "object",
                                            "description": "Information on the status of a Session.\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "When the Session was created.",
                                                    "maxLength": 127
                                                },
                                                "end_time": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "When the Session was completed. A null value means the Session has not ended.",
                                                    "maxLength": 127
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "pending",
                                                        "running",
                                                        "complete"
                                                    ],
                                                    "description": "The status of a Session."
                                                },
                                                "error": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "Error which prevented the Session from running.\nA null value means the Session has not encountered an error.\n",
                                                    "maxLength": 65536
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "name",
                                        "operation",
                                        "template_name"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/components": {
            "parameters": [
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "get": {
                "summary": "Retrieve the state of a collection of Components",
                "parameters": [
                    {
                        "name": "ids",
                        "schema": {
                            "type": "string",
                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                            "minLength": 1,
                            "maxLength": 127
                        },
                        "in": "query",
                        "description": "Retrieve the Components with the given ID\n(e.g. xname for hardware Components). Can be chained\nfor selecting groups of Components."
                    },
                    {
                        "name": "session",
                        "schema": {
                            "type": "string",
                            "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                            "minLength": 1,
                            "maxLength": 127,
                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                            "example": "session-20190728032600"
                        },
                        "in": "query",
                        "description": "Retrieve the Components with the given Session ID."
                    },
                    {
                        "name": "staged_session",
                        "schema": {
                            "type": "string",
                            "description": "Name of the Session.\n\nThe name must:\n* Use only letters, digits, periods (.), dashes (-), and underscores (_).\n* Begin and end with a letter or digit.\n",
                            "minLength": 1,
                            "maxLength": 127,
                            "pattern": "^[a-zA-Z0-9](?:[-._a-zA-Z0-9]{0,125}[a-zA-Z0-9])?$",
                            "example": "session-20190728032600"
                        },
                        "in": "query",
                        "description": "Retrieve the Components with the given staged Session ID."
                    },
                    {
                        "name": "enabled",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query",
                        "description": "Retrieve the Components with the \"enabled\" state."
                    },
                    {
                        "name": "phase",
                        "schema": {
                            "type": "string",
                            "description": "The current phase of the Component in the boot process.",
                            "maxLength": 128
                        },
                        "in": "query",
                        "description": "Retrieve the Components in the given phase."
                    },
                    {
                        "name": "status",
                        "schema": {
                            "type": "string",
                            "maxLength": 512
                        },
                        "in": "query",
                        "description": "Retrieve the Components with the given status."
                    }
                ],
                "description": "Retrieve the full collection of Components in the form of a\nComponentArray. Full results can also be filtered by query\nparameters. Only the first filter parameter of each type is\nused and the parameters are applied in an AND fashion.\nIf the collection is empty or the filters have no match, an\nempty array is returned.",
                "tags": [
                    "v2",
                    "components"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.components",
                "operationId": "get_v2_components",
                "responses": {
                    "200": {
                        "description": "A collection of Component states",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An array of Component states.",
                                    "type": "array",
                                    "items": {
                                        "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "description": "The Component's ID. (e.g. xname for hardware Components)",
                                                "minLength": 1,
                                                "maxLength": 127
                                            },
                                            "actual_state": {
                                                "description": "The actual boot artifacts and configuration for a Component\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "bss_token": {
                                                        "type": "string",
                                                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                        "maxLength": 65535
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "desired_state": {
                                                "description": "The desired boot artifacts and configuration for a Component\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "configuration": {
                                                        "type": "string",
                                                        "description": "The name of configuration to be applied.",
                                                        "example": "compute-23.4.0",
                                                        "maxLength": 127
                                                    },
                                                    "bss_token": {
                                                        "type": "string",
                                                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                        "maxLength": 65535
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "staged_state": {
                                                "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "configuration": {
                                                        "type": "string",
                                                        "description": "The name of configuration to be applied.",
                                                        "example": "compute-23.4.0",
                                                        "maxLength": 127
                                                    },
                                                    "session": {
                                                        "type": "string",
                                                        "description": "Name of the Session or an empty string."
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "last_action": {
                                                "description": "Information on the most recent action taken against the node.\n",
                                                "type": "object",
                                                "properties": {
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    },
                                                    "action": {
                                                        "type": "string",
                                                        "description": "A description of the most recent operator/action to impact the Component.",
                                                        "maxLength": 1024
                                                    },
                                                    "failed": {
                                                        "type": "boolean",
                                                        "description": "Denotes if the last action failed to accomplish its task"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "event_stats": {
                                                "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                                "type": "object",
                                                "properties": {
                                                    "power_on_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    },
                                                    "power_off_graceful_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    },
                                                    "power_off_forceful_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "status": {
                                                "description": "Status information for the Component",
                                                "type": "object",
                                                "properties": {
                                                    "phase": {
                                                        "type": "string",
                                                        "description": "The current phase of the Component in the boot process.",
                                                        "maxLength": 128
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "description": "The current status of the Component.  More detailed than phase.",
                                                        "readOnly": true
                                                    },
                                                    "status_override": {
                                                        "type": "string",
                                                        "description": "If set, this will override the status value.",
                                                        "maxLength": 65536
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "enabled": {
                                                "type": "boolean",
                                                "description": "A flag indicating if actions should be taken for this Component."
                                            },
                                            "error": {
                                                "type": "string",
                                                "description": "A description of the most recent error to impact the Component.",
                                                "maxLength": 65536
                                            },
                                            "session": {
                                                "type": "string",
                                                "description": "Name of the Session or an empty string."
                                            },
                                            "retry_policy": {
                                                "type": "integer",
                                                "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                                "example": 1,
                                                "minimum": 0,
                                                "maximum": 1048576
                                            }
                                        },
                                        "additionalProperties": false,
                                        "minProperties": 1
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Add or Replace a collection of Components",
                "description": "Update the state for a collection of Components in the BOS database",
                "tags": [
                    "v2",
                    "components",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.components",
                "operationId": "put_v2_components",
                "requestBody": {
                    "description": "The state for an array of Components",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "An array of Component states with associated Ids.",
                                "type": "array",
                                "items": {
                                    "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                                            "minLength": 1,
                                            "maxLength": 127
                                        },
                                        "actual_state": {
                                            "description": "The actual boot artifacts and configuration for a Component\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "bss_token": {
                                                    "type": "string",
                                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                    "maxLength": 65535
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "desired_state": {
                                            "description": "The desired boot artifacts and configuration for a Component\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                },
                                                "bss_token": {
                                                    "type": "string",
                                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                    "maxLength": 65535
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "staged_state": {
                                            "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                },
                                                "session": {
                                                    "type": "string",
                                                    "description": "Name of the Session or an empty string."
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "last_action": {
                                            "description": "Information on the most recent action taken against the node.\n",
                                            "type": "object",
                                            "properties": {
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                },
                                                "action": {
                                                    "type": "string",
                                                    "description": "A description of the most recent operator/action to impact the Component.",
                                                    "maxLength": 1024
                                                },
                                                "failed": {
                                                    "type": "boolean",
                                                    "description": "Denotes if the last action failed to accomplish its task"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "event_stats": {
                                            "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                            "type": "object",
                                            "properties": {
                                                "power_on_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                },
                                                "power_off_graceful_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                },
                                                "power_off_forceful_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "status": {
                                            "description": "Status information for the Component",
                                            "type": "object",
                                            "properties": {
                                                "phase": {
                                                    "type": "string",
                                                    "description": "The current phase of the Component in the boot process.",
                                                    "maxLength": 128
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "description": "The current status of the Component.  More detailed than phase.",
                                                    "readOnly": true
                                                },
                                                "status_override": {
                                                    "type": "string",
                                                    "description": "If set, this will override the status value.",
                                                    "maxLength": 65536
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "A flag indicating if actions should be taken for this Component."
                                        },
                                        "error": {
                                            "type": "string",
                                            "description": "A description of the most recent error to impact the Component.",
                                            "maxLength": 65536
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Name of the Session or an empty string."
                                        },
                                        "retry_policy": {
                                            "type": "integer",
                                            "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                            "example": 1,
                                            "minimum": 0,
                                            "maximum": 1048576
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "id"
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A collection of Component states",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An array of Component states.",
                                    "type": "array",
                                    "items": {
                                        "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "description": "The Component's ID. (e.g. xname for hardware Components)",
                                                "minLength": 1,
                                                "maxLength": 127
                                            },
                                            "actual_state": {
                                                "description": "The actual boot artifacts and configuration for a Component\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "bss_token": {
                                                        "type": "string",
                                                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                        "maxLength": 65535
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "desired_state": {
                                                "description": "The desired boot artifacts and configuration for a Component\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "configuration": {
                                                        "type": "string",
                                                        "description": "The name of configuration to be applied.",
                                                        "example": "compute-23.4.0",
                                                        "maxLength": 127
                                                    },
                                                    "bss_token": {
                                                        "type": "string",
                                                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                        "maxLength": 65535
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "staged_state": {
                                                "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "configuration": {
                                                        "type": "string",
                                                        "description": "The name of configuration to be applied.",
                                                        "example": "compute-23.4.0",
                                                        "maxLength": 127
                                                    },
                                                    "session": {
                                                        "type": "string",
                                                        "description": "Name of the Session or an empty string."
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "last_action": {
                                                "description": "Information on the most recent action taken against the node.\n",
                                                "type": "object",
                                                "properties": {
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    },
                                                    "action": {
                                                        "type": "string",
                                                        "description": "A description of the most recent operator/action to impact the Component.",
                                                        "maxLength": 1024
                                                    },
                                                    "failed": {
                                                        "type": "boolean",
                                                        "description": "Denotes if the last action failed to accomplish its task"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "event_stats": {
                                                "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                                "type": "object",
                                                "properties": {
                                                    "power_on_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    },
                                                    "power_off_graceful_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    },
                                                    "power_off_forceful_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "status": {
                                                "description": "Status information for the Component",
                                                "type": "object",
                                                "properties": {
                                                    "phase": {
                                                        "type": "string",
                                                        "description": "The current phase of the Component in the boot process.",
                                                        "maxLength": 128
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "description": "The current status of the Component.  More detailed than phase.",
                                                        "readOnly": true
                                                    },
                                                    "status_override": {
                                                        "type": "string",
                                                        "description": "If set, this will override the status value.",
                                                        "maxLength": 65536
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "enabled": {
                                                "type": "boolean",
                                                "description": "A flag indicating if actions should be taken for this Component."
                                            },
                                            "error": {
                                                "type": "string",
                                                "description": "A description of the most recent error to impact the Component.",
                                                "maxLength": 65536
                                            },
                                            "session": {
                                                "type": "string",
                                                "description": "Name of the Session or an empty string."
                                            },
                                            "retry_policy": {
                                                "type": "integer",
                                                "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                                "example": 1,
                                                "minimum": 0,
                                                "maximum": 1048576
                                            }
                                        },
                                        "additionalProperties": false,
                                        "minProperties": 1
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Update a collection of Components",
                "description": "Update the state for a collection of Components in the BOS database",
                "tags": [
                    "v2",
                    "components"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.components",
                "operationId": "patch_v2_components",
                "requestBody": {
                    "description": "The state for an array of Components",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A collection of Component states",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An array of Component states.",
                                    "type": "array",
                                    "items": {
                                        "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "description": "The Component's ID. (e.g. xname for hardware Components)",
                                                "minLength": 1,
                                                "maxLength": 127
                                            },
                                            "actual_state": {
                                                "description": "The actual boot artifacts and configuration for a Component\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "bss_token": {
                                                        "type": "string",
                                                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                        "maxLength": 65535
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "desired_state": {
                                                "description": "The desired boot artifacts and configuration for a Component\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "configuration": {
                                                        "type": "string",
                                                        "description": "The name of configuration to be applied.",
                                                        "example": "compute-23.4.0",
                                                        "maxLength": 127
                                                    },
                                                    "bss_token": {
                                                        "type": "string",
                                                        "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                        "maxLength": 65535
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "staged_state": {
                                                "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                                "type": "object",
                                                "properties": {
                                                    "boot_artifacts": {
                                                        "description": "A collection of boot artifacts.\n",
                                                        "type": "object",
                                                        "properties": {
                                                            "kernel": {
                                                                "type": "string",
                                                                "description": "A path to the kernel to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                                "maxLength": 4095
                                                            },
                                                            "kernel_parameters": {
                                                                "type": "string",
                                                                "description": "The kernel parameters to use to boot the nodes.",
                                                                "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                                "maxLength": 4096
                                                            },
                                                            "initrd": {
                                                                "type": "string",
                                                                "description": "A path to the initrd to use for booting.",
                                                                "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                                "maxLength": 4095
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "configuration": {
                                                        "type": "string",
                                                        "description": "The name of configuration to be applied.",
                                                        "example": "compute-23.4.0",
                                                        "maxLength": 127
                                                    },
                                                    "session": {
                                                        "type": "string",
                                                        "description": "Name of the Session or an empty string."
                                                    },
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "last_action": {
                                                "description": "Information on the most recent action taken against the node.\n",
                                                "type": "object",
                                                "properties": {
                                                    "last_updated": {
                                                        "type": "string",
                                                        "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                        "example": "2019-07-28T03:26:00Z",
                                                        "format": "date-time",
                                                        "readOnly": true
                                                    },
                                                    "action": {
                                                        "type": "string",
                                                        "description": "A description of the most recent operator/action to impact the Component.",
                                                        "maxLength": 1024
                                                    },
                                                    "failed": {
                                                        "type": "boolean",
                                                        "description": "Denotes if the last action failed to accomplish its task"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "event_stats": {
                                                "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                                "type": "object",
                                                "properties": {
                                                    "power_on_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    },
                                                    "power_off_graceful_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    },
                                                    "power_off_forceful_attempts": {
                                                        "type": "integer",
                                                        "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                        "minimum": 0,
                                                        "maximum": 1048576
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "status": {
                                                "description": "Status information for the Component",
                                                "type": "object",
                                                "properties": {
                                                    "phase": {
                                                        "type": "string",
                                                        "description": "The current phase of the Component in the boot process.",
                                                        "maxLength": 128
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "description": "The current status of the Component.  More detailed than phase.",
                                                        "readOnly": true
                                                    },
                                                    "status_override": {
                                                        "type": "string",
                                                        "description": "If set, this will override the status value.",
                                                        "maxLength": 65536
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "enabled": {
                                                "type": "boolean",
                                                "description": "A flag indicating if actions should be taken for this Component."
                                            },
                                            "error": {
                                                "type": "string",
                                                "description": "A description of the most recent error to impact the Component.",
                                                "maxLength": 65536
                                            },
                                            "session": {
                                                "type": "string",
                                                "description": "Name of the Session or an empty string."
                                            },
                                            "retry_policy": {
                                                "type": "integer",
                                                "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                                "example": 1,
                                                "minimum": 0,
                                                "maximum": 1048576
                                            }
                                        },
                                        "additionalProperties": false,
                                        "minProperties": 1
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/components/{component_id}": {
            "parameters": [
                {
                    "name": "component_id",
                    "in": "path",
                    "description": "Component ID. e.g. xname for hardware Components",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                        "minLength": 1,
                        "maxLength": 127
                    }
                },
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "get": {
                "summary": "Retrieve the state of a single Component",
                "description": "Retrieve the current and desired state of a single Component",
                "tags": [
                    "v2",
                    "components"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.components",
                "operationId": "get_v2_component",
                "responses": {
                    "200": {
                        "description": "A single Component state",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                                            "minLength": 1,
                                            "maxLength": 127
                                        },
                                        "actual_state": {
                                            "description": "The actual boot artifacts and configuration for a Component\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "bss_token": {
                                                    "type": "string",
                                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                    "maxLength": 65535
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "desired_state": {
                                            "description": "The desired boot artifacts and configuration for a Component\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                },
                                                "bss_token": {
                                                    "type": "string",
                                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                    "maxLength": 65535
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "staged_state": {
                                            "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                },
                                                "session": {
                                                    "type": "string",
                                                    "description": "Name of the Session or an empty string."
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "last_action": {
                                            "description": "Information on the most recent action taken against the node.\n",
                                            "type": "object",
                                            "properties": {
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                },
                                                "action": {
                                                    "type": "string",
                                                    "description": "A description of the most recent operator/action to impact the Component.",
                                                    "maxLength": 1024
                                                },
                                                "failed": {
                                                    "type": "boolean",
                                                    "description": "Denotes if the last action failed to accomplish its task"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "event_stats": {
                                            "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                            "type": "object",
                                            "properties": {
                                                "power_on_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                },
                                                "power_off_graceful_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                },
                                                "power_off_forceful_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "status": {
                                            "description": "Status information for the Component",
                                            "type": "object",
                                            "properties": {
                                                "phase": {
                                                    "type": "string",
                                                    "description": "The current phase of the Component in the boot process.",
                                                    "maxLength": 128
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "description": "The current status of the Component.  More detailed than phase.",
                                                    "readOnly": true
                                                },
                                                "status_override": {
                                                    "type": "string",
                                                    "description": "If set, this will override the status value.",
                                                    "maxLength": 65536
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "A flag indicating if actions should be taken for this Component."
                                        },
                                        "error": {
                                            "type": "string",
                                            "description": "A description of the most recent error to impact the Component.",
                                            "maxLength": 65536
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Name of the Session or an empty string."
                                        },
                                        "retry_policy": {
                                            "type": "integer",
                                            "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                            "example": 1,
                                            "minimum": 0,
                                            "maximum": 1048576
                                        }
                                    },
                                    "additionalProperties": false,
                                    "minProperties": 1
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Add or Replace a single Component",
                "description": "Update the state for a given Component in the BOS database",
                "tags": [
                    "v2",
                    "components"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.components",
                "operationId": "put_v2_component",
                "requestBody": {
                    "description": "The state for a single Component",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                                        "minLength": 1,
                                        "maxLength": 127
                                    },
                                    "actual_state": {
                                        "description": "The actual boot artifacts and configuration for a Component\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "bss_token": {
                                                "type": "string",
                                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                "maxLength": 65535
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "desired_state": {
                                        "description": "The desired boot artifacts and configuration for a Component\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            },
                                            "bss_token": {
                                                "type": "string",
                                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                "maxLength": 65535
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "staged_state": {
                                        "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            },
                                            "session": {
                                                "type": "string",
                                                "description": "Name of the Session or an empty string."
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "last_action": {
                                        "description": "Information on the most recent action taken against the node.\n",
                                        "type": "object",
                                        "properties": {
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "A description of the most recent operator/action to impact the Component.",
                                                "maxLength": 1024
                                            },
                                            "failed": {
                                                "type": "boolean",
                                                "description": "Denotes if the last action failed to accomplish its task"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "event_stats": {
                                        "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                        "type": "object",
                                        "properties": {
                                            "power_on_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            },
                                            "power_off_graceful_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            },
                                            "power_off_forceful_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "status": {
                                        "description": "Status information for the Component",
                                        "type": "object",
                                        "properties": {
                                            "phase": {
                                                "type": "string",
                                                "description": "The current phase of the Component in the boot process.",
                                                "maxLength": 128
                                            },
                                            "status": {
                                                "type": "string",
                                                "description": "The current status of the Component.  More detailed than phase.",
                                                "readOnly": true
                                            },
                                            "status_override": {
                                                "type": "string",
                                                "description": "If set, this will override the status value.",
                                                "maxLength": 65536
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "A flag indicating if actions should be taken for this Component."
                                    },
                                    "error": {
                                        "type": "string",
                                        "description": "A description of the most recent error to impact the Component.",
                                        "maxLength": 65536
                                    },
                                    "session": {
                                        "type": "string",
                                        "description": "Name of the Session or an empty string."
                                    },
                                    "retry_policy": {
                                        "type": "integer",
                                        "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                        "example": 1,
                                        "minimum": 0,
                                        "maximum": 1048576
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A single Component state",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                                            "minLength": 1,
                                            "maxLength": 127
                                        },
                                        "actual_state": {
                                            "description": "The actual boot artifacts and configuration for a Component\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "bss_token": {
                                                    "type": "string",
                                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                    "maxLength": 65535
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "desired_state": {
                                            "description": "The desired boot artifacts and configuration for a Component\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                },
                                                "bss_token": {
                                                    "type": "string",
                                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                    "maxLength": 65535
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "staged_state": {
                                            "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                },
                                                "session": {
                                                    "type": "string",
                                                    "description": "Name of the Session or an empty string."
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "last_action": {
                                            "description": "Information on the most recent action taken against the node.\n",
                                            "type": "object",
                                            "properties": {
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                },
                                                "action": {
                                                    "type": "string",
                                                    "description": "A description of the most recent operator/action to impact the Component.",
                                                    "maxLength": 1024
                                                },
                                                "failed": {
                                                    "type": "boolean",
                                                    "description": "Denotes if the last action failed to accomplish its task"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "event_stats": {
                                            "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                            "type": "object",
                                            "properties": {
                                                "power_on_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                },
                                                "power_off_graceful_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                },
                                                "power_off_forceful_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "status": {
                                            "description": "Status information for the Component",
                                            "type": "object",
                                            "properties": {
                                                "phase": {
                                                    "type": "string",
                                                    "description": "The current phase of the Component in the boot process.",
                                                    "maxLength": 128
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "description": "The current status of the Component.  More detailed than phase.",
                                                    "readOnly": true
                                                },
                                                "status_override": {
                                                    "type": "string",
                                                    "description": "If set, this will override the status value.",
                                                    "maxLength": 65536
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "A flag indicating if actions should be taken for this Component."
                                        },
                                        "error": {
                                            "type": "string",
                                            "description": "A description of the most recent error to impact the Component.",
                                            "maxLength": 65536
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Name of the Session or an empty string."
                                        },
                                        "retry_policy": {
                                            "type": "integer",
                                            "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                            "example": 1,
                                            "minimum": 0,
                                            "maximum": 1048576
                                        }
                                    },
                                    "additionalProperties": false,
                                    "minProperties": 1
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update a single Component",
                "description": "Update the state for a given Component in the BOS database",
                "tags": [
                    "v2",
                    "components"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.components",
                "operationId": "patch_v2_component",
                "requestBody": {
                    "description": "The state for a single Component",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The Component's ID. (e.g. xname for hardware Components)",
                                        "minLength": 1,
                                        "maxLength": 127
                                    },
                                    "actual_state": {
                                        "description": "The actual boot artifacts and configuration for a Component\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "bss_token": {
                                                "type": "string",
                                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                "maxLength": 65535
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "desired_state": {
                                        "description": "The desired boot artifacts and configuration for a Component\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            },
                                            "bss_token": {
                                                "type": "string",
                                                "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                "maxLength": 65535
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "staged_state": {
                                        "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                        "type": "object",
                                        "properties": {
                                            "boot_artifacts": {
                                                "description": "A collection of boot artifacts.\n",
                                                "type": "object",
                                                "properties": {
                                                    "kernel": {
                                                        "type": "string",
                                                        "description": "A path to the kernel to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                        "maxLength": 4095
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.",
                                                        "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                        "maxLength": 4096
                                                    },
                                                    "initrd": {
                                                        "type": "string",
                                                        "description": "A path to the initrd to use for booting.",
                                                        "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                        "maxLength": 4095
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "configuration": {
                                                "type": "string",
                                                "description": "The name of configuration to be applied.",
                                                "example": "compute-23.4.0",
                                                "maxLength": 127
                                            },
                                            "session": {
                                                "type": "string",
                                                "description": "Name of the Session or an empty string."
                                            },
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "last_action": {
                                        "description": "Information on the most recent action taken against the node.\n",
                                        "type": "object",
                                        "properties": {
                                            "last_updated": {
                                                "type": "string",
                                                "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                "example": "2019-07-28T03:26:00Z",
                                                "format": "date-time",
                                                "readOnly": true
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "A description of the most recent operator/action to impact the Component.",
                                                "maxLength": 1024
                                            },
                                            "failed": {
                                                "type": "boolean",
                                                "description": "Denotes if the last action failed to accomplish its task"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "event_stats": {
                                        "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                        "type": "object",
                                        "properties": {
                                            "power_on_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            },
                                            "power_off_graceful_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            },
                                            "power_off_forceful_attempts": {
                                                "type": "integer",
                                                "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                "minimum": 0,
                                                "maximum": 1048576
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "status": {
                                        "description": "Status information for the Component",
                                        "type": "object",
                                        "properties": {
                                            "phase": {
                                                "type": "string",
                                                "description": "The current phase of the Component in the boot process.",
                                                "maxLength": 128
                                            },
                                            "status": {
                                                "type": "string",
                                                "description": "The current status of the Component.  More detailed than phase.",
                                                "readOnly": true
                                            },
                                            "status_override": {
                                                "type": "string",
                                                "description": "If set, this will override the status value.",
                                                "maxLength": 65536
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "A flag indicating if actions should be taken for this Component."
                                    },
                                    "error": {
                                        "type": "string",
                                        "description": "A description of the most recent error to impact the Component.",
                                        "maxLength": 65536
                                    },
                                    "session": {
                                        "type": "string",
                                        "description": "Name of the Session or an empty string."
                                    },
                                    "retry_policy": {
                                        "type": "integer",
                                        "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                        "example": 1,
                                        "minimum": 0,
                                        "maximum": 1048576
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A single Component state",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The current and desired artifacts state for a Component, and\nthe Session responsible for the Component's current state.\n",
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                                            "minLength": 1,
                                            "maxLength": 127
                                        },
                                        "actual_state": {
                                            "description": "The actual boot artifacts and configuration for a Component\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "bss_token": {
                                                    "type": "string",
                                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                    "maxLength": 65535
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "desired_state": {
                                            "description": "The desired boot artifacts and configuration for a Component\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                },
                                                "bss_token": {
                                                    "type": "string",
                                                    "description": "A token received from the node identifying the boot artifacts.\nFor BOS use-only, users should not set this field. It will be overwritten.\n",
                                                    "maxLength": 65535
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "staged_state": {
                                            "description": "The staged boot artifacts and configuration for a Component. Optionally, a Session\nmay be set which can be triggered at a later time against this Component.\n",
                                            "type": "object",
                                            "properties": {
                                                "boot_artifacts": {
                                                    "description": "A collection of boot artifacts.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "kernel": {
                                                            "type": "string",
                                                            "description": "A path to the kernel to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel",
                                                            "maxLength": 4095
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.",
                                                            "example": "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}",
                                                            "maxLength": 4096
                                                        },
                                                        "initrd": {
                                                            "type": "string",
                                                            "description": "A path to the initrd to use for booting.",
                                                            "example": "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd",
                                                            "maxLength": 4095
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "configuration": {
                                                    "type": "string",
                                                    "description": "The name of configuration to be applied.",
                                                    "example": "compute-23.4.0",
                                                    "maxLength": 127
                                                },
                                                "session": {
                                                    "type": "string",
                                                    "description": "Name of the Session or an empty string."
                                                },
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "last_action": {
                                            "description": "Information on the most recent action taken against the node.\n",
                                            "type": "object",
                                            "properties": {
                                                "last_updated": {
                                                    "type": "string",
                                                    "description": "The date/time when the state was last updated in RFC 3339 format.",
                                                    "example": "2019-07-28T03:26:00Z",
                                                    "format": "date-time",
                                                    "readOnly": true
                                                },
                                                "action": {
                                                    "type": "string",
                                                    "description": "A description of the most recent operator/action to impact the Component.",
                                                    "maxLength": 1024
                                                },
                                                "failed": {
                                                    "type": "boolean",
                                                    "description": "Denotes if the last action failed to accomplish its task"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "event_stats": {
                                            "description": "Information on the most recent attempt to return the node to its desired state.\n",
                                            "type": "object",
                                            "properties": {
                                                "power_on_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-on since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                },
                                                "power_off_graceful_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-off gracefully since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                },
                                                "power_off_forceful_attempts": {
                                                    "type": "integer",
                                                    "description": "How many attempts have been made to power-off forcefully since the last time the node was in the desired state.",
                                                    "minimum": 0,
                                                    "maximum": 1048576
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "status": {
                                            "description": "Status information for the Component",
                                            "type": "object",
                                            "properties": {
                                                "phase": {
                                                    "type": "string",
                                                    "description": "The current phase of the Component in the boot process.",
                                                    "maxLength": 128
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "description": "The current status of the Component.  More detailed than phase.",
                                                    "readOnly": true
                                                },
                                                "status_override": {
                                                    "type": "string",
                                                    "description": "If set, this will override the status value.",
                                                    "maxLength": 65536
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "A flag indicating if actions should be taken for this Component."
                                        },
                                        "error": {
                                            "type": "string",
                                            "description": "A description of the most recent error to impact the Component.",
                                            "maxLength": 65536
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Name of the Session or an empty string."
                                        },
                                        "retry_policy": {
                                            "type": "integer",
                                            "description": "The maximum number attempts per action when actions fail.\nDefaults to the global default_retry_policy if not set\n",
                                            "example": 1,
                                            "minimum": 0,
                                            "maximum": 1048576
                                        }
                                    },
                                    "additionalProperties": false,
                                    "minProperties": 1
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The update was not allowed due to a conflict.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a single Component",
                "description": "Delete the given Component",
                "tags": [
                    "v2",
                    "components",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.components",
                "operationId": "delete_v2_component",
                "responses": {
                    "204": {
                        "description": "The resource was deleted."
                    },
                    "404": {
                        "description": "The resource was not found.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/applystaged": {
            "parameters": [
                {
                    "name": "Cray-Tenant-Name",
                    "in": "header",
                    "description": "Tenant name.\n\nRequests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.\n\nRequests with an empty tenant name, or that omit this parameter, will have no such context restrictions.\n",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "description": "Name of a tenant. Used for multi-tenancy. An empty string means no tenant.",
                        "example": "vcluster-my-tenant1",
                        "maxLength": 127
                    }
                }
            ],
            "post": {
                "summary": "Start a staged Session for the specified Components",
                "description": "Given a list of xnames, this will trigger the start of any Sessions\nstaged for those Components.  Components without a staged Session\nwill be ignored, and a list all Components that are acted on will\nbe returned in the response.\n",
                "tags": [
                    "v2",
                    "applystaged"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.components",
                "operationId": "post_v2_apply_staged",
                "requestBody": {
                    "description": "A list of xnames that should have their staged Session applied.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "A list of Components that should have their staged Session applied.\n",
                                "type": "object",
                                "properties": {
                                    "xnames": {
                                        "description": "A list of Component IDs (xnames)",
                                        "type": "array",
                                        "maxItems": 32768,
                                        "items": {
                                            "type": "string",
                                            "description": "The Component's ID. (e.g. xname for hardware Components)",
                                            "minLength": 1,
                                            "maxLength": 127
                                        }
                                    }
                                },
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A list of xnames that should have their staged Session applied.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Mapping from Component staged Session statuses to Components with that status.\n",
                                    "type": "object",
                                    "properties": {
                                        "succeeded": {
                                            "description": "A list of Component IDs (xnames)",
                                            "type": "array",
                                            "maxItems": 32768,
                                            "items": {
                                                "type": "string",
                                                "description": "The Component's ID. (e.g. xname for hardware Components)",
                                                "minLength": 1,
                                                "maxLength": 127
                                            }
                                        },
                                        "failed": {
                                            "description": "A list of Component IDs (xnames)",
                                            "type": "array",
                                            "maxItems": 32768,
                                            "items": {
                                                "type": "string",
                                                "description": "The Component's ID. (e.g. xname for hardware Components)",
                                                "minLength": 1,
                                                "maxLength": 127
                                            }
                                        },
                                        "ignored": {
                                            "description": "A list of Component IDs (xnames)",
                                            "type": "array",
                                            "maxItems": 32768,
                                            "items": {
                                                "type": "string",
                                                "description": "The Component's ID. (e.g. xname for hardware Components)",
                                                "minLength": 1,
                                                "maxLength": 127
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/options": {
            "get": {
                "summary": "Retrieve the BOS service options",
                "description": "Retrieve the list of BOS service options.",
                "tags": [
                    "options"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.options",
                "operationId": "get_v2_options",
                "responses": {
                    "200": {
                        "description": "A collection of service-wide options",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Options for the Boot Orchestration Service.\n",
                                    "type": "object",
                                    "properties": {
                                        "cfs_read_timeout": {
                                            "type": "integer",
                                            "description": "The amount of time (in seconds) to wait for a response before timing out a request to CFS\n",
                                            "example": 20,
                                            "minimum": 10,
                                            "maximum": 86400
                                        },
                                        "cleanup_completed_session_ttl": {
                                            "type": "string",
                                            "description": "Delete complete Sessions that are older than cleanup_completed_session_ttl (in minutes, hours, days, or weeks).\n0 disables cleanup behavior.\n",
                                            "example": "3d",
                                            "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                            "minLength": 1,
                                            "maxLength": 8
                                        },
                                        "clear_stage": {
                                            "type": "boolean",
                                            "description": "Allows a Component's staged information to be cleared when the requested staging action has been started. Defaults to false."
                                        },
                                        "component_actual_state_ttl": {
                                            "type": "string",
                                            "description": "The maximum amount of time a Component's actual state is considered valid (in minutes, hours, days, or weeks).\n0 disables cleanup behavior for newly booted nodes and instructs bos-state-reporter to report once instead of periodically.\n",
                                            "example": "6h",
                                            "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                            "minLength": 1,
                                            "maxLength": 8
                                        },
                                        "default_retry_policy": {
                                            "type": "integer",
                                            "description": "The default maximum number attempts per node for failed actions.",
                                            "example": 1,
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "disable_components_on_completion": {
                                            "type": "boolean",
                                            "description": "If true, when a Session has brought a Component to its desired state, that Component will be marked as disabled in BOS.\nIf false, BOS will continue to maintain the state of the nodes declaratively, even after a Session finishes.\n"
                                        },
                                        "discovery_frequency": {
                                            "type": "integer",
                                            "description": "How frequently the BOS discovery agent syncs new Components from HSM (in seconds)",
                                            "minimum": 0,
                                            "maximum": 33554432
                                        },
                                        "ims_errors_fatal": {
                                            "type": "boolean",
                                            "description": "This option modifies how BOS behaves when validating the architecture of a boot image in a boot set.\nSpecifically, this option comes into play when BOS needs data from IMS in order to do this validation, but\nIMS is unreachable.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this.\n"
                                        },
                                        "ims_images_must_exist": {
                                            "type": "boolean",
                                            "description": "This option modifies how BOS behaves when validating a boot set whose boot image appears to be from IMS.\nSpecifically, this option comes into play when the image does not actually exist in IMS.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this. Note that if ims_images_must_exist is true but ims_errors_fatal is false, then\na failure to determine whether or not an image is in IMS will NOT result in a fatal error.\n"
                                        },
                                        "logging_level": {
                                            "type": "string",
                                            "description": "The logging level for all BOS services",
                                            "pattern": "^([dD][eE][bB][uU][gG]|[iI][nN][fF][oO]|[wW][aA][rR][nN][iI][nN][gG]|[eE][rR][rR][oO][rR]|[cC][rR][iI][tT][iI][cC][aA][lL])$"
                                        },
                                        "max_boot_wait_time": {
                                            "type": "integer",
                                            "description": "How long BOS will wait for a node to boot into a usable state before rebooting it again (in seconds)",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "max_component_batch_size": {
                                            "type": "integer",
                                            "description": "The maximum number of Components that a BOS operator will process at once. 0 means no limit.",
                                            "example": 1000,
                                            "minimum": 0,
                                            "maximum": 131071
                                        },
                                        "max_power_off_wait_time": {
                                            "type": "integer",
                                            "description": "How long BOS will wait for a node to power off before forcefully powering off (in seconds)",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "max_power_on_wait_time": {
                                            "type": "integer",
                                            "description": "How long BOS will wait for a node to power on before calling power on again (in seconds)",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "polling_frequency": {
                                            "type": "integer",
                                            "description": "How frequently the BOS operators check Component state for needed actions (in seconds)",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "reject_nids": {
                                            "type": "boolean",
                                            "description": "If true, then BOS will attempt to prevent Sessions and Session Templates that reference NIDs (which BOS does not support).\nSpecifically, if this option is true, then:\n- When creating a Session, if the Session limit or a Session Template node list appear to contain NID values, then Session creation will fail.\n- When creating a Session Template, if a node list appears to contain a NID value, then the Session Template creation will fail.\n- When validating an existing Session Template, if a node list appears to contain a NID value, then the validation will report an error.\n\nThis option does NOT have an effect on Sessions that were created prior to it being enabled (even if they have not yet started).\n"
                                        },
                                        "session_limit_required": {
                                            "type": "boolean",
                                            "description": "If true, Sessions cannot be created without specifying the limit parameter."
                                        }
                                    },
                                    "additionalProperties": true,
                                    "minProperties": 1,
                                    "maxProperties": 1024
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update BOS service options",
                "description": "Update one or more of the BOS service options.",
                "tags": [
                    "v2",
                    "options"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.options",
                "operationId": "patch_v2_options",
                "requestBody": {
                    "description": "Service-wide options",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Options for the Boot Orchestration Service.\n",
                                "type": "object",
                                "properties": {
                                    "cfs_read_timeout": {
                                        "type": "integer",
                                        "description": "The amount of time (in seconds) to wait for a response before timing out a request to CFS\n",
                                        "example": 20,
                                        "minimum": 10,
                                        "maximum": 86400
                                    },
                                    "cleanup_completed_session_ttl": {
                                        "type": "string",
                                        "description": "Delete complete Sessions that are older than cleanup_completed_session_ttl (in minutes, hours, days, or weeks).\n0 disables cleanup behavior.\n",
                                        "example": "3d",
                                        "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                        "minLength": 1,
                                        "maxLength": 8
                                    },
                                    "clear_stage": {
                                        "type": "boolean",
                                        "description": "Allows a Component's staged information to be cleared when the requested staging action has been started. Defaults to false."
                                    },
                                    "component_actual_state_ttl": {
                                        "type": "string",
                                        "description": "The maximum amount of time a Component's actual state is considered valid (in minutes, hours, days, or weeks).\n0 disables cleanup behavior for newly booted nodes and instructs bos-state-reporter to report once instead of periodically.\n",
                                        "example": "6h",
                                        "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                        "minLength": 1,
                                        "maxLength": 8
                                    },
                                    "default_retry_policy": {
                                        "type": "integer",
                                        "description": "The default maximum number attempts per node for failed actions.",
                                        "example": 1,
                                        "minimum": 0,
                                        "maximum": 1048576
                                    },
                                    "disable_components_on_completion": {
                                        "type": "boolean",
                                        "description": "If true, when a Session has brought a Component to its desired state, that Component will be marked as disabled in BOS.\nIf false, BOS will continue to maintain the state of the nodes declaratively, even after a Session finishes.\n"
                                    },
                                    "discovery_frequency": {
                                        "type": "integer",
                                        "description": "How frequently the BOS discovery agent syncs new Components from HSM (in seconds)",
                                        "minimum": 0,
                                        "maximum": 33554432
                                    },
                                    "ims_errors_fatal": {
                                        "type": "boolean",
                                        "description": "This option modifies how BOS behaves when validating the architecture of a boot image in a boot set.\nSpecifically, this option comes into play when BOS needs data from IMS in order to do this validation, but\nIMS is unreachable.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this.\n"
                                    },
                                    "ims_images_must_exist": {
                                        "type": "boolean",
                                        "description": "This option modifies how BOS behaves when validating a boot set whose boot image appears to be from IMS.\nSpecifically, this option comes into play when the image does not actually exist in IMS.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this. Note that if ims_images_must_exist is true but ims_errors_fatal is false, then\na failure to determine whether or not an image is in IMS will NOT result in a fatal error.\n"
                                    },
                                    "logging_level": {
                                        "type": "string",
                                        "description": "The logging level for all BOS services",
                                        "pattern": "^([dD][eE][bB][uU][gG]|[iI][nN][fF][oO]|[wW][aA][rR][nN][iI][nN][gG]|[eE][rR][rR][oO][rR]|[cC][rR][iI][tT][iI][cC][aA][lL])$"
                                    },
                                    "max_boot_wait_time": {
                                        "type": "integer",
                                        "description": "How long BOS will wait for a node to boot into a usable state before rebooting it again (in seconds)",
                                        "minimum": 0,
                                        "maximum": 1048576
                                    },
                                    "max_component_batch_size": {
                                        "type": "integer",
                                        "description": "The maximum number of Components that a BOS operator will process at once. 0 means no limit.",
                                        "example": 1000,
                                        "minimum": 0,
                                        "maximum": 131071
                                    },
                                    "max_power_off_wait_time": {
                                        "type": "integer",
                                        "description": "How long BOS will wait for a node to power off before forcefully powering off (in seconds)",
                                        "minimum": 0,
                                        "maximum": 1048576
                                    },
                                    "max_power_on_wait_time": {
                                        "type": "integer",
                                        "description": "How long BOS will wait for a node to power on before calling power on again (in seconds)",
                                        "minimum": 0,
                                        "maximum": 1048576
                                    },
                                    "polling_frequency": {
                                        "type": "integer",
                                        "description": "How frequently the BOS operators check Component state for needed actions (in seconds)",
                                        "minimum": 0,
                                        "maximum": 1048576
                                    },
                                    "reject_nids": {
                                        "type": "boolean",
                                        "description": "If true, then BOS will attempt to prevent Sessions and Session Templates that reference NIDs (which BOS does not support).\nSpecifically, if this option is true, then:\n- When creating a Session, if the Session limit or a Session Template node list appear to contain NID values, then Session creation will fail.\n- When creating a Session Template, if a node list appears to contain a NID value, then the Session Template creation will fail.\n- When validating an existing Session Template, if a node list appears to contain a NID value, then the validation will report an error.\n\nThis option does NOT have an effect on Sessions that were created prior to it being enabled (even if they have not yet started).\n"
                                    },
                                    "session_limit_required": {
                                        "type": "boolean",
                                        "description": "If true, Sessions cannot be created without specifying the limit parameter."
                                    }
                                },
                                "additionalProperties": true,
                                "minProperties": 1,
                                "maxProperties": 1024
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A collection of service-wide options",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Options for the Boot Orchestration Service.\n",
                                    "type": "object",
                                    "properties": {
                                        "cfs_read_timeout": {
                                            "type": "integer",
                                            "description": "The amount of time (in seconds) to wait for a response before timing out a request to CFS\n",
                                            "example": 20,
                                            "minimum": 10,
                                            "maximum": 86400
                                        },
                                        "cleanup_completed_session_ttl": {
                                            "type": "string",
                                            "description": "Delete complete Sessions that are older than cleanup_completed_session_ttl (in minutes, hours, days, or weeks).\n0 disables cleanup behavior.\n",
                                            "example": "3d",
                                            "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                            "minLength": 1,
                                            "maxLength": 8
                                        },
                                        "clear_stage": {
                                            "type": "boolean",
                                            "description": "Allows a Component's staged information to be cleared when the requested staging action has been started. Defaults to false."
                                        },
                                        "component_actual_state_ttl": {
                                            "type": "string",
                                            "description": "The maximum amount of time a Component's actual state is considered valid (in minutes, hours, days, or weeks).\n0 disables cleanup behavior for newly booted nodes and instructs bos-state-reporter to report once instead of periodically.\n",
                                            "example": "6h",
                                            "pattern": "^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$",
                                            "minLength": 1,
                                            "maxLength": 8
                                        },
                                        "default_retry_policy": {
                                            "type": "integer",
                                            "description": "The default maximum number attempts per node for failed actions.",
                                            "example": 1,
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "disable_components_on_completion": {
                                            "type": "boolean",
                                            "description": "If true, when a Session has brought a Component to its desired state, that Component will be marked as disabled in BOS.\nIf false, BOS will continue to maintain the state of the nodes declaratively, even after a Session finishes.\n"
                                        },
                                        "discovery_frequency": {
                                            "type": "integer",
                                            "description": "How frequently the BOS discovery agent syncs new Components from HSM (in seconds)",
                                            "minimum": 0,
                                            "maximum": 33554432
                                        },
                                        "ims_errors_fatal": {
                                            "type": "boolean",
                                            "description": "This option modifies how BOS behaves when validating the architecture of a boot image in a boot set.\nSpecifically, this option comes into play when BOS needs data from IMS in order to do this validation, but\nIMS is unreachable.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this.\n"
                                        },
                                        "ims_images_must_exist": {
                                            "type": "boolean",
                                            "description": "This option modifies how BOS behaves when validating a boot set whose boot image appears to be from IMS.\nSpecifically, this option comes into play when the image does not actually exist in IMS.\nIn the above situation, if this option is true, then the validation will fail.\nOtherwise, if the option is false, then a warning will be logged, but the validation will not\nbe failed because of this. Note that if ims_images_must_exist is true but ims_errors_fatal is false, then\na failure to determine whether or not an image is in IMS will NOT result in a fatal error.\n"
                                        },
                                        "logging_level": {
                                            "type": "string",
                                            "description": "The logging level for all BOS services",
                                            "pattern": "^([dD][eE][bB][uU][gG]|[iI][nN][fF][oO]|[wW][aA][rR][nN][iI][nN][gG]|[eE][rR][rR][oO][rR]|[cC][rR][iI][tT][iI][cC][aA][lL])$"
                                        },
                                        "max_boot_wait_time": {
                                            "type": "integer",
                                            "description": "How long BOS will wait for a node to boot into a usable state before rebooting it again (in seconds)",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "max_component_batch_size": {
                                            "type": "integer",
                                            "description": "The maximum number of Components that a BOS operator will process at once. 0 means no limit.",
                                            "example": 1000,
                                            "minimum": 0,
                                            "maximum": 131071
                                        },
                                        "max_power_off_wait_time": {
                                            "type": "integer",
                                            "description": "How long BOS will wait for a node to power off before forcefully powering off (in seconds)",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "max_power_on_wait_time": {
                                            "type": "integer",
                                            "description": "How long BOS will wait for a node to power on before calling power on again (in seconds)",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "polling_frequency": {
                                            "type": "integer",
                                            "description": "How frequently the BOS operators check Component state for needed actions (in seconds)",
                                            "minimum": 0,
                                            "maximum": 1048576
                                        },
                                        "reject_nids": {
                                            "type": "boolean",
                                            "description": "If true, then BOS will attempt to prevent Sessions and Session Templates that reference NIDs (which BOS does not support).\nSpecifically, if this option is true, then:\n- When creating a Session, if the Session limit or a Session Template node list appear to contain NID values, then Session creation will fail.\n- When creating a Session Template, if a node list appears to contain a NID value, then the Session Template creation will fail.\n- When validating an existing Session Template, if a node list appears to contain a NID value, then the validation will report an error.\n\nThis option does NOT have an effect on Sessions that were created prior to it being enabled (even if they have not yet started).\n"
                                        },
                                        "session_limit_required": {
                                            "type": "boolean",
                                            "description": "If true, Sessions cannot be created without specifying the limit parameter."
                                        }
                                    },
                                    "additionalProperties": true,
                                    "minProperties": 1,
                                    "maxProperties": 1024
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/version": {
            "get": {
                "summary": "Get API version",
                "description": "Return the API version",
                "tags": [
                    "v2",
                    "version"
                ],
                "x-openapi-router-controller": "bos.server.controllers.v2.base",
                "operationId": "get_version_v2",
                "responses": {
                    "200": {
                        "description": "Get version details\nThe versioning system uses [semver](https://semver.org/).\n## Link Relationships\n* self : Link to itself\n* versions : Link back to the versions resource\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Version data",
                                    "type": "object",
                                    "properties": {
                                        "major": {
                                            "type": "string",
                                            "pattern": "^(0|[1-9][0-9]*)$"
                                        },
                                        "minor": {
                                            "type": "string",
                                            "pattern": "^(0|[1-9][0-9]*)$"
                                        },
                                        "patch": {
                                            "type": "string",
                                            "pattern": "^(0|[1-9][0-9]*)$"
                                        },
                                        "links": {
                                            "description": "List of links to other resources",
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "href": {
                                                        "type": "string"
                                                    },
                                                    "rel": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human\nreadable documentation.\n",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by\noccurrence.\n",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of\nthe problem\n",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the\nproblem. Focus on helping correct the problem, rather than giving\ndebugging information.\n",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}