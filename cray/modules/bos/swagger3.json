{
    "openapi": "3.0.2",
    "info": {
        "title": "Boot Orchestration Service",
        "version": "1.3.0",
        "description": "The Boot Orchestration Service (BOS) applies 1 of 4 possible\nactions (boot, reboot, reconfigure, shutdown) to a list of compute nodes\nusing a specified image (if applicable), with specified kernel parameters,\nover a specified network. Currently, only one network option is available.\nAfter boot or reboot, nodes can be reconfigured.\n\n\nThe default content type for the BOS API is \"application/json\". Unsuccessful\nAPI calls return a content type of \"application/problem+json\" as per RFC 7807.\n\n## Resources\n\n\n### /sessiontemplate\n\nA session template controls the activity of BOS; it is a collection of one or more boot\nsets, combined with partition information, and\nconfiguration detail.\n\nA boot set defines a list of nodes, the image you want to boot/reboot the nodes with,\nkernel parameters to use to boot the nodes, and the network to boot the nodes over.\n\n### /session\n\nA BOS session applies the action to the nodes in the session\ntemplate.\n\n## Workflow\n\n\n### Create a New Session\n\n#### GET /sessiontemplate\n\nList available session templates.\nNote the *name* which uniquely identifies each session template.\nThis value can be used to create a new session later,\nif specified in the request body of POST /session.\n\n#### POST /sessiontemplate\n\nIf no session template pre-exists that satisfies requirements,\nthen create a new session template. *name* uniquely identifies the\nsession template.\nThis value can be used to create a new session later,\nif specified in the request body of POST /session.\n\n#### POST /session\n\nSpecify templateUuid and an\noperation to create a new session.\nThe templateUuid corresponds to the session template *name*.\nA new session is launched as a result of this call.\n\nA limit can also be specified to narrow the scope of the session. The limit\ncan consist of nodes, groups or roles in a comma-seperated list.\nMultiple groups are treated as seperated by OR, unless \"&\" is added to\nthe start of the component, in which case this becomes an AND.  Components\ncan also be preceded by \"!\" to exclude them.\n\nNote, the response from a successful session launch contains *links*.\nWithin *links*, *href* is a string that uniquely identifies the session.\n*href* is constructed using the session template name and a generated uuid.\nUse the entire *href* string as the path parameter *session_id*\nto uniquely identify a session in for the /session/{session_id}\nendpoint.\n\n\n#### GET /session/{session_id}\n\nGet session details by session id.\n\nList all in progress and completed sessions.\n\n\n## Interactions with Other APIs\n\n\nBOS works in concert with Image Management Service (IMS) to access boot images,\nand if *enable_cfs* is true then\nBOS will invoke CFS to configure the compute nodes.\n\n\nAll boot images specified via the session template, must be available via IMS.\n"
    },
    "servers": [
        {
            "url": "https://api-gw-service-nmn.local/apis/bos",
            "description": "The production BOS API server through a standard API gateway"
        },
        {
            "url": "https://cray-bos/",
            "description": "The service as exposed through k8s DNS service mapping"
        }
    ],
    "components": {
        "schemas": {
            "Healthz": {
                "description": "Service health status",
                "type": "object",
                "properties": {
                    "etcdStatus": {
                        "type": "string"
                    },
                    "apiStatus": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "Link": {
                "description": "Link to other resources",
                "type": "object",
                "properties": {
                    "rel": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "BootSet": {
                "description": "A boot set defines a collection of nodes and the information about the\nboot artifacts and parameters to be sent to each node over the specified\nnetwork to enable these nodes to boot. When multiple boot sets are used\nin a session template, the boot_ordinal and shtudown_ordinal indicate\nthe order in which boot sets need to be acted upon. Boot sets sharing\nthe same ordinal number will be addressed at the same time.\n",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Boot Set name.\n"
                    },
                    "boot_ordinal": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "The boot ordinal. This will establish the order for boot set operations.\nBoot sets boot in order from the lowest to highest boot_ordinal.\n"
                    },
                    "shutdown_ordinal": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "The shutdown ordinal. This will establish the order for boot set\nshutdown operations. Sets shutdown from low to high shutdown_ordinal.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.\nIt will be processed based on the type attribute.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n"
                    },
                    "etag": {
                        "type": "string",
                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.\n"
                    },
                    "kernel_parameters": {
                        "type": "string",
                        "description": "The kernel parameters to use to boot the nodes.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "The network over which the node will boot from.\nChoices:  NMN -- Node Management Network\npattern: '^(?i)nmn$'\n"
                    },
                    "node_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "description": "The node list. This is an explicit mapping against hardware xnames.\n"
                    },
                    "node_roles_groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "description": "The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.\n"
                    },
                    "node_groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "description": "The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user defined groups in SMD.\n"
                    },
                    "rootfs_provider": {
                        "type": "string",
                        "description": "The root file system provider.\n"
                    },
                    "rootfs_provider_passthrough": {
                        "type": "string",
                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n"
                    }
                },
                "additionalProperties": false,
                "required": [
                    "path",
                    "type"
                ]
            },
            "CfsParameters": {
                "type": "object",
                "description": "CFS Parameters is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled.\n",
                "properties": {
                    "clone_url": {
                        "type": "string",
                        "description": "The clone url for the repository providing the configuration.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The name of the branch containing the configuration that you want to\napply to the nodes. Mutually exclusive with commit.\n"
                    },
                    "commit": {
                        "type": "string",
                        "description": "The commit id of the configuration that you want to\napply to the nodes. Mutually exclusive with branch.\n"
                    },
                    "playbook": {
                        "type": "string",
                        "description": "The name of the playbook to run for configuration. The file path must be specified\nrelative to the base directory of the config repo.\n"
                    }
                },
                "additionalProperties": false
            },
            "GenericMetadata": {
                "type": "object",
                "description": "The status metadata\n",
                "properties": {
                    "start_time": {
                        "type": "string",
                        "description": "The start time\n",
                        "example": "2020-04-24T12:00"
                    },
                    "stop_time": {
                        "type": "string",
                        "description": "The stop time\n",
                        "example": "2020-04-24T12:00"
                    },
                    "complete": {
                        "type": "boolean",
                        "description": "Is the object's status complete\n",
                        "example": true
                    },
                    "in_progress": {
                        "type": "boolean",
                        "description": "Is the object still doing something\n",
                        "example": false
                    },
                    "error_count": {
                        "type": "integer",
                        "description": "How many errors were encountered\n",
                        "example": 0
                    }
                },
                "additionalProperties": false
            },
            "NodeList": {
                "type": "array",
                "items": {
                    "type": "string",
                    "example": [
                        "x3000c0s19b1n0",
                        "x3000c0s19b2n0"
                    ]
                }
            },
            "PhaseCategoryStatus": {
                "type": "object",
                "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Phase Category\n",
                        "example": "Succeeded",
                        "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                    },
                    "node_list": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": [
                                "x3000c0s19b1n0",
                                "x3000c0s19b2n0"
                            ]
                        }
                    }
                }
            },
            "PhaseStatus": {
                "type": "object",
                "description": "The phase's status. It is a list of all of the nodes in the phase and\nwhat category those nodes fall into within the phase.\n\n## Link Relationships\n\n* self : The session object\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Phase \n",
                        "example": "Boot",
                        "pattern": "^(?i)boot|configure|shutdown$"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "The status metadata\n",
                        "properties": {
                            "start_time": {
                                "type": "string",
                                "description": "The start time\n",
                                "example": "2020-04-24T12:00"
                            },
                            "stop_time": {
                                "type": "string",
                                "description": "The stop time\n",
                                "example": "2020-04-24T12:00"
                            },
                            "complete": {
                                "type": "boolean",
                                "description": "Is the object's status complete\n",
                                "example": true
                            },
                            "in_progress": {
                                "type": "boolean",
                                "description": "Is the object still doing something\n",
                                "example": false
                            },
                            "error_count": {
                                "type": "integer",
                                "description": "How many errors were encountered\n",
                                "example": 0
                            }
                        },
                        "additionalProperties": false
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the Phase Category\n",
                                    "example": "Succeeded",
                                    "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                                },
                                "node_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": [
                                            "x3000c0s19b1n0",
                                            "x3000c0s19b2n0"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "errors": {
                        "type": "object",
                        "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": [
                                    "x3000c0s19b1n0",
                                    "x3000c0s19b2n0"
                                ]
                            }
                        }
                    }
                }
            },
            "BootSetStatus": {
                "type": "object",
                "description": "The status for a Boot Set. It as a list of the phase statuses for the Boot Set.\n \n## Link Relationships\n\n* self : The session object\n* phase : A phase of the boot set\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the Boot Set",
                        "example": "Boot-Set"
                    },
                    "session": {
                        "type": "string",
                        "description": "Session ID",
                        "example": "Session-ID"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "The status metadata\n",
                        "properties": {
                            "start_time": {
                                "type": "string",
                                "description": "The start time\n",
                                "example": "2020-04-24T12:00"
                            },
                            "stop_time": {
                                "type": "string",
                                "description": "The stop time\n",
                                "example": "2020-04-24T12:00"
                            },
                            "complete": {
                                "type": "boolean",
                                "description": "Is the object's status complete\n",
                                "example": true
                            },
                            "in_progress": {
                                "type": "boolean",
                                "description": "Is the object still doing something\n",
                                "example": false
                            },
                            "error_count": {
                                "type": "integer",
                                "description": "How many errors were encountered\n",
                                "example": 0
                            }
                        },
                        "additionalProperties": false
                    },
                    "phases": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "description": "The phase's status. It is a list of all of the nodes in the phase and\nwhat category those nodes fall into within the phase.\n\n## Link Relationships\n\n* self : The session object\n",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the Phase \n",
                                    "example": "Boot",
                                    "pattern": "^(?i)boot|configure|shutdown$"
                                },
                                "metadata": {
                                    "type": "object",
                                    "description": "The status metadata\n",
                                    "properties": {
                                        "start_time": {
                                            "type": "string",
                                            "description": "The start time\n",
                                            "example": "2020-04-24T12:00"
                                        },
                                        "stop_time": {
                                            "type": "string",
                                            "description": "The stop time\n",
                                            "example": "2020-04-24T12:00"
                                        },
                                        "complete": {
                                            "type": "boolean",
                                            "description": "Is the object's status complete\n",
                                            "example": true
                                        },
                                        "in_progress": {
                                            "type": "boolean",
                                            "description": "Is the object still doing something\n",
                                            "example": false
                                        },
                                        "error_count": {
                                            "type": "integer",
                                            "description": "How many errors were encountered\n",
                                            "example": 0
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "categories": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the Phase Category\n",
                                                "example": "Succeeded",
                                                "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                                            },
                                            "node_list": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": [
                                                        "x3000c0s19b1n0",
                                                        "x3000c0s19b2n0"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                },
                                "errors": {
                                    "type": "object",
                                    "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": [
                                                "x3000c0s19b1n0",
                                                "x3000c0s19b2n0"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "description": "Link to other resources",
                            "type": "object",
                            "properties": {
                                "rel": {
                                    "type": "string"
                                },
                                "href": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "SessionStatus": {
                "type": "object",
                "description": "The status for a Boot Session. It is a list of all of the Boot Set Statuses in the session.\n## Link Relationships\n\n* self : The session object\n* boot sets: URL to access the Boot Set status\n",
                "properties": {
                    "metadata": {
                        "type": "object",
                        "description": "The status metadata\n",
                        "properties": {
                            "start_time": {
                                "type": "string",
                                "description": "The start time\n",
                                "example": "2020-04-24T12:00"
                            },
                            "stop_time": {
                                "type": "string",
                                "description": "The stop time\n",
                                "example": "2020-04-24T12:00"
                            },
                            "complete": {
                                "type": "boolean",
                                "description": "Is the object's status complete\n",
                                "example": true
                            },
                            "in_progress": {
                                "type": "boolean",
                                "description": "Is the object still doing something\n",
                                "example": false
                            },
                            "error_count": {
                                "type": "integer",
                                "description": "How many errors were encountered\n",
                                "example": 0
                            }
                        },
                        "additionalProperties": false
                    },
                    "boot_sets": {
                        "description": "The boot sets in the Session\n",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1
                    },
                    "id": {
                        "type": "string",
                        "description": "Session ID"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "description": "Link to other resources",
                            "type": "object",
                            "properties": {
                                "rel": {
                                    "type": "string"
                                },
                                "href": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "SessionTemplate": {
                "type": "object",
                "description": "A Session Template object represents a collection of resources and metadata.\nA session template is used to create a Session which when combined with an\naction (i.e. boot, reconfigure, reboot, shutdown) will create a K8s BOA job\nto complete the required tasks for the operation.\n\nA Session Template can be created from a JSON structure.  It will return\na SessionTemplate name if successful.\nThis name is required when creating a Session.\n\n## Link Relationships\n\n* self : The session object\n",
                "properties": {
                    "templateUrl": {
                        "type": "string",
                        "description": "The URL to the resource providing the session template data.\nSpecify either a templateURL, or the other session\ntemplate parameters (excluding templateBody).\n"
                    },
                    "templateBody": {
                        "type": "string",
                        "description": "Do not use. To be removed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SessionTemplate. The length of the name is restricted to 45 characters.",
                        "example": "cle-1.0.0",
                        "minLength": 1,
                        "maxLength": 45,
                        "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the session template.\n"
                    },
                    "cfs_url": {
                        "type": "string",
                        "description": "The url for the repository providing the configuration. DEPRECATED\n"
                    },
                    "cfs_branch": {
                        "type": "string",
                        "description": "The name of the branch containing the configuration that you want to\napply to the nodes.  DEPRECATED.\n"
                    },
                    "enable_cfs": {
                        "type": "boolean",
                        "description": "Whether to enable the Configuration Framework Service (CFS).\nChoices: true/false\n",
                        "default": true
                    },
                    "cfs": {
                        "type": "object",
                        "description": "CFS Parameters is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled.\n",
                        "properties": {
                            "clone_url": {
                                "type": "string",
                                "description": "The clone url for the repository providing the configuration.\n"
                            },
                            "branch": {
                                "type": "string",
                                "description": "The name of the branch containing the configuration that you want to\napply to the nodes. Mutually exclusive with commit.\n"
                            },
                            "commit": {
                                "type": "string",
                                "description": "The commit id of the configuration that you want to\napply to the nodes. Mutually exclusive with branch.\n"
                            },
                            "playbook": {
                                "type": "string",
                                "description": "The name of the playbook to run for configuration. The file path must be specified\nrelative to the base directory of the config repo.\n"
                            }
                        },
                        "additionalProperties": false
                    },
                    "partition": {
                        "type": "string",
                        "description": "The machine partition to operate on.\n"
                    },
                    "boot_sets": {
                        "type": "object",
                        "additionalProperties": {
                            "description": "A boot set defines a collection of nodes and the information about the\nboot artifacts and parameters to be sent to each node over the specified\nnetwork to enable these nodes to boot. When multiple boot sets are used\nin a session template, the boot_ordinal and shtudown_ordinal indicate\nthe order in which boot sets need to be acted upon. Boot sets sharing\nthe same ordinal number will be addressed at the same time.\n",
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The Boot Set name.\n"
                                },
                                "boot_ordinal": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "The boot ordinal. This will establish the order for boot set operations.\nBoot sets boot in order from the lowest to highest boot_ordinal.\n"
                                },
                                "shutdown_ordinal": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "The shutdown ordinal. This will establish the order for boot set\nshutdown operations. Sets shutdown from low to high shutdown_ordinal.\n"
                                },
                                "path": {
                                    "type": "string",
                                    "description": "A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.\nIt will be processed based on the type attribute.\n"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n"
                                },
                                "etag": {
                                    "type": "string",
                                    "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.\n"
                                },
                                "kernel_parameters": {
                                    "type": "string",
                                    "description": "The kernel parameters to use to boot the nodes.\n"
                                },
                                "network": {
                                    "type": "string",
                                    "description": "The network over which the node will boot from.\nChoices:  NMN -- Node Management Network\npattern: '^(?i)nmn$'\n"
                                },
                                "node_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1,
                                    "description": "The node list. This is an explicit mapping against hardware xnames.\n"
                                },
                                "node_roles_groups": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1,
                                    "description": "The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.\n"
                                },
                                "node_groups": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1,
                                    "description": "The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user defined groups in SMD.\n"
                                },
                                "rootfs_provider": {
                                    "type": "string",
                                    "description": "The root file system provider.\n"
                                },
                                "rootfs_provider_passthrough": {
                                    "type": "string",
                                    "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n"
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "path",
                                "type"
                            ]
                        }
                    },
                    "links": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "description": "Link to other resources",
                            "type": "object",
                            "properties": {
                                "rel": {
                                    "type": "string"
                                },
                                "href": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "Session": {
                "description": "A Session object\n\n## Link Relationships\n\n* self : The session object\n",
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "description": "A Session represents an operation on a SessionTemplate. The creation of a session effectively results in the creation of a K8s Boot Orchestration Agent (BOA) job to perform the duties required to complete the operation.\nOperation -- An operation to perform on nodes in this session.\n\n    Boot         Boot nodes that are off.\n\n    Configure    Reconfigure the nodes using the Configuration Framework\n                 Service (CFS).\n\n    Reboot       Gracefully power down nodes that are on and then power\n                 them back up.\n\n    Shutdown     Gracefully power down nodes that are on.\n",
                        "pattern": "^(?i)boot|configure|reboot|shutdown$"
                    },
                    "templateUuid": {
                        "type": "string",
                        "description": "The name of the Session Template",
                        "example": "my-session-template",
                        "format": "string"
                    },
                    "limit": {
                        "type": "string",
                        "description": "A comma seperated of nodes, groups or roles to which the session will be limited. Components are treated as OR operations unless preceded by \"&\" for AND or \"!\" for NOT.\n"
                    },
                    "links": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "description": "Link to other resources",
                            "type": "object",
                            "properties": {
                                "rel": {
                                    "type": "string"
                                },
                                "href": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                },
                "required": [
                    "operation",
                    "templateUuid"
                ],
                "additionalProperties": false
            },
            "Version": {
                "description": "Version data",
                "type": "object",
                "properties": {
                    "major": {
                        "type": "integer"
                    },
                    "minor": {
                        "type": "integer"
                    },
                    "patch": {
                        "type": "integer"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "description": "Link to other resources",
                            "type": "object",
                            "properties": {
                                "rel": {
                                    "type": "string"
                                },
                                "href": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                },
                "additionalProperties": false
            },
            "NodeChangeList": {
                "type": "object",
                "description": "The information used to update the status of a node list. It moves nodes from\none category to another within a phase.\n",
                "properties": {
                    "phase": {
                        "type": "string",
                        "example": "Boot"
                    },
                    "source": {
                        "type": "string",
                        "example": "in_progress"
                    },
                    "destination": {
                        "type": "string",
                        "example": "Succeeded"
                    },
                    "node_list": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": [
                                "x3000c0s19b1n0",
                                "x3000c0s19b2n0"
                            ]
                        }
                    }
                },
                "additionalProperties": false,
                "required": [
                    "phase",
                    "source",
                    "destination",
                    "node_list"
                ]
            },
            "NodeErrorsList": {
                "type": "object",
                "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": [
                            "x3000c0s19b1n0",
                            "x3000c0s19b2n0"
                        ]
                    }
                }
            },
            "UpdateRequestNodeChangeList": {
                "description": "This is the payload sent during an update request. It contains \nupdates to which categories nodes are in.\n",
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "update_type": {
                            "description": "The type of update data",
                            "pattern": "NodeChangeList",
                            "type": "string"
                        },
                        "phase": {
                            "description": "The phase that this data belongs to. If  blank, it belongs to\nthe Boot Set itself, which only applies to the GenericMetadata type.\n",
                            "pattern": "(?i)shutdown|boot|configure",
                            "type": "string"
                        },
                        "data": {
                            "type": "object",
                            "description": "The information used to update the status of a node list. It moves nodes from\none category to another within a phase.\n",
                            "properties": {
                                "phase": {
                                    "type": "string",
                                    "example": "Boot"
                                },
                                "source": {
                                    "type": "string",
                                    "example": "in_progress"
                                },
                                "destination": {
                                    "type": "string",
                                    "example": "Succeeded"
                                },
                                "node_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": [
                                            "x3000c0s19b1n0",
                                            "x3000c0s19b2n0"
                                        ]
                                    }
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "phase",
                                "source",
                                "destination",
                                "node_list"
                            ]
                        }
                    }
                }
            },
            "UpdateRequestNodeErrorsList": {
                "description": "This is the payload sent during an update request. It contains\nupdates to which errors have occurred and which nodes encountered those errors\n",
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "update_type": {
                            "description": "The type of update data",
                            "pattern": "NodeErrorsList",
                            "type": "string"
                        },
                        "phase": {
                            "description": "The phase that this data belongs to. If  blank, it belongs to\nthe Boot Set itself, which only applies to the GenericMetadata type.\n",
                            "pattern": "(?i)shutdown|boot|configure",
                            "type": "string"
                        },
                        "data": {
                            "type": "object",
                            "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": [
                                        "x3000c0s19b1n0",
                                        "x3000c0s19b2n0"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "UpdateRequestGenericMetadata": {
                "description": "This is the payload sent during an update request. It contains\nupdates to metadata, specifically start and stop times\n",
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "update_type": {
                            "description": "The type of update data",
                            "pattern": "GenericMetadata",
                            "type": "string"
                        },
                        "phase": {
                            "description": "The phase that this data belongs to. If  blank, it belongs to\nthe Boot Set itself, which only applies to the GenericMetadata type.\n",
                            "pattern": "(?i)shutdown|boot|configure",
                            "type": "string"
                        },
                        "data": {
                            "type": "object",
                            "description": "The status metadata\n",
                            "properties": {
                                "start_time": {
                                    "type": "string",
                                    "description": "The start time\n",
                                    "example": "2020-04-24T12:00"
                                },
                                "stop_time": {
                                    "type": "string",
                                    "description": "The stop time\n",
                                    "example": "2020-04-24T12:00"
                                },
                                "complete": {
                                    "type": "boolean",
                                    "description": "Is the object's status complete\n",
                                    "example": true
                                },
                                "in_progress": {
                                    "type": "boolean",
                                    "description": "Is the object still doing something\n",
                                    "example": false
                                },
                                "error_count": {
                                    "type": "integer",
                                    "description": "How many errors were encountered\n",
                                    "example": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "ProblemDetails": {
                "description": "An error response for RFC 7807 problem details.",
                "type": "object",
                "properties": {
                    "type": {
                        "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                        "type": "string",
                        "format": "uri",
                        "default": "about:blank"
                    },
                    "title": {
                        "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                        "type": "string"
                    },
                    "status": {
                        "description": "HTTP status code",
                        "type": "integer",
                        "example": 400
                    },
                    "instance": {
                        "description": "A relative URI reference that identifies the specific occurrence of the problem",
                        "format": "uri",
                        "type": "string"
                    },
                    "detail": {
                        "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                        "type": "string"
                    }
                },
                "additionalProperties": false
            }
        },
        "responses": {
            "badRequest": {
                "description": "Bad Request",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "serviceUnavailable": {
                "description": "Service Unavailable",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "v1SessionDetails": {
                "description": "Session details",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "A Session object\n\n## Link Relationships\n\n* self : The session object\n",
                            "type": "object",
                            "properties": {
                                "operation": {
                                    "type": "string",
                                    "description": "A Session represents an operation on a SessionTemplate. The creation of a session effectively results in the creation of a K8s Boot Orchestration Agent (BOA) job to perform the duties required to complete the operation.\nOperation -- An operation to perform on nodes in this session.\n\n    Boot         Boot nodes that are off.\n\n    Configure    Reconfigure the nodes using the Configuration Framework\n                 Service (CFS).\n\n    Reboot       Gracefully power down nodes that are on and then power\n                 them back up.\n\n    Shutdown     Gracefully power down nodes that are on.\n",
                                    "pattern": "^(?i)boot|configure|reboot|shutdown$"
                                },
                                "templateUuid": {
                                    "type": "string",
                                    "description": "The name of the Session Template",
                                    "example": "my-session-template",
                                    "format": "string"
                                },
                                "limit": {
                                    "type": "string",
                                    "description": "A comma seperated of nodes, groups or roles to which the session will be limited. Components are treated as OR operations unless preceded by \"&\" for AND or \"!\" for NOT.\n"
                                },
                                "links": {
                                    "type": "array",
                                    "readOnly": true,
                                    "items": {
                                        "description": "Link to other resources",
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string"
                                            },
                                            "href": {
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "required": [
                                "operation",
                                "templateUuid"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            },
            "v1SessionStatus": {
                "description": "A list of Boot Set Statuses and metadata",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "description": "The status for a Boot Session. It is a list of all of the Boot Set Statuses in the session.\n## Link Relationships\n\n* self : The session object\n* boot sets: URL to access the Boot Set status\n",
                            "properties": {
                                "metadata": {
                                    "type": "object",
                                    "description": "The status metadata\n",
                                    "properties": {
                                        "start_time": {
                                            "type": "string",
                                            "description": "The start time\n",
                                            "example": "2020-04-24T12:00"
                                        },
                                        "stop_time": {
                                            "type": "string",
                                            "description": "The stop time\n",
                                            "example": "2020-04-24T12:00"
                                        },
                                        "complete": {
                                            "type": "boolean",
                                            "description": "Is the object's status complete\n",
                                            "example": true
                                        },
                                        "in_progress": {
                                            "type": "boolean",
                                            "description": "Is the object still doing something\n",
                                            "example": false
                                        },
                                        "error_count": {
                                            "type": "integer",
                                            "description": "How many errors were encountered\n",
                                            "example": 0
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "boot_sets": {
                                    "description": "The boot sets in the Session\n",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1
                                },
                                "id": {
                                    "type": "string",
                                    "description": "Session ID"
                                },
                                "links": {
                                    "type": "array",
                                    "items": {
                                        "description": "Link to other resources",
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string"
                                            },
                                            "href": {
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "v1SessionTemplateDetails": {
                "description": "Session template details",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "description": "A Session Template object represents a collection of resources and metadata.\nA session template is used to create a Session which when combined with an\naction (i.e. boot, reconfigure, reboot, shutdown) will create a K8s BOA job\nto complete the required tasks for the operation.\n\nA Session Template can be created from a JSON structure.  It will return\na SessionTemplate name if successful.\nThis name is required when creating a Session.\n\n## Link Relationships\n\n* self : The session object\n",
                            "properties": {
                                "templateUrl": {
                                    "type": "string",
                                    "description": "The URL to the resource providing the session template data.\nSpecify either a templateURL, or the other session\ntemplate parameters (excluding templateBody).\n"
                                },
                                "templateBody": {
                                    "type": "string",
                                    "description": "Do not use. To be removed.\n"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of the SessionTemplate. The length of the name is restricted to 45 characters.",
                                    "example": "cle-1.0.0",
                                    "minLength": 1,
                                    "maxLength": 45,
                                    "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "An optional description for the session template.\n"
                                },
                                "cfs_url": {
                                    "type": "string",
                                    "description": "The url for the repository providing the configuration. DEPRECATED\n"
                                },
                                "cfs_branch": {
                                    "type": "string",
                                    "description": "The name of the branch containing the configuration that you want to\napply to the nodes.  DEPRECATED.\n"
                                },
                                "enable_cfs": {
                                    "type": "boolean",
                                    "description": "Whether to enable the Configuration Framework Service (CFS).\nChoices: true/false\n",
                                    "default": true
                                },
                                "cfs": {
                                    "type": "object",
                                    "description": "CFS Parameters is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled.\n",
                                    "properties": {
                                        "clone_url": {
                                            "type": "string",
                                            "description": "The clone url for the repository providing the configuration.\n"
                                        },
                                        "branch": {
                                            "type": "string",
                                            "description": "The name of the branch containing the configuration that you want to\napply to the nodes. Mutually exclusive with commit.\n"
                                        },
                                        "commit": {
                                            "type": "string",
                                            "description": "The commit id of the configuration that you want to\napply to the nodes. Mutually exclusive with branch.\n"
                                        },
                                        "playbook": {
                                            "type": "string",
                                            "description": "The name of the playbook to run for configuration. The file path must be specified\nrelative to the base directory of the config repo.\n"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "partition": {
                                    "type": "string",
                                    "description": "The machine partition to operate on.\n"
                                },
                                "boot_sets": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A boot set defines a collection of nodes and the information about the\nboot artifacts and parameters to be sent to each node over the specified\nnetwork to enable these nodes to boot. When multiple boot sets are used\nin a session template, the boot_ordinal and shtudown_ordinal indicate\nthe order in which boot sets need to be acted upon. Boot sets sharing\nthe same ordinal number will be addressed at the same time.\n",
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The Boot Set name.\n"
                                            },
                                            "boot_ordinal": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "description": "The boot ordinal. This will establish the order for boot set operations.\nBoot sets boot in order from the lowest to highest boot_ordinal.\n"
                                            },
                                            "shutdown_ordinal": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "description": "The shutdown ordinal. This will establish the order for boot set\nshutdown operations. Sets shutdown from low to high shutdown_ordinal.\n"
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.\nIt will be processed based on the type attribute.\n"
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n"
                                            },
                                            "etag": {
                                                "type": "string",
                                                "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.\n"
                                            },
                                            "kernel_parameters": {
                                                "type": "string",
                                                "description": "The kernel parameters to use to boot the nodes.\n"
                                            },
                                            "network": {
                                                "type": "string",
                                                "description": "The network over which the node will boot from.\nChoices:  NMN -- Node Management Network\npattern: '^(?i)nmn$'\n"
                                            },
                                            "node_list": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 1,
                                                "description": "The node list. This is an explicit mapping against hardware xnames.\n"
                                            },
                                            "node_roles_groups": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 1,
                                                "description": "The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.\n"
                                            },
                                            "node_groups": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 1,
                                                "description": "The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user defined groups in SMD.\n"
                                            },
                                            "rootfs_provider": {
                                                "type": "string",
                                                "description": "The root file system provider.\n"
                                            },
                                            "rootfs_provider_passthrough": {
                                                "type": "string",
                                                "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "path",
                                            "type"
                                        ]
                                    }
                                },
                                "links": {
                                    "type": "array",
                                    "readOnly": true,
                                    "items": {
                                        "description": "Link to other resources",
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string"
                                            },
                                            "href": {
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            },
            "sessionTemplateNotFound": {
                "description": "The session template was not found",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            },
            "sessionNotFound": {
                "description": "The session was not found",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "description": "An error response for RFC 7807 problem details.",
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                    "type": "string",
                                    "format": "uri",
                                    "default": "about:blank"
                                },
                                "title": {
                                    "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "HTTP status code",
                                    "type": "integer",
                                    "example": 400
                                },
                                "instance": {
                                    "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                    "format": "uri",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            }
        }
    },
    "paths": {
        "/": {
            "get": {
                "summary": "Get API versions",
                "description": "Return list of versions currently running.",
                "tags": [
                    "version"
                ],
                "x-openapi-router-controller": "bos.controllers.base",
                "responses": {
                    "200": {
                        "description": "Get versions.\n\nThe versioning system uses [semver](https://semver.org/).\n\n## Link Relationships\n\n* self : The version base, e.g., \"/v1\".\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "description": "Version data",
                                        "type": "object",
                                        "properties": {
                                            "major": {
                                                "type": "integer"
                                            },
                                            "minor": {
                                                "type": "integer"
                                            },
                                            "patch": {
                                                "type": "integer"
                                            },
                                            "links": {
                                                "type": "array",
                                                "items": {
                                                    "description": "Link to other resources",
                                                    "type": "object",
                                                    "properties": {
                                                        "rel": {
                                                            "type": "string"
                                                        },
                                                        "href": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1": {
            "get": {
                "summary": "Get API version",
                "tags": [
                    "version"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.base",
                "operationId": "v1_get",
                "responses": {
                    "200": {
                        "description": "Get version details\n\nThe versioning system uses [semver](https://semver.org/).\n\n## Link Relationships\n\n* self : Link to itself\n* versions : Link back to the versions resource\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Version data",
                                    "type": "object",
                                    "properties": {
                                        "major": {
                                            "type": "integer"
                                        },
                                        "minor": {
                                            "type": "integer"
                                        },
                                        "patch": {
                                            "type": "integer"
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An Internal Server Error occurred handling the request.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/healthz": {
            "get": {
                "summary": "Get service health details",
                "tags": [
                    "healthz"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.healthz",
                "operationId": "v1_get_healthz",
                "description": "Get bos health details.",
                "responses": {
                    "200": {
                        "description": "Service Health information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Service health status",
                                    "type": "object",
                                    "properties": {
                                        "etcdStatus": {
                                            "type": "string"
                                        },
                                        "apiStatus": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An Internal Server Error occurred handling the request.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sessiontemplate": {
            "post": {
                "summary": "Create session template",
                "tags": [
                    "sessiontemplate"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.sessiontemplate",
                "operationId": "create_v1_sessiontemplate",
                "description": "Create a new session template.",
                "requestBody": {
                    "description": "A JSON object for creating a session template",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "A Session Template object represents a collection of resources and metadata.\nA session template is used to create a Session which when combined with an\naction (i.e. boot, reconfigure, reboot, shutdown) will create a K8s BOA job\nto complete the required tasks for the operation.\n\nA Session Template can be created from a JSON structure.  It will return\na SessionTemplate name if successful.\nThis name is required when creating a Session.\n\n## Link Relationships\n\n* self : The session object\n",
                                "properties": {
                                    "templateUrl": {
                                        "type": "string",
                                        "description": "The URL to the resource providing the session template data.\nSpecify either a templateURL, or the other session\ntemplate parameters (excluding templateBody).\n"
                                    },
                                    "templateBody": {
                                        "type": "string",
                                        "description": "Do not use. To be removed.\n"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the SessionTemplate. The length of the name is restricted to 45 characters.",
                                        "example": "cle-1.0.0",
                                        "minLength": 1,
                                        "maxLength": 45,
                                        "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "An optional description for the session template.\n"
                                    },
                                    "cfs_url": {
                                        "type": "string",
                                        "description": "The url for the repository providing the configuration. DEPRECATED\n"
                                    },
                                    "cfs_branch": {
                                        "type": "string",
                                        "description": "The name of the branch containing the configuration that you want to\napply to the nodes.  DEPRECATED.\n"
                                    },
                                    "enable_cfs": {
                                        "type": "boolean",
                                        "description": "Whether to enable the Configuration Framework Service (CFS).\nChoices: true/false\n",
                                        "default": true
                                    },
                                    "cfs": {
                                        "type": "object",
                                        "description": "CFS Parameters is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled.\n",
                                        "properties": {
                                            "clone_url": {
                                                "type": "string",
                                                "description": "The clone url for the repository providing the configuration.\n"
                                            },
                                            "branch": {
                                                "type": "string",
                                                "description": "The name of the branch containing the configuration that you want to\napply to the nodes. Mutually exclusive with commit.\n"
                                            },
                                            "commit": {
                                                "type": "string",
                                                "description": "The commit id of the configuration that you want to\napply to the nodes. Mutually exclusive with branch.\n"
                                            },
                                            "playbook": {
                                                "type": "string",
                                                "description": "The name of the playbook to run for configuration. The file path must be specified\nrelative to the base directory of the config repo.\n"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "partition": {
                                        "type": "string",
                                        "description": "The machine partition to operate on.\n"
                                    },
                                    "boot_sets": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "description": "A boot set defines a collection of nodes and the information about the\nboot artifacts and parameters to be sent to each node over the specified\nnetwork to enable these nodes to boot. When multiple boot sets are used\nin a session template, the boot_ordinal and shtudown_ordinal indicate\nthe order in which boot sets need to be acted upon. Boot sets sharing\nthe same ordinal number will be addressed at the same time.\n",
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "The Boot Set name.\n"
                                                },
                                                "boot_ordinal": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "description": "The boot ordinal. This will establish the order for boot set operations.\nBoot sets boot in order from the lowest to highest boot_ordinal.\n"
                                                },
                                                "shutdown_ordinal": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "description": "The shutdown ordinal. This will establish the order for boot set\nshutdown operations. Sets shutdown from low to high shutdown_ordinal.\n"
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "description": "A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.\nIt will be processed based on the type attribute.\n"
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "description": "The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n"
                                                },
                                                "etag": {
                                                    "type": "string",
                                                    "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.\n"
                                                },
                                                "kernel_parameters": {
                                                    "type": "string",
                                                    "description": "The kernel parameters to use to boot the nodes.\n"
                                                },
                                                "network": {
                                                    "type": "string",
                                                    "description": "The network over which the node will boot from.\nChoices:  NMN -- Node Management Network\npattern: '^(?i)nmn$'\n"
                                                },
                                                "node_list": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "description": "The node list. This is an explicit mapping against hardware xnames.\n"
                                                },
                                                "node_roles_groups": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "description": "The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.\n"
                                                },
                                                "node_groups": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "description": "The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user defined groups in SMD.\n"
                                                },
                                                "rootfs_provider": {
                                                    "type": "string",
                                                    "description": "The root file system provider.\n"
                                                },
                                                "rootfs_provider_passthrough": {
                                                    "type": "string",
                                                    "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "path",
                                                "type"
                                            ]
                                        }
                                    },
                                    "links": {
                                        "type": "array",
                                        "readOnly": true,
                                        "items": {
                                            "description": "Link to other resources",
                                            "type": "object",
                                            "properties": {
                                                "rel": {
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session template details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "A Session Template object represents a collection of resources and metadata.\nA session template is used to create a Session which when combined with an\naction (i.e. boot, reconfigure, reboot, shutdown) will create a K8s BOA job\nto complete the required tasks for the operation.\n\nA Session Template can be created from a JSON structure.  It will return\na SessionTemplate name if successful.\nThis name is required when creating a Session.\n\n## Link Relationships\n\n* self : The session object\n",
                                    "properties": {
                                        "templateUrl": {
                                            "type": "string",
                                            "description": "The URL to the resource providing the session template data.\nSpecify either a templateURL, or the other session\ntemplate parameters (excluding templateBody).\n"
                                        },
                                        "templateBody": {
                                            "type": "string",
                                            "description": "Do not use. To be removed.\n"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the SessionTemplate. The length of the name is restricted to 45 characters.",
                                            "example": "cle-1.0.0",
                                            "minLength": 1,
                                            "maxLength": 45,
                                            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "An optional description for the session template.\n"
                                        },
                                        "cfs_url": {
                                            "type": "string",
                                            "description": "The url for the repository providing the configuration. DEPRECATED\n"
                                        },
                                        "cfs_branch": {
                                            "type": "string",
                                            "description": "The name of the branch containing the configuration that you want to\napply to the nodes.  DEPRECATED.\n"
                                        },
                                        "enable_cfs": {
                                            "type": "boolean",
                                            "description": "Whether to enable the Configuration Framework Service (CFS).\nChoices: true/false\n",
                                            "default": true
                                        },
                                        "cfs": {
                                            "type": "object",
                                            "description": "CFS Parameters is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled.\n",
                                            "properties": {
                                                "clone_url": {
                                                    "type": "string",
                                                    "description": "The clone url for the repository providing the configuration.\n"
                                                },
                                                "branch": {
                                                    "type": "string",
                                                    "description": "The name of the branch containing the configuration that you want to\napply to the nodes. Mutually exclusive with commit.\n"
                                                },
                                                "commit": {
                                                    "type": "string",
                                                    "description": "The commit id of the configuration that you want to\napply to the nodes. Mutually exclusive with branch.\n"
                                                },
                                                "playbook": {
                                                    "type": "string",
                                                    "description": "The name of the playbook to run for configuration. The file path must be specified\nrelative to the base directory of the config repo.\n"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "partition": {
                                            "type": "string",
                                            "description": "The machine partition to operate on.\n"
                                        },
                                        "boot_sets": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "description": "A boot set defines a collection of nodes and the information about the\nboot artifacts and parameters to be sent to each node over the specified\nnetwork to enable these nodes to boot. When multiple boot sets are used\nin a session template, the boot_ordinal and shtudown_ordinal indicate\nthe order in which boot sets need to be acted upon. Boot sets sharing\nthe same ordinal number will be addressed at the same time.\n",
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "The Boot Set name.\n"
                                                    },
                                                    "boot_ordinal": {
                                                        "type": "integer",
                                                        "minimum": 0,
                                                        "description": "The boot ordinal. This will establish the order for boot set operations.\nBoot sets boot in order from the lowest to highest boot_ordinal.\n"
                                                    },
                                                    "shutdown_ordinal": {
                                                        "type": "integer",
                                                        "minimum": 0,
                                                        "description": "The shutdown ordinal. This will establish the order for boot set\nshutdown operations. Sets shutdown from low to high shutdown_ordinal.\n"
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.\nIt will be processed based on the type attribute.\n"
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n"
                                                    },
                                                    "etag": {
                                                        "type": "string",
                                                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.\n"
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.\n"
                                                    },
                                                    "network": {
                                                        "type": "string",
                                                        "description": "The network over which the node will boot from.\nChoices:  NMN -- Node Management Network\npattern: '^(?i)nmn$'\n"
                                                    },
                                                    "node_list": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "minItems": 1,
                                                        "description": "The node list. This is an explicit mapping against hardware xnames.\n"
                                                    },
                                                    "node_roles_groups": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "minItems": 1,
                                                        "description": "The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.\n"
                                                    },
                                                    "node_groups": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "minItems": 1,
                                                        "description": "The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user defined groups in SMD.\n"
                                                    },
                                                    "rootfs_provider": {
                                                        "type": "string",
                                                        "description": "The root file system provider.\n"
                                                    },
                                                    "rootfs_provider_passthrough": {
                                                        "type": "string",
                                                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "required": [
                                                    "path",
                                                    "type"
                                                ]
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "readOnly": true,
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "List session templates",
                "description": "List all session templates. Session templates are\nuniquely identified by the name.\n",
                "tags": [
                    "sessiontemplate"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.sessiontemplate",
                "operationId": "get_v1_sessiontemplates",
                "responses": {
                    "200": {
                        "description": "A collection of SessionTemplates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "description": "A Session Template object represents a collection of resources and metadata.\nA session template is used to create a Session which when combined with an\naction (i.e. boot, reconfigure, reboot, shutdown) will create a K8s BOA job\nto complete the required tasks for the operation.\n\nA Session Template can be created from a JSON structure.  It will return\na SessionTemplate name if successful.\nThis name is required when creating a Session.\n\n## Link Relationships\n\n* self : The session object\n",
                                        "properties": {
                                            "templateUrl": {
                                                "type": "string",
                                                "description": "The URL to the resource providing the session template data.\nSpecify either a templateURL, or the other session\ntemplate parameters (excluding templateBody).\n"
                                            },
                                            "templateBody": {
                                                "type": "string",
                                                "description": "Do not use. To be removed.\n"
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the SessionTemplate. The length of the name is restricted to 45 characters.",
                                                "example": "cle-1.0.0",
                                                "minLength": 1,
                                                "maxLength": 45,
                                                "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
                                            },
                                            "description": {
                                                "type": "string",
                                                "description": "An optional description for the session template.\n"
                                            },
                                            "cfs_url": {
                                                "type": "string",
                                                "description": "The url for the repository providing the configuration. DEPRECATED\n"
                                            },
                                            "cfs_branch": {
                                                "type": "string",
                                                "description": "The name of the branch containing the configuration that you want to\napply to the nodes.  DEPRECATED.\n"
                                            },
                                            "enable_cfs": {
                                                "type": "boolean",
                                                "description": "Whether to enable the Configuration Framework Service (CFS).\nChoices: true/false\n",
                                                "default": true
                                            },
                                            "cfs": {
                                                "type": "object",
                                                "description": "CFS Parameters is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled.\n",
                                                "properties": {
                                                    "clone_url": {
                                                        "type": "string",
                                                        "description": "The clone url for the repository providing the configuration.\n"
                                                    },
                                                    "branch": {
                                                        "type": "string",
                                                        "description": "The name of the branch containing the configuration that you want to\napply to the nodes. Mutually exclusive with commit.\n"
                                                    },
                                                    "commit": {
                                                        "type": "string",
                                                        "description": "The commit id of the configuration that you want to\napply to the nodes. Mutually exclusive with branch.\n"
                                                    },
                                                    "playbook": {
                                                        "type": "string",
                                                        "description": "The name of the playbook to run for configuration. The file path must be specified\nrelative to the base directory of the config repo.\n"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "partition": {
                                                "type": "string",
                                                "description": "The machine partition to operate on.\n"
                                            },
                                            "boot_sets": {
                                                "type": "object",
                                                "additionalProperties": {
                                                    "description": "A boot set defines a collection of nodes and the information about the\nboot artifacts and parameters to be sent to each node over the specified\nnetwork to enable these nodes to boot. When multiple boot sets are used\nin a session template, the boot_ordinal and shtudown_ordinal indicate\nthe order in which boot sets need to be acted upon. Boot sets sharing\nthe same ordinal number will be addressed at the same time.\n",
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string",
                                                            "description": "The Boot Set name.\n"
                                                        },
                                                        "boot_ordinal": {
                                                            "type": "integer",
                                                            "minimum": 0,
                                                            "description": "The boot ordinal. This will establish the order for boot set operations.\nBoot sets boot in order from the lowest to highest boot_ordinal.\n"
                                                        },
                                                        "shutdown_ordinal": {
                                                            "type": "integer",
                                                            "minimum": 0,
                                                            "description": "The shutdown ordinal. This will establish the order for boot set\nshutdown operations. Sets shutdown from low to high shutdown_ordinal.\n"
                                                        },
                                                        "path": {
                                                            "type": "string",
                                                            "description": "A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.\nIt will be processed based on the type attribute.\n"
                                                        },
                                                        "type": {
                                                            "type": "string",
                                                            "description": "The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n"
                                                        },
                                                        "etag": {
                                                            "type": "string",
                                                            "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.\n"
                                                        },
                                                        "kernel_parameters": {
                                                            "type": "string",
                                                            "description": "The kernel parameters to use to boot the nodes.\n"
                                                        },
                                                        "network": {
                                                            "type": "string",
                                                            "description": "The network over which the node will boot from.\nChoices:  NMN -- Node Management Network\npattern: '^(?i)nmn$'\n"
                                                        },
                                                        "node_list": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "minItems": 1,
                                                            "description": "The node list. This is an explicit mapping against hardware xnames.\n"
                                                        },
                                                        "node_roles_groups": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "minItems": 1,
                                                            "description": "The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.\n"
                                                        },
                                                        "node_groups": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "minItems": 1,
                                                            "description": "The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user defined groups in SMD.\n"
                                                        },
                                                        "rootfs_provider": {
                                                            "type": "string",
                                                            "description": "The root file system provider.\n"
                                                        },
                                                        "rootfs_provider_passthrough": {
                                                            "type": "string",
                                                            "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n"
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "path",
                                                        "type"
                                                    ]
                                                }
                                            },
                                            "links": {
                                                "type": "array",
                                                "readOnly": true,
                                                "items": {
                                                    "description": "Link to other resources",
                                                    "type": "object",
                                                    "properties": {
                                                        "rel": {
                                                            "type": "string"
                                                        },
                                                        "href": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            }
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "additionalProperties": false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/sessiontemplate/{session_template_id}": {
            "parameters": [
                {
                    "name": "session_template_id",
                    "in": "path",
                    "description": "Session Template ID",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "get": {
                "summary": "Get session template by id",
                "description": "Get session template by session_template_id.\nThe session_template_id corresponds to the *name*\nof the session template.\n",
                "tags": [
                    "sessiontemplate"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.sessiontemplate",
                "operationId": "get_v1_sessiontemplate",
                "responses": {
                    "200": {
                        "description": "Session template details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "A Session Template object represents a collection of resources and metadata.\nA session template is used to create a Session which when combined with an\naction (i.e. boot, reconfigure, reboot, shutdown) will create a K8s BOA job\nto complete the required tasks for the operation.\n\nA Session Template can be created from a JSON structure.  It will return\na SessionTemplate name if successful.\nThis name is required when creating a Session.\n\n## Link Relationships\n\n* self : The session object\n",
                                    "properties": {
                                        "templateUrl": {
                                            "type": "string",
                                            "description": "The URL to the resource providing the session template data.\nSpecify either a templateURL, or the other session\ntemplate parameters (excluding templateBody).\n"
                                        },
                                        "templateBody": {
                                            "type": "string",
                                            "description": "Do not use. To be removed.\n"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the SessionTemplate. The length of the name is restricted to 45 characters.",
                                            "example": "cle-1.0.0",
                                            "minLength": 1,
                                            "maxLength": 45,
                                            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "An optional description for the session template.\n"
                                        },
                                        "cfs_url": {
                                            "type": "string",
                                            "description": "The url for the repository providing the configuration. DEPRECATED\n"
                                        },
                                        "cfs_branch": {
                                            "type": "string",
                                            "description": "The name of the branch containing the configuration that you want to\napply to the nodes.  DEPRECATED.\n"
                                        },
                                        "enable_cfs": {
                                            "type": "boolean",
                                            "description": "Whether to enable the Configuration Framework Service (CFS).\nChoices: true/false\n",
                                            "default": true
                                        },
                                        "cfs": {
                                            "type": "object",
                                            "description": "CFS Parameters is the collection of parameters that are passed to the Configuration\nFramework Service when configuration is enabled.\n",
                                            "properties": {
                                                "clone_url": {
                                                    "type": "string",
                                                    "description": "The clone url for the repository providing the configuration.\n"
                                                },
                                                "branch": {
                                                    "type": "string",
                                                    "description": "The name of the branch containing the configuration that you want to\napply to the nodes. Mutually exclusive with commit.\n"
                                                },
                                                "commit": {
                                                    "type": "string",
                                                    "description": "The commit id of the configuration that you want to\napply to the nodes. Mutually exclusive with branch.\n"
                                                },
                                                "playbook": {
                                                    "type": "string",
                                                    "description": "The name of the playbook to run for configuration. The file path must be specified\nrelative to the base directory of the config repo.\n"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "partition": {
                                            "type": "string",
                                            "description": "The machine partition to operate on.\n"
                                        },
                                        "boot_sets": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "description": "A boot set defines a collection of nodes and the information about the\nboot artifacts and parameters to be sent to each node over the specified\nnetwork to enable these nodes to boot. When multiple boot sets are used\nin a session template, the boot_ordinal and shtudown_ordinal indicate\nthe order in which boot sets need to be acted upon. Boot sets sharing\nthe same ordinal number will be addressed at the same time.\n",
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "The Boot Set name.\n"
                                                    },
                                                    "boot_ordinal": {
                                                        "type": "integer",
                                                        "minimum": 0,
                                                        "description": "The boot ordinal. This will establish the order for boot set operations.\nBoot sets boot in order from the lowest to highest boot_ordinal.\n"
                                                    },
                                                    "shutdown_ordinal": {
                                                        "type": "integer",
                                                        "minimum": 0,
                                                        "description": "The shutdown ordinal. This will establish the order for boot set\nshutdown operations. Sets shutdown from low to high shutdown_ordinal.\n"
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "A path identifying the metadata describing the components of the boot image. This could be a URI, URL, etc.\nIt will be processed based on the type attribute.\n"
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "The mime type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.\n"
                                                    },
                                                    "etag": {
                                                        "type": "string",
                                                        "description": "This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.\n"
                                                    },
                                                    "kernel_parameters": {
                                                        "type": "string",
                                                        "description": "The kernel parameters to use to boot the nodes.\n"
                                                    },
                                                    "network": {
                                                        "type": "string",
                                                        "description": "The network over which the node will boot from.\nChoices:  NMN -- Node Management Network\npattern: '^(?i)nmn$'\n"
                                                    },
                                                    "node_list": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "minItems": 1,
                                                        "description": "The node list. This is an explicit mapping against hardware xnames.\n"
                                                    },
                                                    "node_roles_groups": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "minItems": 1,
                                                        "description": "The node roles list. Allows actions against nodes with associated roles. Roles are defined in SMD.\n"
                                                    },
                                                    "node_groups": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "minItems": 1,
                                                        "description": "The node groups list. Allows actions against associated nodes by logical groupings. Logical groups are user defined groups in SMD.\n"
                                                    },
                                                    "rootfs_provider": {
                                                        "type": "string",
                                                        "description": "The root file system provider.\n"
                                                    },
                                                    "rootfs_provider_passthrough": {
                                                        "type": "string",
                                                        "description": "The root file system provider passthrough.\nThese are additional kernel parameters that will be appended to\nthe 'rootfs=<protocol>' kernel parameter\n"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "required": [
                                                    "path",
                                                    "type"
                                                ]
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "readOnly": true,
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The session template was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a session template",
                "description": "Delete a session template.",
                "tags": [
                    "sessiontemplate"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.sessiontemplate",
                "operationId": "delete_v1_sessiontemplate",
                "responses": {
                    "204": {
                        "description": "The session template was deleted."
                    },
                    "404": {
                        "description": "The session template was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/session": {
            "post": {
                "summary": "Create a session",
                "description": "The creation of a session performs the operation\nspecified in the SessionCreateRequest\non the boot set(s) defined in the session template.\n",
                "tags": [
                    "session"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.session",
                "operationId": "create_v1_session",
                "requestBody": {
                    "description": "A JSON object for creating a Session",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "A Session object\n\n## Link Relationships\n\n* self : The session object\n",
                                "type": "object",
                                "properties": {
                                    "operation": {
                                        "type": "string",
                                        "description": "A Session represents an operation on a SessionTemplate. The creation of a session effectively results in the creation of a K8s Boot Orchestration Agent (BOA) job to perform the duties required to complete the operation.\nOperation -- An operation to perform on nodes in this session.\n\n    Boot         Boot nodes that are off.\n\n    Configure    Reconfigure the nodes using the Configuration Framework\n                 Service (CFS).\n\n    Reboot       Gracefully power down nodes that are on and then power\n                 them back up.\n\n    Shutdown     Gracefully power down nodes that are on.\n",
                                        "pattern": "^(?i)boot|configure|reboot|shutdown$"
                                    },
                                    "templateUuid": {
                                        "type": "string",
                                        "description": "The name of the Session Template",
                                        "example": "my-session-template",
                                        "format": "string"
                                    },
                                    "limit": {
                                        "type": "string",
                                        "description": "A comma seperated of nodes, groups or roles to which the session will be limited. Components are treated as OR operations unless preceded by \"&\" for AND or \"!\" for NOT.\n"
                                    },
                                    "links": {
                                        "type": "array",
                                        "readOnly": true,
                                        "items": {
                                            "description": "Link to other resources",
                                            "type": "object",
                                            "properties": {
                                                "rel": {
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                },
                                "required": [
                                    "operation",
                                    "templateUuid"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A Session object\n\n## Link Relationships\n\n* self : The session object\n",
                                    "type": "object",
                                    "properties": {
                                        "operation": {
                                            "type": "string",
                                            "description": "A Session represents an operation on a SessionTemplate. The creation of a session effectively results in the creation of a K8s Boot Orchestration Agent (BOA) job to perform the duties required to complete the operation.\nOperation -- An operation to perform on nodes in this session.\n\n    Boot         Boot nodes that are off.\n\n    Configure    Reconfigure the nodes using the Configuration Framework\n                 Service (CFS).\n\n    Reboot       Gracefully power down nodes that are on and then power\n                 them back up.\n\n    Shutdown     Gracefully power down nodes that are on.\n",
                                            "pattern": "^(?i)boot|configure|reboot|shutdown$"
                                        },
                                        "templateUuid": {
                                            "type": "string",
                                            "description": "The name of the Session Template",
                                            "example": "my-session-template",
                                            "format": "string"
                                        },
                                        "limit": {
                                            "type": "string",
                                            "description": "A comma seperated of nodes, groups or roles to which the session will be limited. Components are treated as OR operations unless preceded by \"&\" for AND or \"!\" for NOT.\n"
                                        },
                                        "links": {
                                            "type": "array",
                                            "readOnly": true,
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "required": [
                                        "operation",
                                        "templateUuid"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "List sessions",
                "description": "List all sessions, including those in progress and those complete.\n",
                "tags": [
                    "session"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.session",
                "operationId": "get_v1_sessions",
                "responses": {
                    "200": {
                        "description": "A collection of Sessions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "description": "A Session object\n\n## Link Relationships\n\n* self : The session object\n",
                                        "type": "object",
                                        "properties": {
                                            "operation": {
                                                "type": "string",
                                                "description": "A Session represents an operation on a SessionTemplate. The creation of a session effectively results in the creation of a K8s Boot Orchestration Agent (BOA) job to perform the duties required to complete the operation.\nOperation -- An operation to perform on nodes in this session.\n\n    Boot         Boot nodes that are off.\n\n    Configure    Reconfigure the nodes using the Configuration Framework\n                 Service (CFS).\n\n    Reboot       Gracefully power down nodes that are on and then power\n                 them back up.\n\n    Shutdown     Gracefully power down nodes that are on.\n",
                                                "pattern": "^(?i)boot|configure|reboot|shutdown$"
                                            },
                                            "templateUuid": {
                                                "type": "string",
                                                "description": "The name of the Session Template",
                                                "example": "my-session-template",
                                                "format": "string"
                                            },
                                            "limit": {
                                                "type": "string",
                                                "description": "A comma seperated of nodes, groups or roles to which the session will be limited. Components are treated as OR operations unless preceded by \"&\" for AND or \"!\" for NOT.\n"
                                            },
                                            "links": {
                                                "type": "array",
                                                "readOnly": true,
                                                "items": {
                                                    "description": "Link to other resources",
                                                    "type": "object",
                                                    "properties": {
                                                        "rel": {
                                                            "type": "string"
                                                        },
                                                        "href": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            }
                                        },
                                        "required": [
                                            "operation",
                                            "templateUuid"
                                        ],
                                        "additionalProperties": false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/session/{session_id}": {
            "get": {
                "summary": "Get session details by id",
                "description": "Get session details by session_id.",
                "tags": [
                    "session"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.session",
                "operationId": "get_v1_session",
                "responses": {
                    "200": {
                        "description": "Session details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A Session object\n\n## Link Relationships\n\n* self : The session object\n",
                                    "type": "object",
                                    "properties": {
                                        "operation": {
                                            "type": "string",
                                            "description": "A Session represents an operation on a SessionTemplate. The creation of a session effectively results in the creation of a K8s Boot Orchestration Agent (BOA) job to perform the duties required to complete the operation.\nOperation -- An operation to perform on nodes in this session.\n\n    Boot         Boot nodes that are off.\n\n    Configure    Reconfigure the nodes using the Configuration Framework\n                 Service (CFS).\n\n    Reboot       Gracefully power down nodes that are on and then power\n                 them back up.\n\n    Shutdown     Gracefully power down nodes that are on.\n",
                                            "pattern": "^(?i)boot|configure|reboot|shutdown$"
                                        },
                                        "templateUuid": {
                                            "type": "string",
                                            "description": "The name of the Session Template",
                                            "example": "my-session-template",
                                            "format": "string"
                                        },
                                        "limit": {
                                            "type": "string",
                                            "description": "A comma seperated of nodes, groups or roles to which the session will be limited. Components are treated as OR operations unless preceded by \"&\" for AND or \"!\" for NOT.\n"
                                        },
                                        "links": {
                                            "type": "array",
                                            "readOnly": true,
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "required": [
                                        "operation",
                                        "templateUuid"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The session was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete session by id",
                "description": "Delete session by session_id.",
                "tags": [
                    "session"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.session",
                "operationId": "delete_v1_session",
                "responses": {
                    "204": {
                        "description": "The session was deleted."
                    },
                    "404": {
                        "description": "The session was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "description": "Session ID",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v1/session/{session_id}/status": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "description": "Session ID",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "get": {
                "summary": "A list of the statuses for the different boot sets.",
                "description": "A list of the statuses for the different boot sets.\n",
                "tags": [
                    "session"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "get_v1_session_status",
                "responses": {
                    "200": {
                        "description": "A list of Boot Set Statuses and metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "The status for a Boot Session. It is a list of all of the Boot Set Statuses in the session.\n## Link Relationships\n\n* self : The session object\n* boot sets: URL to access the Boot Set status\n",
                                    "properties": {
                                        "metadata": {
                                            "type": "object",
                                            "description": "The status metadata\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "The start time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "stop_time": {
                                                    "type": "string",
                                                    "description": "The stop time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "complete": {
                                                    "type": "boolean",
                                                    "description": "Is the object's status complete\n",
                                                    "example": true
                                                },
                                                "in_progress": {
                                                    "type": "boolean",
                                                    "description": "Is the object still doing something\n",
                                                    "example": false
                                                },
                                                "error_count": {
                                                    "type": "integer",
                                                    "description": "How many errors were encountered\n",
                                                    "example": 0
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "boot_sets": {
                                            "description": "The boot sets in the Session\n",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "minItems": 1
                                        },
                                        "id": {
                                            "type": "string",
                                            "description": "Session ID"
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The session was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create the initial session status",
                "description": "Creates the initial session status.\n",
                "tags": [
                    "session",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "create_v1_session_status",
                "requestBody": {
                    "description": "A JSON object for creating the status for a session",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "The status for a Boot Session. It is a list of all of the Boot Set Statuses in the session.\n## Link Relationships\n\n* self : The session object\n* boot sets: URL to access the Boot Set status\n",
                                "properties": {
                                    "metadata": {
                                        "type": "object",
                                        "description": "The status metadata\n",
                                        "properties": {
                                            "start_time": {
                                                "type": "string",
                                                "description": "The start time\n",
                                                "example": "2020-04-24T12:00"
                                            },
                                            "stop_time": {
                                                "type": "string",
                                                "description": "The stop time\n",
                                                "example": "2020-04-24T12:00"
                                            },
                                            "complete": {
                                                "type": "boolean",
                                                "description": "Is the object's status complete\n",
                                                "example": true
                                            },
                                            "in_progress": {
                                                "type": "boolean",
                                                "description": "Is the object still doing something\n",
                                                "example": false
                                            },
                                            "error_count": {
                                                "type": "integer",
                                                "description": "How many errors were encountered\n",
                                                "example": 0
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boot_sets": {
                                        "description": "The boot sets in the Session\n",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minItems": 1
                                    },
                                    "id": {
                                        "type": "string",
                                        "description": "Session ID"
                                    },
                                    "links": {
                                        "type": "array",
                                        "items": {
                                            "description": "Link to other resources",
                                            "type": "object",
                                            "properties": {
                                                "rel": {
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "A list of Boot Set Statuses and metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "The status for a Boot Session. It is a list of all of the Boot Set Statuses in the session.\n## Link Relationships\n\n* self : The session object\n* boot sets: URL to access the Boot Set status\n",
                                    "properties": {
                                        "metadata": {
                                            "type": "object",
                                            "description": "The status metadata\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "The start time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "stop_time": {
                                                    "type": "string",
                                                    "description": "The stop time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "complete": {
                                                    "type": "boolean",
                                                    "description": "Is the object's status complete\n",
                                                    "example": true
                                                },
                                                "in_progress": {
                                                    "type": "boolean",
                                                    "description": "Is the object still doing something\n",
                                                    "example": false
                                                },
                                                "error_count": {
                                                    "type": "integer",
                                                    "description": "How many errors were encountered\n",
                                                    "example": 0
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "boot_sets": {
                                            "description": "The boot sets in the Session\n",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "minItems": 1
                                        },
                                        "id": {
                                            "type": "string",
                                            "description": "Session ID"
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete the session status",
                "description": "Deletes an existing Session status\n",
                "tags": [
                    "session",
                    "cli_danger?You are about to delete the status for a session."
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "delete_v1_session_status",
                "responses": {
                    "204": {
                        "description": "The status was deleted successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/session/{session_id}/status/{boot_set_name}": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "description": "Session ID",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "boot_set_name",
                    "in": "path",
                    "description": "Boot set name",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "get": {
                "summary": "Get the status for a boot set.",
                "description": "Get the status for a boot set.",
                "tags": [
                    "session"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "get_v1_session_status_by_bootset",
                "responses": {
                    "200": {
                        "description": "A list of the Phase Statuses for the Boot Set and metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "The status for a Boot Set. It as a list of the phase statuses for the Boot Set.\n \n## Link Relationships\n\n* self : The session object\n* phase : A phase of the boot set\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "description": "Name of the Boot Set",
                                            "example": "Boot-Set"
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Session ID",
                                            "example": "Session-ID"
                                        },
                                        "metadata": {
                                            "type": "object",
                                            "description": "The status metadata\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "The start time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "stop_time": {
                                                    "type": "string",
                                                    "description": "The stop time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "complete": {
                                                    "type": "boolean",
                                                    "description": "Is the object's status complete\n",
                                                    "example": true
                                                },
                                                "in_progress": {
                                                    "type": "boolean",
                                                    "description": "Is the object still doing something\n",
                                                    "example": false
                                                },
                                                "error_count": {
                                                    "type": "integer",
                                                    "description": "How many errors were encountered\n",
                                                    "example": 0
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "phases": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "description": "The phase's status. It is a list of all of the nodes in the phase and\nwhat category those nodes fall into within the phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "Name of the Phase \n",
                                                        "example": "Boot",
                                                        "pattern": "^(?i)boot|configure|shutdown$"
                                                    },
                                                    "metadata": {
                                                        "type": "object",
                                                        "description": "The status metadata\n",
                                                        "properties": {
                                                            "start_time": {
                                                                "type": "string",
                                                                "description": "The start time\n",
                                                                "example": "2020-04-24T12:00"
                                                            },
                                                            "stop_time": {
                                                                "type": "string",
                                                                "description": "The stop time\n",
                                                                "example": "2020-04-24T12:00"
                                                            },
                                                            "complete": {
                                                                "type": "boolean",
                                                                "description": "Is the object's status complete\n",
                                                                "example": true
                                                            },
                                                            "in_progress": {
                                                                "type": "boolean",
                                                                "description": "Is the object still doing something\n",
                                                                "example": false
                                                            },
                                                            "error_count": {
                                                                "type": "integer",
                                                                "description": "How many errors were encountered\n",
                                                                "example": 0
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "categories": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "Name of the Phase Category\n",
                                                                    "example": "Succeeded",
                                                                    "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                                                                },
                                                                "node_list": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "string",
                                                                        "example": [
                                                                            "x3000c0s19b1n0",
                                                                            "x3000c0s19b2n0"
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "errors": {
                                                        "type": "object",
                                                        "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                                                        "additionalProperties": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": [
                                                                    "x3000c0s19b1n0",
                                                                    "x3000c0s19b2n0"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The session was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a Boot Set Status",
                "description": "Create a status for a Boot Set\n",
                "tags": [
                    "session",
                    "status",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "create_v1_boot_set_status",
                "requestBody": {
                    "description": "A JSON object for creating a status for a Boot Set",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "The status for a Boot Set. It as a list of the phase statuses for the Boot Set.\n \n## Link Relationships\n\n* self : The session object\n* phase : A phase of the boot set\n",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "Name of the Boot Set",
                                        "example": "Boot-Set"
                                    },
                                    "session": {
                                        "type": "string",
                                        "description": "Session ID",
                                        "example": "Session-ID"
                                    },
                                    "metadata": {
                                        "type": "object",
                                        "description": "The status metadata\n",
                                        "properties": {
                                            "start_time": {
                                                "type": "string",
                                                "description": "The start time\n",
                                                "example": "2020-04-24T12:00"
                                            },
                                            "stop_time": {
                                                "type": "string",
                                                "description": "The stop time\n",
                                                "example": "2020-04-24T12:00"
                                            },
                                            "complete": {
                                                "type": "boolean",
                                                "description": "Is the object's status complete\n",
                                                "example": true
                                            },
                                            "in_progress": {
                                                "type": "boolean",
                                                "description": "Is the object still doing something\n",
                                                "example": false
                                            },
                                            "error_count": {
                                                "type": "integer",
                                                "description": "How many errors were encountered\n",
                                                "example": 0
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "phases": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "description": "The phase's status. It is a list of all of the nodes in the phase and\nwhat category those nodes fall into within the phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name of the Phase \n",
                                                    "example": "Boot",
                                                    "pattern": "^(?i)boot|configure|shutdown$"
                                                },
                                                "metadata": {
                                                    "type": "object",
                                                    "description": "The status metadata\n",
                                                    "properties": {
                                                        "start_time": {
                                                            "type": "string",
                                                            "description": "The start time\n",
                                                            "example": "2020-04-24T12:00"
                                                        },
                                                        "stop_time": {
                                                            "type": "string",
                                                            "description": "The stop time\n",
                                                            "example": "2020-04-24T12:00"
                                                        },
                                                        "complete": {
                                                            "type": "boolean",
                                                            "description": "Is the object's status complete\n",
                                                            "example": true
                                                        },
                                                        "in_progress": {
                                                            "type": "boolean",
                                                            "description": "Is the object still doing something\n",
                                                            "example": false
                                                        },
                                                        "error_count": {
                                                            "type": "integer",
                                                            "description": "How many errors were encountered\n",
                                                            "example": 0
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "categories": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                                        "properties": {
                                                            "name": {
                                                                "type": "string",
                                                                "description": "Name of the Phase Category\n",
                                                                "example": "Succeeded",
                                                                "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                                                            },
                                                            "node_list": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string",
                                                                    "example": [
                                                                        "x3000c0s19b1n0",
                                                                        "x3000c0s19b2n0"
                                                                    ]
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "errors": {
                                                    "type": "object",
                                                    "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                                                    "additionalProperties": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string",
                                                            "example": [
                                                                "x3000c0s19b1n0",
                                                                "x3000c0s19b2n0"
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "links": {
                                        "type": "array",
                                        "items": {
                                            "description": "Link to other resources",
                                            "type": "object",
                                            "properties": {
                                                "rel": {
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The created Boot Set status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "The status for a Boot Set. It as a list of the phase statuses for the Boot Set.\n \n## Link Relationships\n\n* self : The session object\n* phase : A phase of the boot set\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "description": "Name of the Boot Set",
                                            "example": "Boot-Set"
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Session ID",
                                            "example": "Session-ID"
                                        },
                                        "metadata": {
                                            "type": "object",
                                            "description": "The status metadata\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "The start time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "stop_time": {
                                                    "type": "string",
                                                    "description": "The stop time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "complete": {
                                                    "type": "boolean",
                                                    "description": "Is the object's status complete\n",
                                                    "example": true
                                                },
                                                "in_progress": {
                                                    "type": "boolean",
                                                    "description": "Is the object still doing something\n",
                                                    "example": false
                                                },
                                                "error_count": {
                                                    "type": "integer",
                                                    "description": "How many errors were encountered\n",
                                                    "example": 0
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "phases": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "description": "The phase's status. It is a list of all of the nodes in the phase and\nwhat category those nodes fall into within the phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "Name of the Phase \n",
                                                        "example": "Boot",
                                                        "pattern": "^(?i)boot|configure|shutdown$"
                                                    },
                                                    "metadata": {
                                                        "type": "object",
                                                        "description": "The status metadata\n",
                                                        "properties": {
                                                            "start_time": {
                                                                "type": "string",
                                                                "description": "The start time\n",
                                                                "example": "2020-04-24T12:00"
                                                            },
                                                            "stop_time": {
                                                                "type": "string",
                                                                "description": "The stop time\n",
                                                                "example": "2020-04-24T12:00"
                                                            },
                                                            "complete": {
                                                                "type": "boolean",
                                                                "description": "Is the object's status complete\n",
                                                                "example": true
                                                            },
                                                            "in_progress": {
                                                                "type": "boolean",
                                                                "description": "Is the object still doing something\n",
                                                                "example": false
                                                            },
                                                            "error_count": {
                                                                "type": "integer",
                                                                "description": "How many errors were encountered\n",
                                                                "example": 0
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "categories": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "Name of the Phase Category\n",
                                                                    "example": "Succeeded",
                                                                    "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                                                                },
                                                                "node_list": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "string",
                                                                        "example": [
                                                                            "x3000c0s19b1n0",
                                                                            "x3000c0s19b2n0"
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "errors": {
                                                        "type": "object",
                                                        "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                                                        "additionalProperties": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": [
                                                                    "x3000c0s19b1n0",
                                                                    "x3000c0s19b2n0"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update the status.",
                "description": "This will change the status for one or more nodes within\nthe boot set.\n",
                "tags": [
                    "session",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "update_v1_session_status_by_bootset",
                "requestBody": {
                    "description": "A JSON object for updating the status for a session",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "description": "This is the payload sent during an update request. It contains \nupdates to which categories nodes are in.\n",
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "update_type": {
                                                    "description": "The type of update data",
                                                    "pattern": "NodeChangeList",
                                                    "type": "string"
                                                },
                                                "phase": {
                                                    "description": "The phase that this data belongs to. If  blank, it belongs to\nthe Boot Set itself, which only applies to the GenericMetadata type.\n",
                                                    "pattern": "(?i)shutdown|boot|configure",
                                                    "type": "string"
                                                },
                                                "data": {
                                                    "type": "object",
                                                    "description": "The information used to update the status of a node list. It moves nodes from\none category to another within a phase.\n",
                                                    "properties": {
                                                        "phase": {
                                                            "type": "string",
                                                            "example": "Boot"
                                                        },
                                                        "source": {
                                                            "type": "string",
                                                            "example": "in_progress"
                                                        },
                                                        "destination": {
                                                            "type": "string",
                                                            "example": "Succeeded"
                                                        },
                                                        "node_list": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": [
                                                                    "x3000c0s19b1n0",
                                                                    "x3000c0s19b2n0"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "phase",
                                                        "source",
                                                        "destination",
                                                        "node_list"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "description": "This is the payload sent during an update request. It contains\nupdates to which errors have occurred and which nodes encountered those errors\n",
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "update_type": {
                                                    "description": "The type of update data",
                                                    "pattern": "NodeErrorsList",
                                                    "type": "string"
                                                },
                                                "phase": {
                                                    "description": "The phase that this data belongs to. If  blank, it belongs to\nthe Boot Set itself, which only applies to the GenericMetadata type.\n",
                                                    "pattern": "(?i)shutdown|boot|configure",
                                                    "type": "string"
                                                },
                                                "data": {
                                                    "type": "object",
                                                    "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                                                    "additionalProperties": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string",
                                                            "example": [
                                                                "x3000c0s19b1n0",
                                                                "x3000c0s19b2n0"
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "description": "This is the payload sent during an update request. It contains\nupdates to metadata, specifically start and stop times\n",
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "update_type": {
                                                    "description": "The type of update data",
                                                    "pattern": "GenericMetadata",
                                                    "type": "string"
                                                },
                                                "phase": {
                                                    "description": "The phase that this data belongs to. If  blank, it belongs to\nthe Boot Set itself, which only applies to the GenericMetadata type.\n",
                                                    "pattern": "(?i)shutdown|boot|configure",
                                                    "type": "string"
                                                },
                                                "data": {
                                                    "type": "object",
                                                    "description": "The status metadata\n",
                                                    "properties": {
                                                        "start_time": {
                                                            "type": "string",
                                                            "description": "The start time\n",
                                                            "example": "2020-04-24T12:00"
                                                        },
                                                        "stop_time": {
                                                            "type": "string",
                                                            "description": "The stop time\n",
                                                            "example": "2020-04-24T12:00"
                                                        },
                                                        "complete": {
                                                            "type": "boolean",
                                                            "description": "Is the object's status complete\n",
                                                            "example": true
                                                        },
                                                        "in_progress": {
                                                            "type": "boolean",
                                                            "description": "Is the object still doing something\n",
                                                            "example": false
                                                        },
                                                        "error_count": {
                                                            "type": "integer",
                                                            "description": "How many errors were encountered\n",
                                                            "example": 0
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A list of Boot Set Statuses and metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "The status for a Boot Set. It as a list of the phase statuses for the Boot Set.\n \n## Link Relationships\n\n* self : The session object\n* phase : A phase of the boot set\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "description": "Name of the Boot Set",
                                            "example": "Boot-Set"
                                        },
                                        "session": {
                                            "type": "string",
                                            "description": "Session ID",
                                            "example": "Session-ID"
                                        },
                                        "metadata": {
                                            "type": "object",
                                            "description": "The status metadata\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "The start time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "stop_time": {
                                                    "type": "string",
                                                    "description": "The stop time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "complete": {
                                                    "type": "boolean",
                                                    "description": "Is the object's status complete\n",
                                                    "example": true
                                                },
                                                "in_progress": {
                                                    "type": "boolean",
                                                    "description": "Is the object still doing something\n",
                                                    "example": false
                                                },
                                                "error_count": {
                                                    "type": "integer",
                                                    "description": "How many errors were encountered\n",
                                                    "example": 0
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "phases": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "description": "The phase's status. It is a list of all of the nodes in the phase and\nwhat category those nodes fall into within the phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "Name of the Phase \n",
                                                        "example": "Boot",
                                                        "pattern": "^(?i)boot|configure|shutdown$"
                                                    },
                                                    "metadata": {
                                                        "type": "object",
                                                        "description": "The status metadata\n",
                                                        "properties": {
                                                            "start_time": {
                                                                "type": "string",
                                                                "description": "The start time\n",
                                                                "example": "2020-04-24T12:00"
                                                            },
                                                            "stop_time": {
                                                                "type": "string",
                                                                "description": "The stop time\n",
                                                                "example": "2020-04-24T12:00"
                                                            },
                                                            "complete": {
                                                                "type": "boolean",
                                                                "description": "Is the object's status complete\n",
                                                                "example": true
                                                            },
                                                            "in_progress": {
                                                                "type": "boolean",
                                                                "description": "Is the object still doing something\n",
                                                                "example": false
                                                            },
                                                            "error_count": {
                                                                "type": "integer",
                                                                "description": "How many errors were encountered\n",
                                                                "example": 0
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    },
                                                    "categories": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "Name of the Phase Category\n",
                                                                    "example": "Succeeded",
                                                                    "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                                                                },
                                                                "node_list": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "string",
                                                                        "example": [
                                                                            "x3000c0s19b1n0",
                                                                            "x3000c0s19b2n0"
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "errors": {
                                                        "type": "object",
                                                        "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                                                        "additionalProperties": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": [
                                                                    "x3000c0s19b1n0",
                                                                    "x3000c0s19b2n0"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The session was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete the Boot Set status",
                "description": "Deletes an existing Boot Set status\n",
                "tags": [
                    "session",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "delete_v1_boot_set_status",
                "responses": {
                    "204": {
                        "description": "The status was deleted successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/session/{session_id}/status/{boot_set_name}/{phase_name}": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "description": "Session ID",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "boot_set_name",
                    "in": "path",
                    "description": "Boot set name",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "phase_name",
                    "in": "path",
                    "description": "The phase name",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "get": {
                "summary": "Get the status for a specific boot set and phase.",
                "description": "Get the status for a specific boot set and phase.",
                "tags": [
                    "session",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "get_v1_session_status_by_bootset_and_phase",
                "responses": {
                    "200": {
                        "description": "A list of the nodes in the Phase and Category",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "The phase's status. It is a list of all of the nodes in the phase and\nwhat category those nodes fall into within the phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the Phase \n",
                                            "example": "Boot",
                                            "pattern": "^(?i)boot|configure|shutdown$"
                                        },
                                        "metadata": {
                                            "type": "object",
                                            "description": "The status metadata\n",
                                            "properties": {
                                                "start_time": {
                                                    "type": "string",
                                                    "description": "The start time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "stop_time": {
                                                    "type": "string",
                                                    "description": "The stop time\n",
                                                    "example": "2020-04-24T12:00"
                                                },
                                                "complete": {
                                                    "type": "boolean",
                                                    "description": "Is the object's status complete\n",
                                                    "example": true
                                                },
                                                "in_progress": {
                                                    "type": "boolean",
                                                    "description": "Is the object still doing something\n",
                                                    "example": false
                                                },
                                                "error_count": {
                                                    "type": "integer",
                                                    "description": "How many errors were encountered\n",
                                                    "example": 0
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "categories": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "Name of the Phase Category\n",
                                                        "example": "Succeeded",
                                                        "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                                                    },
                                                    "node_list": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string",
                                                            "example": [
                                                                "x3000c0s19b1n0",
                                                                "x3000c0s19b2n0"
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "errors": {
                                            "type": "object",
                                            "description": "Categorizing nodes into failures by the type of error they have.\nThis is an additive characterization. Nodes will be added to existing errors.\nThis does not overwrite previously existing errors.\n",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": [
                                                        "x3000c0s19b1n0",
                                                        "x3000c0s19b2n0"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The session was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/session/{session_id}/status/{boot_set_name}/{phase_name}/{category_name}": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "description": "Session ID",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "boot_set_name",
                    "in": "path",
                    "description": "Boot set name",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "phase_name",
                    "in": "path",
                    "description": "The phase name",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "category_name",
                    "in": "path",
                    "description": "The category name",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "get": {
                "summary": "Get the status for a specific boot set, phase, and category.",
                "description": "Get the status for a specific boot set, phase, and category.",
                "tags": [
                    "session",
                    "cli_ignore"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.status",
                "operationId": "get_v1_session_status_by_bootset_and_phase_and_category",
                "responses": {
                    "200": {
                        "description": "A list of the nodes in the Phase and Category",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "A list of the nodes in a given category within a phase.\n\n## Link Relationships\n\n* self : The session object\n",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the Phase Category\n",
                                            "example": "Succeeded",
                                            "pattern": "^(?i)not_started|in_progress|succeeded|failed|excluded$"
                                        },
                                        "node_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": [
                                                    "x3000c0s19b1n0",
                                                    "x3000c0s19b2n0"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The session was not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/version": {
            "get": {
                "summary": "Get API version",
                "tags": [
                    "version"
                ],
                "x-openapi-router-controller": "bos.controllers.v1.base",
                "operationId": "v1_get_version",
                "responses": {
                    "200": {
                        "description": "Get version details\n\nThe versioning system uses [semver](https://semver.org/).\n\n## Link Relationships\n\n* self : Link to itself\n* versions : Link back to the versions resource\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Version data",
                                    "type": "object",
                                    "properties": {
                                        "major": {
                                            "type": "integer"
                                        },
                                        "minor": {
                                            "type": "integer"
                                        },
                                        "patch": {
                                            "type": "integer"
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "description": "Link to other resources",
                                                "type": "object",
                                                "properties": {
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "href": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An Internal Server Error occurred handling the request.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "description": "An error response for RFC 7807 problem details.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Relative URI reference to the type of problem which includes human readable documentation.",
                                            "type": "string",
                                            "format": "uri",
                                            "default": "about:blank"
                                        },
                                        "title": {
                                            "description": "Short, human-readable summary of the problem, should not change by occurrence.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "HTTP status code",
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "instance": {
                                            "description": "A relative URI reference that identifies the specific occurrence of the problem",
                                            "format": "uri",
                                            "type": "string"
                                        },
                                        "detail": {
                                            "description": "A human-readable explanation specific to this occurrence of the problem. Focus on helping correct the problem, rather than giving debugging information.",
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}