# Cray Image Management Service API Specification
# Copyright 2019, Cray Inc. All rights reserved.
openapi: 3.0.2

info:
  description: >
    The Image Management Service (IMS) creates and customizes
    boot images which run on compute nodes.
    A boot image consists of multiple image
    artifacts including the root file system (rootfs), kernel and initrd. There are
    optionally additional artifacts such as debug symbols, etc. 


    IMS uses the open source Kiwi-NG tool to
    build image roots from compressed Kiwi image descriptions (recipes).
    Kiwi-NG is able to build images based on a variety of different
    Linux distributions, specifically SUSE, RHEL and
    their derivatives. 
    A user may choose to use the Cray-provided recipes or 
    customize Kiwi recipes to define the image
    to be built.


    IMS creates and customizes existing boot images and maintains metadata about the images
    and related artifacts. IMS accesses and stores the recipes, images, and related artifacts
    in the artifact repository. 


    ## Resources 

    ### /images 
      
      Manipulate ImageRecords, which relate multiple image artifact records together.


    ### /image-artifacts

      Manipulate ImageArtifactRecords, which associate IMS metadata with artifact repository metadata.

    ### /jobs  

      Initiate image creation or customization.  It creates the image which it uploads to 
      the artifact repository,
      and maintains associated metadata in IMS for subsequent access. It also customizes a pre-existing
      image.

    ### /public-keys

      Manage the public keys which enable ssh access. 
      Public-keys are created and uploaded by the
      administrator to allow access to ssh shells provided
      by IMS during image creation and customization.


    ### /recipes 

      Manipulate the RecipeRecord metadata about the Kiwi-NG recipes 
      which are stored in the artifact repository. 
      Recipes themselves define how an image is to be created including the
      RPMS that will be installed, the RPM repos to use, etc. 
       

    ## Workflows

      There are two main workflows using the IMS - image creation and image customization.  
      The IMS /jobs endpoint directs the creation of a new image, or 
      the customization of an existing image, depending on the POST /jobs request body parameter, job_type.
    
    ### Add a New Recipe
      

    #### GET /recipes 
       
      Obtain list of existing recipes which are registered with IMS.

    #### Upload recipe using CLI
       
      Upload a new recipe to the artifact repository using the cray artifacts command, if necessary.
      Refer to Administrator's Guide for instructions.
      
    #### POST /recipes
    
      Register new recipe with IMS. 

      
    ### Manage Public Keys
    
    #### GET /public-keys
    
      Obtain list of available public-keys.
       
    #### POST /public-keys
    
      Add a new public-key.
      

    ### Create a New Image
      
    #### GET /public-keys
    
    Get a list of available keys.
      
    #### GET /recipes
    
     Get recipe id.
      
      #### POST /jobs
      
      Use Kiwi-NG to create a new IMS image and image artifacts from a recipe,
      Specify job_type "create" in JobRecord. 
      Request body parameters supply the artifact_id of the recipe, and a public key.
      Upon success,
      the artifact repository contains the new image and the image artifacts,
      IMS contains a new ImageRecord and one or more ImageArtifactRecords - metadata for the new image.
      During the creation process, IMS may create an ssh shell for
      administrator interaction with the image for
      debugging, if necessary.  (enable_debug = true in JobRecord)
      
      
      
      ### Modify an Image
      
    #### GET /public-keys
    
    Get a list of available keys.
      
    #### GET /images
    
    To obtain a list of available images registered in IMS.
      
    #### POST /jobs
    
      To create a modified version of an existing IMS image, 
      specify job_type "customize". Specify the IMS artifact_id of the existing image, and
      a public key.  Creates a copy of the existing image,
      and then an interactive ssh
      in which to modify the copy of the image.  Upon success,
      the artifact repository contains the original image and a modified version of it. IMS contains 
      a new ImageRecord and one or more ImageArtifactRecords - metadata for the modified image.
      The original image is still intact.  A user may want to install additional software, 
      install licenses, change the timezone, add mount points, etc.
      
      
    
  version: 0.3.0
  title: Image Management Service (IMS) API
servers:
  - url: 'https://api-gw-service-nmn.local/apis/ims'
    description: The production IMS API server. Accessed from outside the mesh.
  - url: 'cray-ims.services.svc.cluster.local'
    description: Accessed from inside the mesh.


paths:
  /recipes:
    get:
      summary: Retrieve RecipeRecords 
      tags:
        - recipes
      description: Retrieve all RecipeRecords that are registered with the IMS.
      responses:
        '200':
          description: A collection of recipes
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecipeRecord'
                type: array
    post:
      summary: Create a new recipe
      tags:
        - recipes
      description: >
        Create a new RecipeRecord in IMS. 

        A compressed Kiwi-NG image description is actually stored in the artifact repository.
        This IMS RecipeRecord contains metadata for the recipe.


      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeRecord'
        description: Recipe record
        required: true
      responses:
        '201':
          $ref: '#/components/schemas/RecipeRecord'
        '400':
          $ref: '#/components/responses/NoInputProvided'
        '422':
          $ref: '#/components/responses/InvalidInputData'
    delete:
      summary: Delete all RecipeRecords
      tags:
        - recipes
        - cli_ignore
      description: Delete all RecipeRecords. 
      responses:
        '204':
          description: Recipe records deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
  '/recipes/{recipe_id}':
    parameters:
      - $ref: '#/components/parameters/recipe_id'
    get:
      summary: Retrieve RecipeRecord by id
      tags:
        - recipes
      description: Retrieve a RecipeRecord by id
      responses:
        '200':
          description: A recipe record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeRecord'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a RecipeRecord by id
      tags:
        - recipes
      description: Delete a recipe by artifact_id. The underlying artifact is not affected.
      responses:
        '204':
          description: Recipe record deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
  /images:
    get:
      summary: List all ImageRecords 
      tags:
        - images
      description: Retrieve a list of ImageRecords indicating images that have been registered
        with the IMS. The ImageRecord id is used to associate
        multiple image artifacts together (kernel, initrd, rootfs (squashfs)).
      responses:
        '200':
          description: A collection of images
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImageRecord'
                type: array
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new ImageRecord
      tags:
        - images
      description: Create a new ImageRecord and register the new image with IMS.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRecord'
        description: Image record to create
        required: true
      responses:
        '201':
          $ref: '#/components/schemas/ImageRecord'
        '400':
          $ref: '#/components/responses/NoInputProvided'
        '422':
          $ref: '#/components/responses/InvalidInputData'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete all ImageRecords
      tags:
        - images
        - cli_ignore
      description: Delete all ImageRecords. 
      responses:
        '204':
          description: Image records deleted successfully
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/images/{image_id}':
    parameters:
      - $ref: '#/components/parameters/image_id'
    get:
      summary: Retrieve image by image_id
      tags:
        - images
      description: Retrieve an image by image_id.
      responses:
        '200':
          description: An image record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRecord'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      description: Delete an ImageRecord by image_id. The artifact is not affected. Matching IMS ImageArtifact records are not deleted.
      tags:
        - images
      responses:
        '204':
          description: Image record deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Delete ImageRecord by image_id
  /image-artifacts:
    get:
      summary: List ImageArtifactRecords
      tags:
        - image artifacts
      description: Return a list of image artifacts that have been registered with the IMS.
      responses:
        '200':
          description: A collection of image artifacts
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImageArtifactRecord'
                type: array
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new ImageArtifactRecord
      tags:
        - image artifacts
      description: Create a new image artifact record
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageArtifactRecord'
        description: Image artifact record to create
        required: true
      responses:
        '201':
          $ref: '#/components/schemas/ImageArtifactRecord'
        '400':
          $ref: '#/components/responses/NoInputProvided'
        '422':
          $ref: '#/components/responses/InvalidInputData'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete all ImageArtifactRecords
      tags:
        - image artifacts
        - cli_ignore
      description: Delete all image artifact records
      responses:
        '204':
          description: Image artifact records deleted successfully
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/image-artifacts/{image_artifact_id}':
    parameters:
      - $ref: '#/components/parameters/image_artifact_id'
    get:
      summary: Retrieve an image artifact by image_artifact_id
      tags:
        - image artifacts
      description: Get an image artifact by image_artifact_id
      responses:
        '200':
          description: An image artifact record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageArtifactRecord'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - image artifacts
      description: Delete an image artifact by image_id.
      responses:
        '204':
          description: Image artifact record deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Delete an image artifact by image_id
  /public-keys:
    get:
      summary: 'List public ssh keys '
      tags:
        - public keys
      description: Return a list of public ssh keys that have been registered with IMS. 
      responses:
        '200':
          description: A collection of keypairs
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PublicKeyRecord'
                type: array
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new public ssh key record
      tags:
        - public keys
      description: Create a new public ssh key record. Uploaded by administrator to allow them to access
        ssh shells that IMS provides.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicKeyRecord'
        description: public key record to create
        required: true
      responses:
        '201':
          $ref: '#/components/schemas/PublicKeyRecord'
        '400':
          $ref: '#/components/responses/NoInputProvided'
        '422':
          $ref: '#/components/responses/InvalidInputData'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete all PublicKeyRecords
      tags:
        - public keys
        - cli_ignore
      description: Delete all public key records.
      responses:
        '204':
          description: Public key records deleted successfully
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/public-keys/{public_key_id}':
    parameters:
      - $ref: '#/components/parameters/public_key_id'
    get:
      summary: Retrieve a public key by public_key_id
      tags:
        - public keys
      description: Retrieve a public key by public_key_id
      responses:
        '200':
          description: A public key record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKeyRecord'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete public key by public_key_id
      tags:
        - public keys
      description: Delete a public key by public_key_id.
      responses:
        '204':
          description: Public Key record deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /jobs:
    get:
      summary: 'Return JobRecords'
      tags:
        - jobs
      description: Return all JobRecords that have been registered with the IMS.
      responses:
        '200':
          description: A collection of jobs
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JobRecord'
                type: array
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create JobRecord
      tags:
        - jobs
      description: |
        Create a new IMS image or modify an existing IMS image, 
        depending on request body parameter, job_type.   
        
        # Create
        
        * Fetch recipe from the artifact repository and decompress to temp directory.
        * Wait for PRS to make required package repositories available.
        * Call kiwi-ng, which builds the image root using
          the recipe in artifact repository and accesses packages in zypper/yum repositories 
          provided by PRS. 
        * Upload the new image to the artifact repository, and save metadata to IMS - ImageRecord and
          multiple ImageArtifactRecords.
        * If there is a failure, establish debug ssh shell, depending on value of enable_debug.  Admin
        can inspect image build root. 
        **touch /mnt/image/complete** in a non-jailed environment or 
        **touch /tmp/complete** in a jailed (chroot) environment to exit.
        
        # Customize
        
        * The artifact_id in the POST /job request body refers to an IMS ImageRecord. IMS uses 
          that ImageRecord to find the image's matching ImageArtifacts, specifically the 
          root file system (rootfs) artifact.  IMS downloads the rootfs from the artifact
          repository and uncompresses it. 
        * IMS creates an ssh environment so admin can inspect and modify image.
          For example, it may be necessary to modify the timezone, or
          modify the programming environment, etc.
          **touch /mnt/image/complete** in a non-jailed  
          environment or **touch /tmp/complete** in a jailed (chroot) environment.
        to exit.
        * IMS waits for the user to exit the ssh, then creates new IMS image
        record with the modifications, and adds the root
        certificate to the image. Note that IMS does not modify the original image
        but modifies a copy of it.
        * IMS packages IMS image record, packages the IMS artifacts
        (kernel, initrd, rootfs)  and uploads
        all new artifacts to the artifact repository. The metadata is recorded by IMS
        and stored as an ImageRecord and multiple ImageArtifactRecords.
        
         
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRecord'
        description: Job record to create
        required: true
      responses:
        '201':
          $ref: '#/components/schemas/JobRecord'
        '400':
          $ref: '#/components/responses/NoInputProvided'
        '422':
          $ref: '#/components/responses/InvalidInputData'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete all JobRecords
      tags:
        - jobs
        - cli_ignore
      description: Delete all job records.
      responses:
        '204':
          description: Job records deleted successfully
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/jobs/{job_id}':
    parameters:
      - $ref: '#/components/parameters/job_id'
    get:
      summary: Retrieve a job by job_id
      tags:
        - jobs
      description: Retrieve JobRecord by job_id
      responses:
        '200':
          description: A job record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobRecord'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a JobRecord (Internal Use Only)
      tags:
        - jobs
      description: Update a job record. Internal use only. Not for API consumers.
      responses:
        '200':
          description: A job record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobRecord'
        '400':
          $ref: '#/components/responses/NoInputProvided'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/InvalidInputData'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete JobRecord by job_id
      tags:
        - jobs
      description: >-
        Delete a job record by job_id. This also deletes the underlying
        Kubernetes job, service and ConfigMap that were created when the job
        record was submitted.
      responses:
        '204':
          description: Job record deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /version:
    get:
      summary: Get IMS version
      tags:
        - version
        - cli_hidden
      description: Returns the version of the IMS
      operationId: getVersion
      responses:
        '200':
          description: IMS Version
          content:
            application/json:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
tags:
  - name: images
    description: Interact with image records
  - name: image artifacts
    description: Interact with image artifact records
  - name: jobs
    description: Interact with job records
  - name: public keys
    description: Interact with public key records
  - name: recipes
    description: Interact with recipe records

components:
  parameters:
    image_id:
      description: The unique id of an image
      in: path
      name: image_id
      required: true
      schema:
        type: string
        format: uuid
    image_artifact_id:
      description: The unique id of an image artifact
      in: path
      name: image_artifact_id
      required: true
      schema:
        type: string
        format: uuid
    public_key_id:
      description: The unique id of a public key
      in: path
      name: public_key_id
      required: true
      schema:
        type: string
        format: uuid
    job_id:
      description: The unique id of a job
      in: path
      name: job_id
      required: true
      schema:
        type: string
        format: uuid
    recipe_id:
      description: The unique id of a recipe
      in: path
      name: recipe_id
      required: true
      schema:
        type: string
        format: uuid
  responses:
    InvalidInputData:
      description: >-
        Input data was understood, but failed validation. Re-run request with
        valid input values for the fields indicated in the response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NoInputProvided:
      description: >-
        No input provided. Determine the specific information that is missing or
        invalid and then re-run the request with valid information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotFound:
      description: Requested resource does not exist. Re-run request with valid ID.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalServerError:
      description: >-
        An internal error occurred. Re-running the request may or may not
        succeed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
  schemas:
    SSHConnectionInfo:
      properties:
        host:
          type: string
          description: >-
            IP or host name to use, in combination with the port, to connect to
            the ssh container
          example: 10.100.20.221
          readOnly: true
        port:
          type: integer
          description: >-
            Port to use, in combination with the host, to connect to the ssh
            container
          example: 22
          readOnly: true
    SSHConnectionMap:
      additionalProperties:
        $ref: "#/components/schemas/SSHConnectionInfo"
    SshContainer:
      type: object
      required:
        - name
        - jail
      properties:
        name:
          description: Name of the ssh container
          type: string
          example: pre-cfs
          maxLength: 40
          minLength: 1
        jail:
          description: 'If true, establish a ssh jail, or chroot environment.'
          type: boolean
          example: true
        status:
          description: >-
            Status of the ssh container (pending, establishing, active,
            complete)
          type: string
          example: pending
          readOnly: true
        connection_info:
          $ref: "#/components/schemas/SSHConnectionMap"
    ProblemDetails:
      description: An error response for RFC 7807 problem details.
      type: object
      properties:
        detail:
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem. Focus on helping correct the problem, rather than giving
            debugging information.
          type: string
        errors:
          description: >-
            An object denoting field-specific errors. Only present on error
            responses when field input is specified for the request.
          type: object
        instance:
          description: >-
            A relative URI reference that identifies the specific occurrence of
            the problem
          format: uri
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
        title:
          description: >-
            Short, human-readable summary of the problem, should not change by
            occurrence.
          type: string
        type:
          default: 'about:blank'
          description: >-
            Relative URI reference to the type of problem which includes human
            readable documentation.
          format: uri
          type: string
    PublicKeyRecord:
      description: A Keypair Record
      type: object
      required:
        - name
        - public_key
      properties:
        id:
          description: Unique id of the image
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          readOnly: true
          type: string
        created:
          description: Time the image record was created
          example: 2018-07-28T03:26:01.234Z
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the public key
          example: Eric's public key
          type: string
          minLength: 1
        public_key:
          description: The raw public key
          example: >-
            ssh-rsa AAAAB3NzaC1yc2EAAAADAQABA ...
            fa6hG9i2SzfY8L6vAVvSE7A2ILAsVruw1Zeiec2IWt
          type: string
          minLength: 1
    RecipeRecord:
      description: A Recipe Record
      type: object
      required:
        - name
        - recipe_type
        - linux_distribution
        - artifact_id
      properties:
        id:
          description: Unique id of the recipe
          # Unique id of the recipe - same or different from other ID?  Then example should reflect similarity or difference ?
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          readOnly: true
          type: string
        created:
          description: Time the recipe record was created
          example: 2018-07-28T03:26:01.234Z
          format: date-time
          readOnly: true
          type: string
        artifact_id:
          description: Artifact ID.  
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          type: string
        recipe_type:
          description: Type of recipe
          enum:
            - kiwi-ng
          example: kiwi-ng
          type: string
        linux_distribution:
          description: Linux distribution being built
          enum:
            - sles12
            - sles15
            - centos7
          example: sles12
          type: string
        name:
          description: Name of the image
          example: centos7.5_barebones
          type: string
    ImageRecord:
      description: An Image Record 
      type: object
      required:
        - name
      properties:
        id:
          description: >
            Unique id of the image. Equals ims_image_id of associated ImageArtifact records. Used to associate multiple image 
            artifacts together (kernel, initrd, rootfs (squashfs)).
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          readOnly: true
          type: string
        created:
          description: Time the image record was created
          example: 2018-07-28T03:26:01.234Z
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the image
          example: centos7.5_barebones
          type: string
          minLength: 1
        artifact_id:
          description: Deprecated 
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          type: string
          readOnly: true
    ImageArtifactRecord:
      description: An Image Artifact associates an IMS image with an
        artifact and identifies the image artifact type.
      type: object
      required:
        - name
        - artifact_type
        - ims_image_id
        - ars_artifact_id
      properties:
        id:
          description: Unique id of the image artifact
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          readOnly: true
          type: string
        created:
          description: Time the image record was created
          example: 2018-07-28T03:26:01.234Z
          format: date-time
          readOnly: true
          type: string
        artifact_type:
          description: Type of Image Artifact
          enum:
            - rootfs
            - kernel
            - initrd
            - debug
            - other
          example: rootfs
          type: string
        name:
          description: Name of the image
          example: centos7.5_barebones
          type: string
          minLength: 1
        ims_image_id:
          description: IMS Image ID of the containing boot image
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          type: string
        ars_artifact_id:
          description: Artifact ID for the imageroot archive
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          type: string
    JobRecord:
      description: A Job Record
      type: object
      required:
        - job_type
        - artifact_id
        - public_key_id
        - image_root_archive_name
      properties:
        id:
          description: Unique id of the job
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          readOnly: true
          type: string
        created:
          description: Time the image record was created
          example: 2018-07-28T03:26:01.234Z
          format: date-time
          readOnly: true
          type: string
        job_type:
          description: Type of job
          enum:
            - create
            - customize
          example: customize
          type: string
        image_root_archive_name:
          description: >-
            Name to be given to the imageroot artifact (do not include
            .sqshfs or other extensions)
          example: cray-sles12-sp3-barebones
          type: string
          minLength: 1
        kernel_file_name:
          description: >-
            Name of the kernel file to extract and upload to the artifact repository from the /boot
            directory of the image root.
          default: vmlinuz
          example: vmlinuz
          type: string
          minLength: 1
        initrd_file_name:
          description: >-
            Name of the initrd image file to extract and upload to the artifact repository from the
            /boot directory of the image root.
          default: initrd
          example: initrd
          type: string
          minLength: 1
        status:
          description: Status of the job
          enum:
            - creating
            - fetching_image
            - fetching_recipe
            - waiting_for_repos
            - building_image
            - waiting_on_user
            - error
            - success
          example: creating
          readOnly: true
          type: string
        artifact_id:
          description: 'Artifact repository artifact_id which specifies 
            the recipe (create job_type) or the image (customize job_type)
            to fetch from the artifact repository.'
          example: 46a2731e-a1d0-4f98-ba92-4f78c756bb12
          format: uuid
          type: string
        public_key_id:
          description: Public key to use to enable passwordless ssh shells
          example: b05c54e3-9fc2-472d-b120-4fd718ff90aa
          format: uuid
          type: string
        kubernetes_job:
          description: Name of the underlying kubernetes job
          example: cray-ims-46a2731e-a1d0-4f98-ba92-4f78c756bb12-customize
          readOnly: true
          type: string
        kubernetes_service:
          description: Name of the underlying kubernetes service
          example: cray-ims-46a2731e-a1d0-4f98-ba92-4f78c756bb12-service
          readOnly: true
          type: string
        kubernetes_configmap:
          description: Name of the underlying kubernetes configmap
          example: cray-ims-46a2731e-a1d0-4f98-ba92-4f78c756bb12-configmap
          readOnly: true
          type: string
        ssh_containers:
          description: >-
            list of ssh containers used to customize images being built or
            modified
          type: array
          items:
            $ref: '#/components/schemas/SshContainer'
        enable_debug:
          description: Whether to enable debugging of the job
          type: boolean
          example: true
        resultant_image_id:
          description: IMS image ID for the resultant image.
          example: e564cd0a-f222-4f30-8337-62184e2dd86d
          format: uuid
          type: string
          readOnly: true
        build_env_size:
          description: Size (in Gb) to allocate for the image root. Default = 10
          example: 10
          type: integer
          minimum: 1
        kubernetes_namespace:
          description: Kubernetes namespace where the IMS job resources were created
          example: default
          default: default
          type: string
          readOnly: true
    JobPatchRecord:
      description: Values to update a JobRecord with
      type: object
      properties:
        resultant_image_id:
          description: IMS image ID for the resultant image.
          example: e564cd0a-f222-4f30-8337-62184e2dd86d
          format: uuid
          type: string
        status:
          description: Status of the job
          enum:
            - creating
            - fetching_image
            - fetching_recipe
            - waiting_for_repos
            - building_image
            - waiting_on_user
            - error
            - success
          example: creating
          readOnly: true
          type: string
