---
swagger: '2.0'
info:
  description: >-
    The Hardware State Manager (HSM) inventories, monitors, and manages
    hardware, and
    tracks the logical and dynamic component states, such as roles,
    NIDs, and other basic metadata needed to provide
    most common administrative and operational functions. HSM is the
    single source of truth for the state of the system.
    It contains the component state and information on Redfish endpoints for
    communicating with components via Redfish.
    It also allows administrators to create partitions and groups for other uses.

    ## Resources

    ### /State/Components

    HMS components are created during inventory discovery and provide a higher-level
    representation of the component, including state, NID, role (i.e. compute/service),
    subtype, and so on. Unlike ComponentEndpoints,
    however, they are not strictly linked to the parent RedfishEndpoint, and are not
    automatically deleted when the RedfishEndpoints are (though they can be deleted via a
    separate call). This is because these components can also represent abstract components,
    such as removed components (e.g. which would remain, but have their states changed to
    "Empty" upon removal).

    ### /Defaults/NodeMaps


    This resource allows a mapping file (NodeMaps) to be uploaded that maps node xnames to
    Node IDs, and optionally, to roles and subroles. These mappings are used
    when discovering nodes for the first time. These mappings should be uploaded prior to
    discovery and should contain mappings for each valid node xname in the system, whether populated or
    not. Nodemap is a JSON file that contains the xname of the node, node ID, and optionally
    role and subrole. Role can be Compute, Application, Storage, Management etc.
    The NodeMaps collection can be uploaded to HSM automatically at install time by specifying
    it as a JSON file. As a result, the endpoints are then automatically discovered by REDS,
    and inventory discovery is performed by HSM. The desired NID numbers will be set as
    soon as the nodes are created using the NodeMaps collection.


    It is recommended that Nodemaps are uploaded at install time before discovery happens.
    If they are uploaded after discovery, then the node xnames need
    to be manually updated with the correct NIDs. You can update NIDs for individual
    components by using PATCH /State/Components/{xname}/NID.


    ### /Inventory/Hardware


    This resource shows the hardware inventory of the entire system and contains
    FRU information in location. All entries are displayed as a flat array.

    ### /Inventory/HardwareByFRU


    Every component has FRU information. This resource shows the hardware inventory for
    all FRUs or for a specific FRU irrespective of the location. This information is constant
    regardless of where the hardware item is currently in the system.
    If a HWInventoryByLocation entry is currently populated with a piece of hardware, it will
    have the corresponding HWInventoryByFRU object embedded. This FRU info can also be
    looked up by FRU ID regardless of the current location.

    ### /Inventory/Hardware/Query/{xname}


    This resource gets you information about a specific component and it's sub-components.
    The xname can be a component, partition, ALL, or s0. Both ALL and s0 represent the
    entire system.

    ### /Inventory/RedfishEndpoints


    This is a BMC or other Redfish controller that has a Redfish entry
    point and Redfish service root. It is used to discover the components
    managed by this endpoint during discovery and handles all Redfish
    interactions by these subcomponents.  If the endpoint has been discovered,
    this entry will include the ComponentEndpoint entries for these managed
    subcomponents.
    You can also create a Redfish Endpoint or update the definition for a Redfish Endpoint.
    The xname identifies the location of all components in the system, including chassis,
    controllers, nodes, and so on. Redfish endpoints are given to State Manager.

    ### /Inventory/ComponentEndpoints


    Component Endpoints are the specific URLs for each individual component
    that are under the Redfish endpoint.
    Component endpoints are discovered during inventory discovery. They are the
    management-plane representation of system components and are linked to the parent
    Redfish Endpoint. They provide a glue layer to bridge the higher-level representation
    of a component with how it is represented locally by Redfish.


    The collection of ComponentEndpoints can be obtained in full, optionally filtered on
    certain criteria (e.g. obtain just Node components), or accessed by their xname IDs
    individually.

    ### /Inventory/ServiceEndpoints


    ServiceEndpoints help you do things on Redfish like updating the firmware.
    They are discovered during inventory discovery.

    ### /groups


    Groups are named sets of system components, most commonly nodes. A group groups
    components under an administratively
    chosen label (group name). Each component may belong to any number of groups.
    If a group has exclusiveGroup=<excl-label> set, then a node
    may only be a member of one group that matches that exclusive label. For example, if
    the exclusive group label 'colors' is associated with groups 'blue', 'red', and 'green',
    then a component that is part of 'green' could not also be placed in 'red'.

    You can create, modify, or delete a group and its members. You can also use group names
    as filters for API calls.

    ### /partitions


    A partition is a formal, non-overlapping division of the system that forms an administratively
    distinct sub-system. Each component may belong to at most one partition. Partitions
    are used as an access control mechanism or for implementing multi-tenancy. You can create,
    modify, or delete a partition and its members. You can also use partitions as filters
    for other API calls.

    ### /memberships


    A membership shows the association of a component xname to its set of group
    labels and partition names. There can be many group labels and up to
    one partition per component.
    Memberships are not modified directly, as the underlying group or partition is modified instead.
    A component can be removed from one of the listed groups or partitions or added via POST
    as well as being present in the initial set of members
    when a partition or group is created. You can retrieve the memberships for components
    or memberships for a specific xname.

    ### /Inventory/DiscoveryStatus


    Check discovery status for all components or you can track the status for a specific job
    ID. You can also check per-endpoint discover status for each RedfishEndpoint. Contains
    status information about the discovery operation for clients to query. The discover
    operation returns a link or links to status objects so that a client can determine when
    the discovery operation is complete.

    ### /Inventory/Discover


    Discover subcomponents by querying all RedfishEndpoints. Once the RedfishEndpoint
    objects are created, inventory discovery will query
    these controllers and create or update management plane and managed plane objects representing
    the components (e.g. nodes, node enclosures, node cards for Mountain chassis CMM endpoints).

    ### /Subscriptions/SCN


    Manage subscriptions to state change notifications (SCNs) from HSM. You can also
    subscribe to state change notifications by using the HMS Notification Fanout Daemon API.

    ## Workflows


    ### Add and Delete a Redfish Endpoint

    #### POST /Inventory/RedfishEndpoints

    When you manually create Redfish endpoints, the discovery is automatically initiated.
    You would create Redfish endpoints for components that are not automatically
    discovered by REDS or MEDS.

    #### GET /Inventory/RedfishEndpoints

    Check the Redfish endpoints that have been added and check the status of discovery.

    #### DELETE /Inventory/RedfishEndpoints/{xname}

    Delete a specific Redfish endpoint.

    ### Perform Inventory Discovery

    #### POST /Inventory/Discover

    Start inventory discovery of a system's subcomponents by querying all Redfish endpoints.
    If needed, specify an ID or hostname (xname) in the payload.

    #### GET /Inventory/DiscoveryStatus

    Check the discovery status of all Redfish endpoints. You can also check the discovery
    status for each individual component by providing ID.

    ### Query and Update HMS Components (State/NID)

    #### GET /State/Components

    Retrieve all HMS Components found by inventory discovery as a named ("Components") array.


    #### PATCH /State/Components/{xname}/Enabled

    Modify the component's Enabled field.


    #### DELETE /State/Components/{xname}

    Delete a specific HMS component by providing its xname.
    As noted, components are not automatically deleted when RedfishEndpoints or ComponentEndpoints
    are deleted.

    ### Create and Delete a New Group

    #### GET /hsm/v2/State/Components

    Retrieve a list of desired components and their state. Select the nodes that you want
    to group.


    #### POST /groups

    Create the new group with desired members. Provide a group label (required), description,
    name, members etc. in the JSON payload.

    #### GET /groups/{group_label}

    Retrieve the group that was create with the label.

    #### GET /State/Components/{group_label}

    Retrieve the current state for all the components in the group.

    #### DELETE /groups/{group_label}

    Delete the group specified by {group_label}.

    ## Valid State Transitions

    ```

    Prior State -> New State     - Reason

    Ready       -> Standby       - HBTD if node has many missed heartbeats

    Ready       -> Ready/Warning - HBTD if node has a few missed heartbeats

    Standby     -> Ready         - HBTD Node re-starts heartbeating

    On          -> Ready         - HBTD Node started heartbeating

    Off         -> Ready         - HBTD sees heartbeats before Redfish Event (On)

    Standby     -> On            - Redfish Event (On) or if re-discovered while in the standby state

    Off         -> On            - Redfish Event (On)

    Standby     -> Off           - Redfish Event (Off)

    Ready       -> Off           - Redfish Event (Off)

    On          -> Off           - Redfish Event (Off)

    Any State   -> Empty         - Redfish Endpoint is disabled meaning component removal

    ```

    Generally, nodes transition 'Off' -> 'On' -> 'Ready' when going from 'Off' to booted, and 'Ready' -> 'Ready/Warning' -> 'Standby' -> 'Off' when shutdown.


  version: 1.0.0
  title: Hardware State Manager API
host: 'sms'
basePath: /apis/smd/hsm/v2
schemes:
  - https
produces:
  - application/json
  - application/problem+json
consumes:
  - application/json
tags:
  - name: Service Info
    description: >-
      Service information APIs for getting information on the HSM service such
      as readiness, etc.
  - name: Component
    description: >-
      High-level component information by xname: state, flag, NID, role, etc.
  - name: NodeMap
    description: >-
      Given a node xname ID, provide defaults for NID, Role, etc. to be used
      when the node is first discovered. These are uploaded prior to
      discovery and should contain mappings for each valid node xname in
      the system, whether populated or not.
  - name: HWInventory
    description: >-
      HWInventoryByLocation collection containing all components matching
      the query that was submitted.
  - name: HWInventoryByLocation
    description: >-
      Hardware inventory information for the given system location/xname
  - name: HWInventoryByFRU
    description: >-
      This represents a physical piece of hardware with properties specific
      to a unique component in the system.  This information
      is constant regardless of where the hardware item is currently in
      the system (if it is in the system). If a HWInventoryByLocation
      entry is currently populated with a piece of hardware, it will have
      the corresponding HWInventoryByFRU object embedded. This FRU info can
      also be looked up by FRU ID regardless of the current location.
  - name: HWInventoryHistory
    description: >-
      Hardware inventory historical information for the given system location/xname/FRU
  - name: RedfishEndpoint
    description: >-
      This is a BMC or other Redfish controller that has a Redfish entry
      point and Redfish service root.  It is used to discover the components
      managed by this endpoint during discovery and handles all Redfish
      interactions by these subcomponents.  If the endpoint has been discovered,
      this entry will include the ComponentEndpoint entries for these managed
      subcomponents.
  - name: ComponentEndpoint
    description: >-
      The Redfish-discovered properties for a component discovered through,
      and managed by a RedfishEndpoint, such as a node, blade, and so on.
      These are obtainable via a discovered RedfishEndpoint or can be
      looked up by their xnames separately so that just the information
      for a particular component, e.g. node can be retrieved.  They can
      also provide a back-reference to the parent endpoint.
  - name: ServiceEndpoint
    description: >-
      The Redfish-discovered properties for a service discovered through,
      and managed by a RedfishEndpoint, such as UpdateService, EventService,
      and so on.  These are obtainable via a discovered RedfishEndpoint or can
      be looked up by their service type and xnames separately so that just the
      information for a particular service, e.g. UpdateService can be retrieved.
      They can also provide a back-reference to the parent endpoint.
  - name: ComponentEthernetInterfaces
    description: >-
      The MAC address to IP address relation for components in the system. If
      the component has been discovered by HSM, the xname of the component that
      has the Ethernet interface will be associated with it as well.
  - name: Group
    description: >-
      A group is an informal, possibly overlapping division of the system that
      groups Components (most frequently nodes) under an administratively
      chosen label (i.e. group name).  Unlike partitions, components can be
      members of any number of groups.
  - name: Partition
    description: >-
      A partition is a formal, non-overlapping division of the system that
      forms an administratively distinct sub-system e.g. for implementing
      multi-tenancy.
  - name: Membership
    description: >-
      A membership is a mapping of a component xname to its set of group
      labels and partition names.
  # - name: SystemInformationBlock
    # description: >-
      # The SystemInformationBlock (SIB) object nests Component, HWInventory,
      # HSNType, and HSNInfo subschemas that match a particular query,
      # associating information that may be needed by a
      # large number of endpoints into a single,
      # self-contained object.  While most of the individual subschemas,
      # (HSNInfo is the exception, which is obtained from the fabric manager)
      # can be queried using several of the more general APIs, the
      # SIB supports the use of a single API that clients may use to
      # bootstrap their initial system state, for example.
  - name: DiscoveryStatus
    description: >-
      Contains status information about the discovery operation for clients
      to query. The discover operation returns a link or links to
      status objects so that a client can determine when the discovery operation
      is complete.
  - name: Discover
    description: >-
      Trigger a discovery of system component data
      by interrogating all, or a subset, of the RedfishEndpoints currently
      known to the system.
  - name: SCN
    description: >-
      Manage subscriptions to state change notifications (SCNs) from HSM.
  - name: Locking
    description: >-
      Manage locks and reservations on components.
  - name: PowerMap
    description: >-
      Power mapping of components to the components supplying them power. This
      may contain components in the system whether populated or not.
paths:
  ########################################################################
  #
  # Service Information API calls - Ready, etc.
  #
  ########################################################################
  /service/ready:
    get:
      tags:
        - Service Info
      summary: Kubernetes readiness endpoint to monitor service health
      x-private: true
      description: >-
        The `readiness` resource works in conjunction with the Kubernetes readiness
        probe to determine when the service is no longer healthy and able to respond
        correctly to requests.  Too many failures of the readiness probe will result
        in the traffic being routed away from this service and eventually the service
        will be shut down and restarted if in an unready state for too long.


        This is primarily an endpoint for the automated Kubernetes system.
      operationId: doReadyGet
      responses:
        "200":
          description: >-
            [OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1)
            Network API call success
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "503":
          description: >-
            The service is unhealthy and not ready
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'

  /service/liveness:
    get:
      tags:
        - Service Info
      summary: Kubernetes liveness endpoint to monitor service health
      x-private: true
      description: >-
        The `liveness` resource works in conjunction with the Kubernetes liveness
        probe to determine when the service is no longer responding to
        requests.  Too many failures of the liveness probe will result in the
        service being shut down and restarted.


        This is primarily an endpoint for the automated Kubernetes system.
      operationId: doLivenessGet
      responses:
        "204":
          description: >-
            [No Content](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5)
            Network API call success
        "503":
          description: >-
            The service is not taking HTTP requests
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use as parameters
      description: >-
        Retrieve all valid values for use as parameters.
      operationId: doValuesGet
      responses:
        "200":
          description: An array of parameters and their valid values.
          schema:
            $ref: '#/definitions/Values.1.0.0_Values'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values/arch:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use with the 'arch' parameter
      description: >-
        Retrieve all valid values for use with the 'arch' (component architecture) parameter.
      operationId: doArchValuesGet
      responses:
        "200":
          description: An array of valid values for the 'arch' parameter.
          schema:
            $ref: '#/definitions/Values.1.0.0_ArchArray'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values/class:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use with the 'class' parameter
      description: >-
        Retrieve all valid values for use with the 'class' (hardware class) parameter.
      operationId: doClassValuesGet
      responses:
        "200":
          description: An array of valid values for the 'class' parameter.
          schema:
            $ref: '#/definitions/Values.1.0.0_ClassArray'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values/flag:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use with the 'flag' parameter
      description: >-
        Retrieve all valid values for use with the 'flag' (component flag) parameter.
      operationId: doFlagValuesGet
      responses:
        "200":
          description: An array of valid values for the 'flag' parameter.
          schema:
            $ref: '#/definitions/Values.1.0.0_FlagArray'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values/nettype:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use with the 'nettype' parameter
      description: >-
        Retrieve all valid values for use with the 'nettype' (component network type) parameter.
      operationId: doNetTypeValuesGet
      responses:
        "200":
          description: An array of valid values for the 'nettype' parameter.
          schema:
            $ref: '#/definitions/Values.1.0.0_NetTypeArray'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values/role:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use with the 'role' parameter
      description: >-
        Retrieve all valid values for use with the 'role' (component role) parameter.
      operationId: doRoleValuesGet
      responses:
        "200":
          description: An array of valid values for the 'role' parameter.
          schema:
            $ref: '#/definitions/Values.1.0.0_RoleArray'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values/subrole:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use with the 'subrole' parameter
      description: >-
        Retrieve all valid values for use with the 'subrole' (component subrole) parameter.
      operationId: doSubRoleValuesGet
      responses:
        "200":
          description: An array of valid values for the 'subrole' parameter.
          schema:
            $ref: '#/definitions/Values.1.0.0_SubRoleArray'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values/state:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use with the 'state' parameter
      description: >-
        Retrieve all valid values for use with the 'state' (component state) parameter.
      operationId: doStateValuesGet
      responses:
        "200":
          description: An array of valid values for the 'state' parameter.
          schema:
            $ref: '#/definitions/Values.1.0.0_StateArray'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /service/values/type:
    get:
      tags:
        - Service Info
      summary: Retrieve all valid values for use with the 'type' parameter
      description: >-
        Retrieve all valid values for use with the 'type' (component HMSType) parameter.
      operationId: doTypeValuesGet
      responses:
        "200":
          description: An array of valid values for the 'type' parameter.
          schema:
            $ref: '#/definitions/Values.1.0.0_TypeArray'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # State Component API Calls
  #
  ########################################################################
  /State/Components:
    get:
      tags:
        - Component
      summary: Retrieve collection of HMS Components
      description: >-
        Retrieve the full collection of state/components in the form of a
        ComponentArray. Full results can also be filtered by query
        parameters. When multiple parameters are specified, they are applied
        in an AND fashion (e.g. type AND state). When a parameter is specified
        multiple times, they are applied in an OR fashion (e.g. type AND state1 OR state2).
        If the collection is empty or the filters have no match, an
        empty array is returned.
      operationId: doComponentsGet
      parameters:
        - $ref: '#/parameters/compIDParam'
        - $ref: '#/parameters/compTypeParam'
        - $ref: '#/parameters/compStateParam'
        - $ref: '#/parameters/compFlagParam'
        - $ref: '#/parameters/compRoleParam'
        - $ref: '#/parameters/compSubroleParam'
        - $ref: '#/parameters/compEnabledParam'
        - $ref: '#/parameters/compSoftwareStatusParam'
        - $ref: '#/parameters/compSubtypeParam'
        - $ref: '#/parameters/compArchParam'
        - $ref: '#/parameters/compClassParam'
        - $ref: '#/parameters/compNIDParam'
        - $ref: '#/parameters/compNIDStartParam'
        - $ref: '#/parameters/compNIDEndParam'
        - $ref: '#/parameters/compPartitionParam'
        - $ref: '#/parameters/compGroupParam'
        - name: stateonly
          in: query
          type: boolean
          description: >-
            Return only component state and flag fields (plus xname/ID and
            type). Results can be modified and used for bulk state/flag-
            only patch operations.
        - name: flagonly
          in: query
          type: boolean
          description: >-
            Return only component flag field (plus xname/ID and type).
            Results can be modified and used for bulk flag-only patch
            operations.
        - name: roleonly
          in: query
          type: boolean
          description: >-
            Return only component role and subrole fields (plus xname/ID and type).
            Results can be modified and used for bulk role-only patches.
        - name: nidonly
          in: query
          type: boolean
          description: >-
            Return only component NID field (plus xname/ID and type).
            Results can be modified and used for bulk NID-only patches.
      responses:
        "200":
          description: >-
            ComponentArray representing results of query.
          schema:
            $ref: '#/definitions/ComponentArray_ComponentArray'
        "400":
          description: Bad Request such as invalid argument for filter
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - Component
      summary: Create/Update a collection of HMS Components
      description: >-
        Create/Update a collection of state/components. If the component
        already exists it will not be overwritten unless force=true in which
        case State, Flag, Subtype, NetType, Arch, and Class will get overwritten.
      operationId: doComponentsPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PostArray'
      responses:
        "204":
          description: >-
            [No Content](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5)
            One or more Component entries were successfully created/updated.
        "400":
          description: Bad Request such as invalid argument for a component field
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - Component
        - cli_danger$This will delete all components in HSM, continue?
      summary: >-
        Delete all components
      description: >-
        Delete all entries in the components collection.
      operationId: doComponentsDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  #  /State/Components/ByNID:
  #    get:
  #      tags:
  #        - Component
  #      summary: GET Component-by-NID Resource IDs Collection
  #      description: >-
  #        This produces a collection of URIs to all Components using their
  #        ByNID path.
  #      operationId: doComponentResourceURIByNIDGet
  #      parameters:
  #        - name: partition
  #          in: query
  #          type: string
  #          description: >-
  #            Restrict search to the given partition.
  #      responses:
  #        "200":
  #          description: Collection of Component Resource IDs.
  #          schema:
  #            $ref: '#/definitions/ComponentByNID.1.0.0_ResourceURICollection'
  #          examples:
  #            application/json:
  #              Name: State Component by NID Collection
  #              Members:
  #                - URI: /hsm/v2/State/Components/ByNID/0
  #                - URI: /hsm/v2/State/Components/ByNID/1
  #              MemberCount: 2
  #        "400":
  #          description: Bad Request
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #        "404":
  #          description: Does Not Exist
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #        default:
  #          description: Unexpected error
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  /State/Components/{xname}:
    get:
      tags:
        - Component
      summary: Retrieve component at {xname}
      description: >-
        Retrieve state or components by xname.
      operationId: doComponentGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of component to return.
          required: true
      responses:
        "200":
          description: Component entry matching xname/ID
          schema:
            $ref: '#/definitions/Component.1.0.0_Component'
        "400":
          description: Bad Request or invalid xname
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    put:
      tags:
        - Component
      summary: Create/Update an HMS Component
      description: >-
        Create/Update a state/component. If the component already exists it
        will not be overwritten unless force=true in which case State, Flag,
        Subtype, NetType, Arch, and Class will get overwritten.
      operationId: doComponentPut
      parameters:
        - name: xname
          in: path
          type: string
          description: >-
            Locational xname of the component to create or update.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Component.1.0.0_Put'
      responses:
        "204":
          description: >-
            [No Content](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5)
            Component entry was successfully created/updated.
        "400":
          description: Bad Request such as invalid argument for a component field
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - Component
      summary: Delete component with ID {xname}
      description: >-
        Delete a component by xname.
      operationId: doComponentDelete
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of component record to delete.
          required: true
      responses:
        "200":
          description: Component is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/ByNID/{nid}:
    get:
      tags:
        - Component
      summary: Retrieve component with NID={nid}
      description: >-
        Retrieve a component by NID.
      operationId: doComponentByNIDGet
      parameters:
        - name: nid
          in: path
          type: string
          description: NID of component to return.
          required: true
      responses:
        "200":
          description: Component entry matching xname/ID
          schema:
            $ref: '#/definitions/Component.1.0.0_Component'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/BulkStateData:
    patch:
      tags:
        - Component
      summary: >-
        Update multiple components' state data via a list of xnames
      description: >-
        Specify a list of xnames to update the State and Flag fields. If the Flag field is omitted,
        Flag is reverted to 'OK'. Other fields are ignored. The list of IDs
        and the new State are required.
      operationId: doCompBulkStateDataPatch
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PatchArray.StateData'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/{xname}/StateData:
    patch:
      tags:
        - Component
      summary: >-
        Update component state data at {xname}
      description: >-
        Update the component's state and flag fields only. If Flag field is
        omitted, the Flag value is reverted to 'OK'.
      operationId: doCompStatePatch
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of component to set state/flag on.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Component.1.0.0_Patch.StateData'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/BulkFlagOnly:
    patch:
      tags:
        - Component
      summary: >-
        Update multiple components' Flag values via a list of xnames
      description: >-
        Specify a list of xnames to update the Flag field and specify the value.
        The list of IDs and the new Flag are required.
      operationId: doCompBulkFlagOnlyPatch
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PatchArray.FlagOnly'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/{xname}/FlagOnly:
    patch:
      tags:
        - Component
      summary: >-
        Update component Flag value at {xname}
      description: The State is not modified. Only the Flag is updated.
      operationId: doCompFlagOnlyPatch
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of component to modify flag on.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Component.1.0.0_Patch.FlagOnly'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/BulkEnabled:
    patch:
      tags:
        - Component
      summary: >-
        Update multiple components' Enabled values via a list of xnames
      description: >-
        Update the Enabled field for a list of xnames. Specify a single
        value for Enabled and also the list of xnames. Note that Enabled is a boolean field
        and a value of false sets the component(s) to disabled.
      operationId: doCompBulkEnabledPatch
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PatchArray.Enabled'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/{xname}/Enabled:
    patch:
      tags:
        - Component
      summary: >-
        Update component Enabled value at {xname}
      description: >-
        Update the component's Enabled field only. The State and other fields
        are not modified. Note that this is a boolean field, a value of false sets
        the component to disabled.
      operationId: doCompEnabledPatch
      parameters:
        - name: xname
          in: path
          type: string
          description: >-
            Locational xname of component to set Enabled to true or false.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Component.1.0.0_Patch.Enabled'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/BulkSoftwareStatus:
    patch:
      tags:
        - Component
      summary: >-
        Update multiple components' SoftwareStatus values via a list of xnames
      description: >-
        Update the SoftwareStatus field for a list of xnames. Specify
        a single new value of SoftwareStatus like admindown and the list of xnames.
      operationId: doCompBulkSwStatusPatch
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PatchArray.SoftwareStatus'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/{xname}/SoftwareStatus:
    patch:
      tags:
        - Component
      summary: >-
        Update component SoftwareStatus value at {xname}
      description: >-
        Update the component's SoftwareStatus field only. The State and
        other fields are not modified.
      operationId: doCompSwStatusPatch
      parameters:
        - name: xname
          in: path
          type: string
          description: >-
            Locational xname of component to set new SoftwareStatus value.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Component.1.0.0_Patch.SoftwareStatus'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/BulkRole:
    patch:
      tags:
        - Component
      summary: >-
        Update multiple components' Role values via a list of xnames
      description: >-
        Update the Role and SubRole field for a list of xnames. Specify the Role and Subrole values and the list of
        xnames. The list of IDs and the new Role are required.
      operationId: doCompBulkRolePatch
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PatchArray.Role'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/{xname}/Role:
    patch:
      tags:
        - Component
      summary: >-
        Update component Role and SubRole values at {xname}
      description: >-
        Update the component's Role and SubRole fields only. Valid only for nodes.
        The State and other fields are not modified.
      operationId: doCompRolePatch
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of component to modify Role on.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Component.1.0.0_Patch.Role'
      responses:
        "200":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/BulkNID:
    patch:
      tags:
        - Component
      summary: >-
        Update multiple components' NIDs via ComponentArray
      description: >-
        Modify the submitted ComponentArray and update the
        corresponding NID value for each entry. Other fields are ignored and not changed.
        ID field is required for all entries.
      operationId: doCompArrayNIDPatch
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PatchArray.NID'
      responses:
        "204":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/{xname}/NID:
    patch:
      tags:
        - Component
      summary: >-
        Update component NID value at {xname}
      description: >-
        Update the component's NID field only. Valid only for nodes.
        State and other fields are not modified.
      operationId: doCompNIDPatch
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of component to modify NID on.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Component.1.0.0_Patch.NID'
      responses:
        "200":
          description: Success.
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/Query:
    post:
      tags:
        - Component
      summary: Create component query (by xname list), returning ComponentArray
      description: >-
        Retrieve the targeted entries in the form of a ComponentArray by providing a payload
        of component IDs.
      operationId: doComponentsQueryPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PostQuery'
      responses:
        "200":
          description: >-
            ComponentArray representing results of query.
          schema:
            $ref: '#/definitions/ComponentArray_ComponentArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/ByNID/Query:
    post:
      tags:
        - Component
      summary: Create component query (by NID ranges), returning ComponentArray
      description: >-
        Retrieve the targeted entries in the form of a ComponentArray by providing a payload
        of NID ranges.
      operationId: doComponentByNIDQueryPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ComponentArray_PostByNIDQuery'
      responses:
        "200":
          description: >-
            ComponentArray representing results of query.
          schema:
            $ref: '#/definitions/ComponentArray_ComponentArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /State/Components/Query/{xname}:
    get:
      tags:
        - Component
      summary: >-
        Retrieve component query for {xname}, returning ComponentArray
      description: >-
        Retrieve component entries in the form of a ComponentArray by providing xname and
        modifiers in the query string.
      operationId: doComponentQueryGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of component to query.
          required: true
        - name: type
          in: query
          type: string
          description: >-
            Retrieve xname's children of type={type} instead of {xname} for example NodeBMC,
            NodeEnclosure etc.
          enum:
            - CDU
            - CabinetCDU
            - CabinetPDU
            - CabinetPDUOutlet
            - CabinetPDUPowerConnector
            - CabinetPDUController
            - Cabinet
            - Chassis
            - ChassisBMC
            - CMMRectifier
            - CMMFpga
            - CEC
            - ComputeModule
            - RouterModule
            - NodeBMC
            - NodeEnclosure
            - NodeEnclosurePowerSupply
            - HSNBoard
            - Node
            - Processor
            - Drive
            - StorageGroup
            - NodeNIC
            - Memory
            - NodeAccel
            - NodeAccelRiser
            - NodeFpga
            - HSNAsic
            - RouterFpga
            - RouterBMC
            - HSNLink
            - HSNConnector
            - INVALID
        - $ref: '#/parameters/compStateParam'
        - $ref: '#/parameters/compFlagParam'
        - $ref: '#/parameters/compRoleParam'
        - $ref: '#/parameters/compSubroleParam'
        - $ref: '#/parameters/compEnabledParam'
        - $ref: '#/parameters/compSoftwareStatusParam'
        - $ref: '#/parameters/compSubtypeParam'
        - $ref: '#/parameters/compArchParam'
        - $ref: '#/parameters/compClassParam'
        - $ref: '#/parameters/compNIDParam'
        - $ref: '#/parameters/compNIDStartParam'
        - $ref: '#/parameters/compNIDEndParam'
        - $ref: '#/parameters/compPartitionParam'
        - $ref: '#/parameters/compGroupParam'
        - name: stateonly
          in: query
          type: boolean
          description: >-
            Return only component state and flag fields (plus xname/ID and
            type). Results can be modified and used for bulk state/flag-
            only patch operations.
        - name: flagonly
          in: query
          type: boolean
          description: >-
            Return only component flag field (plus xname/ID and type).
            Results can be modified and used for bulk flag-only patch
            operations.
        - name: roleonly
          in: query
          type: boolean
          description: >-
            Return only component role and subrole fields (plus xname/ID and type).
            Results can be modified and used for bulk role-only patches.
        - name: nidonly
          in: query
          type: boolean
          description: >-
            Return only component NID field (plus xname/ID and type).
            Results can be modified and used for bulk NID-only patches.
      responses:
        "200":
          description: >-
            ComponentArray representing results of query.
          schema:
            $ref: '#/definitions/ComponentArray_ComponentArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # Locking v2 API Calls
  #
  ########################################################################
  '/locks/reservations/remove':
    post:
      summary: Forcibly deletes existing reservations.
      x-private: true
      description: >-
        Given a list of components, forcibly deletes any existing reservation. Does not change lock state;
        does not disable the reservation ability of the component. An empty set of xnames will delete
        reservations on all xnames. This functionality should be used sparingly, the normal flow should be
        to release reservations, versus removing them.
      parameters:
        - name: payload
          in: body
          description: >-
            List of xnames to remove reservations. A `rigid` processing model will result in the entire set
            of xnames not having their reservation removed if an xname doesn't exist, or isn't reserved. A
            `flexible` processing model will perform all actions possible.
          required: true
          schema:
            $ref: '#/definitions/AdminReservationRemove.1.0.0'

      responses:
        '202':
          description: Accepted. Returns a count + list of xnames that succeeded or failed the operation.
          schema:
            $ref: '#/definitions/XnameResponse_1.0.0'
        '400':
          description: >-
            Bad request; something is wrong with the structure received. Will not be used to represent
            failure to accomplish the operation, that will be returned in the standard payload.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not delete reservations
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-reservations
        - cli_ignore
  '/locks/reservations/release':
    post:
      summary: Releases existing reservations.
      x-private: true
      description: Given a list of {xname & reservation key}, releases the associated reservations.
      parameters:
        - name: payload
          in: body
          required: true
          description: >-
            List of {xname and reservation key} to release reservations. A `rigid` processing model will
            result in the entire set of xnames not having their reservation released if an xname doesn't exist,
            or isn't reserved. A `flexible` processing model will perform all actions possible.
          schema:
            $ref: '#/definitions/ReservedKeys.1.0.0'

      responses:
        '202':
          description: Accepted. Returns a count + list of xnames that succeeded or failed the operation.
          schema:
            $ref: '#/definitions/XnameResponse_1.0.0'
        '400':
          description: >-
            Bad request; something is wrong with the structure received. Will not be used to represent
            failure to accomplish the operation, that will be returned in the standard payload.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not delete reservations
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-reservations
        - cli_ignore
  '/locks/reservations':
    post:
      summary: Create reservations
      x-private: true
      description: >-
        Creates reservations on a set of xnames of infinite duration.  Component must be locked to create a
        reservation.
      parameters:
        - name: payload
          in: body
          description: >-
            List of components to create reservations. A `rigid` processing model will result in the entire
            set of xnames not having reservations created if an xname doesn't exist, or isn't locked, or if
            already reserved. A `flexible` processing model will perform all actions possible.
          required: true
          schema:
            $ref: '#/definitions/AdminReservationCreate.1.0.0'
      responses:
        '202':
          description: Accepted request.  See response for details.
          schema:
            $ref: '#/definitions/AdminReservationCreate_Response.1.0.0'
        '400':
          description: >-
            Bad request; something is wrong with the structure received. Will not be used to represent
            failure to accomplish the operation, that will be returned in the standard payload.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not accept reservations
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-reservations
        - cli_ignore
  '/locks/service/reservations/release':
    post:
      summary: Releases existing reservations.
      x-private: true
      description: Given a list of {xname & reservation key}, releases the associated reservations.
      parameters:
        - name: payload
          in: body
          description: >-
            List of {xname and reservation key} to release reservations. A `rigid` processing model will
            result in the entire set of xnames not having their reservation released if an xname doesn't exist,
            or isn't reserved. A `flexible` processing model will perform all actions possible.
          required: true
          schema:
            $ref: '#/definitions/ReservedKeys.1.0.0'

      responses:
        '202':
          description: Accepted. Returns a count + list of xnames that succeeded or failed the operation.
          schema:
            $ref: '#/definitions/XnameResponse_1.0.0'
        '400':
          description: >-
            Bad request; something is wrong with the structure received. Will not be used to represent
            failure to accomplish the operation, that will be returned in the standard payload.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not delete reservations
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - service-reservations
        - cli_ignore
  '/locks/service/reservations':
    post:
      summary: Create reservations
      x-private: true
      description: >-
        Creates reservations on a set of xnames of finite duration.  Component must be unlocked to create a
        reservation.
      parameters:
        - name: payload
          in: body
          description: >-
            List of components to create reservations. A `rigid` processing model will result in the
            entire set of xnames not having reservations created if an xname doesn't exist, or isn't locked,
            or if already reserved. A `flexible` processing model will perform all actions possible.
          required: true
          schema:
            $ref: '#/definitions/ServiceReservationCreate.1.0.0'
      responses:
        '202':
          description: Accepted request.  See response for details.
          schema:
            $ref: '#/definitions/ServiceReservationCreate_Response.1.0.0'
        '400':
          description: >-
            Bad request; something is wrong with the structure received. Will not be used to represent
            failure to accomplish the operation, that will be returned in the standard payload.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not accept reservations
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - service-reservations
        - cli_ignore
  '/locks/service/reservations/renew':
    post:
      summary: Renew existing reservations.
      x-private: true
      description: Given a list of {xname & reservation key}, renews the associated reservations.
      parameters:
        - name: payload
          in: body
          description: >-
            List of {xname and reservation key} to renew reservations. A `rigid` processing model will
            result in the entire set of xnames not having their reservation renewed if an xname doesn't exist,
            or isn't reserved. A `flexible` processing model will perform all actions possible.
          required: true
          schema:
            $ref: '#/definitions/ReservedKeysWithRenewal.1.0.0'

      responses:
        '202':
          description: Accepted. Returns a count + list of xnames that succeeded or failed the operation.
          schema:
            $ref: '#/definitions/XnameResponse_1.0.0'
        '400':
          description: >-
            Bad request; something is wrong with the structure received. Will not be used to represent
            failure to accomplish the operation, that will be returned in the standard payload.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not delete reservations
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - service-reservations
        - cli_ignore
  '/locks/service/reservations/check':
    post:
      summary: Check the validity of reservations.
      x-private: true
      description: Using xname + reservation key check on the validity of reservations.
      parameters:
        - name: payload
          in: body
          description: List of components & deputy keys to check on validity of reservations.
          required: true
          schema:
            $ref: '#/definitions/DeputyKeys.1.0.0'

      responses:
        '202':
          description: Created reservations.
          schema:
            $ref: '#/definitions/ServiceReservationCheck_Response.1.0.0'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not check reservations.
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - service-reservations
        - cli_ignore
  '/locks/status':
    post:
      summary: Retrieve lock status for component IDs.
      description: Using component ID retrieve the status of any lock and/or reservation.
      parameters:
        - name: payload
          in: body
          description: List of components to retrieve status.
          required: true
          schema:
            $ref: '#/definitions/Xnames'

      responses:
        '200':
          description: Got lock(s) status.
          schema:
            $ref: '#/definitions/AdminStatusCheck_Response.1.0.0'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not get lock status.
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-locks

    get:
      summary: Retrieve lock status for all components or a filtered subset of components.
      description: >-
        Retrieve the status of all component locks and/or reservations. Results can be
        filtered by query parameters.
      parameters:
        - $ref: '#/parameters/compTypeParam'
        - $ref: '#/parameters/compStateParam'
        - $ref: '#/parameters/compRoleParam'
        - $ref: '#/parameters/compSubroleParam'
        - name: locked
          in: query
          type: boolean
          description: Return components based on the 'Locked' field of their lock status.
          required: false
        - name: reserved
          in: query
          type: boolean
          description: Return components based on the 'Reserved' field of their lock status.
          required: false
        - name: reservationDisabled
          in: query
          type: boolean
          description: Return components based on the 'ReservationDisabled' field of their lock status.
          required: false

      responses:
        '200':
          description: Got lock(s) status.
          schema:
            $ref: '#/definitions/AdminStatusCheck_Response.1.0.0'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not get lock status.
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-locks

  '/locks/lock':
    post:
      summary: Locks components.
      description: >-
        Using a component create a lock.  Cannot be locked if already locked, or if there is a current
        reservation.
      parameters:
        - name: payload
          in: body
          description: List of xnames to lock.
          required: true
          schema:
            $ref: '#/definitions/AdminLock.1.0.0'

      responses:
        '200':
          description: >-
            Zero (success) error code - one or more entries locked.
            Message contains count of locked items.
          schema:
            $ref: '#/definitions/XnameResponse_1.0.0'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not lock lock.
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-locks
  '/locks/unlock':
    post:
      summary: Unlocks components.
      description: Using a component unlock a lock.  Cannot be unlocked if already unlocked.
      parameters:
        - name: payload
          in: body
          description: List of xnames to unlock.
          required: true
          schema:
            $ref: '#/definitions/AdminLock.1.0.0'

      responses:
        '200':
          description: >-
            Zero (success) error code - one or more entries unlocked.
            Message contains count of unlocked locks.
          schema:
            $ref: '#/definitions/XnameResponse_1.0.0'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not unlock lock.
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-locks
  '/locks/repair':
    post:
      summary: Repair components lock and reservation ability.
      description: Repairs the disabled status of an xname allowing new reservations to be created.
      parameters:
        - name: payload
          in: body
          description: List of xnames to repair.
          required: true
          schema:
            $ref: '#/definitions/AdminLock.1.0.0'

      responses:
        '200':
          description: >-
            Zero (success) error code - one or more locks repaired.
            Message contains count of repaired locks.
          schema:
            $ref: '#/definitions/XnameResponse_1.0.0'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not repair lock.
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-locks

  '/locks/disable':
    post:
      summary: Disables the ability to create a reservation on components.
      description: >-
        Disables the ability to create a reservation on components, deletes any existing reservations.
        Does not change lock state. Attempting to disable an already-disabled component will not result
        in an error.
      parameters:
        - name: payload
          in: body
          description: List of xnames to disable.
          required: true
          schema:
            $ref: '#/definitions/AdminLock.1.0.0'

      responses:
        '200':
          description: >-
            Zero (success) error code - one or more locks disabled.
            Message contains count of disabled locks.
          schema:
            $ref: '#/definitions/XnameResponse_1.0.0'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Problem7807'
        '500':
          description: Server error, could not disable lock.
          schema:
            $ref: '#/definitions/Problem7807'
      tags:
        - Locking
        - admin-locks
  ########################################################################
  #
  # Node Maps - Default NIDs/Roles/etc. to use on first time discovery
  #
  ########################################################################
  /Defaults/NodeMaps:
    get:
      tags:
        - NodeMap
      summary: >-
        Retrieve all NodeMaps, returning NodeMapArray
      description: >-
        Retrieve all Node map entries as a named array, or an empty array if the
        collection is empty.
      operationId: doNodeMapsGet
      responses:
        "200":
          description: >-
            Named NodeMaps array representing all xname locations that
            have defaults registered.
          schema:
            $ref: '#/definitions/NodeMapArray_NodeMapArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - NodeMap
      summary: Create or Modify NodeMaps
      description: >-
        Create or update the given set of NodeMaps whose ID fields are each a
        valid xname. The NID field is required and serves as the NID that
        will be used when a component with the same xname ID is created for
        the first time by discovery.

        Role is an optional field. A node is assigned the
        default (e.g. Compute) role when it is first created during discovery.
        The NID must be unique across all entries.

        SubRole is an optional field. A node is assigned no subrole by default
        when it is first created during discovery.


        The NodeMaps collection should be uploaded at install time by specifying
        it as a JSON file. As a result, when the endpoints are automatically discovered
        by REDS, and inventory discovery is performed by HSM, the desired NID numbers will
        be set as soon as the nodes are created using the NodeMaps collection. All node xnames
        that are expected to be used in the system should be included in the mapping, even
        if not currently populated.


        It is recommended that NodeMaps are uploaded at install time before discovery happens.
        If they are uploaded after discovery, then the node xnames need
        to be manually updated with the correct NIDs. You can update NIDs for individual
        components by using PATCH /State/Components/{xname}/NID.


        Note the following points:

        * If the POST operation contains an xname that already exists, the entry will be overwritten
        with the new entry (i.e. new NID, Role (if given), etc.).

        * The same NID cannot be used for more than one xname. If such a duplicate would be
        created, the operation will fail.

        * If the node has already been discovered for the first time (that is, it exists in
        /hsm/v2/State/Components and already has a previous/default NID), modifying the
        NodeMap entry will not automatically reassign the current NID.

        * If you wish to use POST to completely replace the current NodeMaps collection
        (rather than modifying it), first delete it using the DELETE method on the collection.
        Otherwise the current entries and the new ones will be merged if they are disjoint
        sets of nodes.
      operationId: doNodeMapPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/NodeMapArray_NodeMapArray'
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries created or
            updated.  Message contains count of new/modified items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate resource (NID) would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - NodeMap
        - cli_danger$This will delete all node maps, continue?
      summary: >-
        Delete all NodeMap entities
      description: >-
        Delete all entries in the NodeMaps collection.
      operationId: doNodeMapsDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Defaults/NodeMaps/{xname}:
    get:
      tags:
        - NodeMap
      summary: Retrieve NodeMap at {xname}
      description: >-
        Retrieve NodeMap, i.e. defaults NID/Role/etc. for node located at
        physical location {xname}.
      operationId: doNodeMapGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of NodeMap record to return.
          required: true
      responses:
        "200":
          description: NodeMap entry matching xname/ID
          schema:
            $ref: '#/definitions/NodeMap.1.0.0_NodeMap'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - NodeMap
      summary: Delete NodeMap with ID {xname}
      description: >-
        Delete NodeMap entry for a specific node {xname}.
      operationId: doNodeMapDelete
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of NodeMap record to delete.
          required: true
      responses:
        "200":
          description: Zero (success) error code - NodeMap is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    put:
      tags:
        - NodeMap
      summary: Update definition for NodeMap ID {xname}
      description: >-
        Update or create an entry for an individual node xname using PUT.
        Note the following points:

        * If the PUT operation contains an xname that already exists, the entry will be overwritten
        with the new entry (i.e. new NID, Role (if given), etc.).

        * The same NID cannot be used for more than one xname. If such a duplicate would be
        created, the operation will fail.

        * If the node has already been discovered for the first time (that is, it exists in
        /hsm/v2/State/Components and already has a previous/default NID), modifying the
        NodeMap entry will not automatically reassign the current NID.
      operationId: doNodeMapPut
      parameters:
        - name: xname
          in: path
          type: string
          description: >-
            Locational xname of NodeMap record to create or update.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/NodeMap.1.0.0_NodeMap'
      responses:
        "200":
          description: NodeMap entry was successfully created/updated.
          schema:
            $ref: '#/definitions/NodeMap.1.0.0_PostNodeMap'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate resource (NID) would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # Hardware Inventory API calls
  #
  ########################################################################
  /Inventory/Hardware:
    get:
      tags:
        - HWInventoryByLocation
      summary: >-
        Retrieve all HWInventoryByLocation entries in array
      description: >-
        Retrieve all HWInventoryByLocation entries. Note that all entries are displayed as
        a flat array.
        For most purposes, you will want to use /Inventory/Hardware/Query.
      operationId: doHWInvByLocationGetAll
      parameters:
        - $ref: '#/parameters/compIDParam'
        - $ref: '#/parameters/compTypeParam'
        - name: manufacturer
          in: query
          type: string
          description: >-
            Retrieve HWInventoryByLocation entries with the given Manufacturer.
        - name: partnumber
          in: query
          type: string
          description: >-
            Retrieve HWInventoryByLocation entries with the given part number.
        - name: serialnumber
          in: query
          type: string
          description: >-
            Retrieve HWInventoryByLocation entries with the given serial number.
        - name: fruid
          in: query
          type: string
          description: >-
            Retrieve HWInventoryByLocation entries with the given FRU ID.
      responses:
        "200":
          description: >-
            Flat, unsorted HWInventoryByLocation array.
          schema:
            type: array
            items:
              $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - HWInventoryByLocation
        - cli_ignore
      summary: Create/Update hardware inventory entries
      description: >-
        Create/Update hardware inventory entries
      x-private: true
      operationId: doHWInvByLocationPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            type: object
            properties:
              Hardware:
                type: array
                items:
                  $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
            example:
              Hardware:
                - ID: x3000c0s23b4n4h0
                  HWInventoryByLocationType: HWInvByLocHSNNIC
                  HSNNICLocationInfo:
                    Id: "HPCNet3"
                    Description: "Shasta Timms NMC REV04 (HSN)"
                  PopulatedFRU:
                    HWInventoryByFRUType: HWInvByFRUHSNNIC
                    HSNNICFRUInfo:
                      Model: "ConnectX-5 100Gb/s"
                      SerialNumber: "HG20190738"
                      PartNumber: "102005303"
                      Manufacturer: "Mellanox Technologies, Ltd."
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries created or
            updated.  Message contains count of new/modified items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - HWInventoryByLocation
        - cli_danger$This will delete all hardware inventory, continue?
      summary: >-
        Delete all HWInventoryByLocation entries
      description: >-
        Delete all entries in the HWInventoryByLocation collection.
        Note that this does not delete any associated HWInventoryByFRU entries.
      operationId: doHWInvByLocationDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) response code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/HardwareByFRU:
    get:
      tags:
        - HWInventoryByFRU
      summary: >-
        Retrieve all HWInventoryByFRU entries in a flat array
      description: >-
        Retrieve all HWInventoryByFRU entries. Note that there is no organization
        of the data, the entries are presented as a flat array.
        For most purposes, you will want to use /Inventory/Hardware/Query
        unless you are interested in components that are not currently
        installed anywhere.
      operationId: doHWInvByFRUGetAll
      parameters:
        - name: fruid
          in: query
          type: string
          description: >-
            Retrieve HWInventoryByFRU entries with the given FRU ID.
        - $ref: '#/parameters/compTypeParam'
        - name: manufacturer
          in: query
          type: string
          description: >-
            Retrieve HWInventoryByFRU entries with the given Manufacturer.
        - name: partnumber
          in: query
          type: string
          description: >-
            Retrieve HWInventoryByFRU entries with the given part number.
        - name: serialnumber
          in: query
          type: string
          description: >-
            Retrieve HWInventoryByFRU entries with the given serial number.
      responses:
        "200":
          description: >-
            Flat, unsorted HWInventoryByFRU array.
          schema:
            type: array
            items:
              $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - HWInventoryByFRU
        - cli_danger$This will delete all FRUs for HSM, continue?
      summary: >-
        Delete all HWInventoryByFRU entries
      description: >-
        Delete all entries in the HWInventoryByFRU collection.
        Note that this does not delete any associated HWInventoryByLocation entries.
        Also, if any items are associated with a HWInventoryByLocation, the deletion will fail.
      operationId: doHWInvByFRUDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) response code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/Hardware/{xname}:
    get:
      tags:
        - HWInventoryByLocation
      summary: >-
        Retrieve HWInventoryByLocation entry at {xname}
      description: >-
        Retrieve HWInventoryByLocation entries for a specific xname.
      operationId: doHWInvByLocationGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of hardware inventory record to return.
          required: true
      responses:
        "200":
          description: HWInventoryByLocation entry matching xname/ID
          schema:
            $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
          examples:
            application/json:
              # TODO: this is the exact same example as the HWInvByLocNode
              # subclass.  This is the most instructive example, but we
              # should probably provide both a River and Mountain example
              # instead of the same one.
              ID: x0c0s0b0n0
              Type: Node
              Ordinal: 0
              Status: Populated
              HWInventoryByLocationType: HWInvByLocNode
              NodeLocationInfo:
                Id: System.Embedded.1
                Name: Name describing system or where it is located, per manufacturing
                Description: Description of system/node type, per manufacturing
                Hostname: if_defined_in_Redfish
                ProcessorSummary:
                  Count: 2
                  Model: Multi-Core Intel(R) Xeon(R) processor E5-16xx Series
                MemorySummary:
                  TotalSystemMemoryGiB: 64
              PopulatedFRU:
                FRUID: Dell-99999-1234.1234.2345
                Type: Node
                Subtype: River
                HWInventoryByFRUType: HWInvByFRUNode
                NodeFRUInfo:
                  AssetTag: AdminAssignedAssetTag
                  BiosVersion: v1.0.2.9999
                  Model: OKS0P2354
                  Manufacturer: Dell
                  PartNumber: p99999
                  SerialNumber: 1234.1234.2345
                  SKU: as213234
                  SystemType: Physical
                  UUID: 26276e2a-29dd-43eb-8ca6-8186bbc3d971
              Processors:
                - ID: x0c0s0b0n0p0
                  Type: Processor
                  Ordinal: 0
                  Status: Populated
                  HWInventoryByLocationType: HWInvByLocProcessor
                  ProcessorLocationInfo:
                    Id: CPU1
                    Name: Processor
                    Description: Socket 1 Processor
                    Socket: CPU 1
                  PopulatedFRU:
                    FRUID: HOW-TO-ID-CPUS-FROM-REDFISH-IF-AT-ALL
                    Type: Processor
                    Subtype: SKL24
                    HWInventoryByFRUType: HWInvByFRUProcessor
                    ProcessorFRUInfo:
                      InstructionSet: x86-64
                      Manufacturer: Intel
                      MaxSpeedMHz: 2600
                      Model: Intel(R) Xeon(R) CPU E5-2623 v4 @ 2.60GHz
                      ProcessorArchitecture: x86
                      ProcessorId:
                        EffectiveFamily: 6
                        EffectiveModel: 79
                        IdentificationRegisters: 0x000406F1
                        MicrocodeInfo: 0xB000017
                        Step: 1
                        VendorID: GenuineIntel
                      ProcessorType: CPU
                      TotalCores: 24
                      TotalThreads: 48
                - ID: x0c0s0b0n0p1
                  Type: Processor
                  Ordinal: 1
                  Status: Populated
                  HWInventoryByLocationType: HWInvByLocProcessor
                  ProcessorLocationInfo:
                    Id: CPU2
                    Name: Processor
                    Description: Socket 2 Processor
                    Socket: CPU 2
                  PopulatedFRU:
                    FRUID: HOW-TO-ID-CPUS-FROM-REDFISH-IF-AT-ALL
                    Type: Processor
                    Subtype: SKL24
                    HWInventoryByFRUType: HWInvByFRUProcessor
                    ProcessorFRUInfo:
                      InstructionSet: x86-64
                      Manufacturer: Intel
                      MaxSpeedMHz: 2600
                      Model: Intel(R) Xeon(R) CPU E5-2623 v4 @ 2.60GHz
                      ProcessorArchitecture: x86
                      ProcessorId:
                        EffectiveFamily: 6
                        EffectiveModel: 79
                        IdentificationRegisters: 0x000406F1
                        MicrocodeInfo: 0xB000017
                        Step: 1
                        VendorID: GenuineIntel
                      ProcessorType: CPU
                      TotalCores: 24
                      TotalThreads: 48
              Memory:
                - ID: x0c0s0b0n0d0
                  Type: Memory
                  Ordinal: 0
                  Status: Populated
                  HWInventoryByLocationType: HWInvByLocMemory
                  MemoryLocationInfo:
                    Id: DIMM1
                    Name: DIMM Slot 1
                    MemoryLocation:
                      Socket: 1
                      MemoryController: 1
                      Channel: 1
                      Slot: 1
                  PopulatedFRU:
                    FRUID: MFR-PARTNUMBER-SERIALNUMBER
                    Type: Memory
                    Subtype: DIMM2400G32
                    HWInventoryByFRUType: HWInvByFRUMemory
                    MemoryFRUInfo:
                      BaseModuleType: RDIMM
                      BusWidthBits: 72
                      CapacityMiB: 32768
                      DataWidthBits: 64
                      ErrorCorrection: MultiBitECC
                      Manufacturer: Micron
                      MemoryType: DRAM
                      MemoryDeviceType: DDR4
                      OperatingSpeedMhz: 2400
                      PartNumber: XYZ-123-1232
                      RankCount: 2
                      SerialNumber: 12344567689j
                - ID: x0c0s0b0n0d1
                  Type: Memory
                  Ordinal: 1
                  Status: Empty
                  HWInventoryByLocationType: HWInvByLocMemory
                  MemoryLocationInfo:
                    Id: DIMM2
                    Name: Socket 1 DIMM Slot 2
                    MemoryLocation:
                      Socket: 1
                      MemoryController: 1
                      Channel: 1
                      Slot: 2
                  PopulatedFRU:
                - ID: x0c0s0b0n0d2
                  Type: Memory
                  Ordinal: 2
                  Status: Populated
                  HWInventoryByLocationType: HWInvByLocMemory
                  MemoryLocationInfo:
                    Id: DIMM3
                    Name: Socket 2 DIMM Slot 1
                    MemoryLocation:
                      Socket: 2
                      MemoryController: 2
                      Channel: 1
                      Slot: 1
                  PopulatedFRU:
                    FRUID: MFR-PARTNUMBER-SERIALNUMBER_2
                    Type: Memory
                    Subtype: DIMM2400G32
                    HWInventoryByFRUType: HWInvByFRUMemory
                    MemoryFRUInfo:
                      BaseModuleType: RDIMM
                      BusWidthBits: 72
                      CapacityMiB: 32768
                      DataWidthBits: 64
                      ErrorCorrection: MultiBitECC
                      Manufacturer: Micron
                      MemoryType: DRAM
                      MemoryDeviceType: DDR4
                      OperatingSpeedMhz: 2400
                      PartNumber: XYZ-123-1232
                      RankCount: 2
                      SerialNumber: 346456346346j
                - ID: x0c0s0b0n0d3
                  Type: Memory
                  Ordinal: 3
                  Status: Empty
                  HWInventoryByLocationType: HWInvByLocMemory
                  MemoryLocationInfo:
                    Id: DIMM3
                    Name: Socket 2 DIMM Slot 2
                    MemoryLocation:
                      Socket: 2
                      MemoryController: 2
                      Channel: 1
                      Slot: 2
                  PopulatedFRU:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - HWInventoryByLocation
      summary: DELETE HWInventoryByLocation entry with ID (location) {xname}
      description: >-
        Delete HWInventoryByLocation entry for a specific xname.
      operationId: doHWInvByLocationDelete
      parameters:
        - name: xname
          in: path
          type: string
          description:
            Locational xname of HWInventoryByLocation record to delete.
          required: true
      responses:
        "200":
          description: Zero (success) code - entry is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/HardwareByFRU/{fruid}:
    get:
      tags:
        - HWInventoryByFRU
      summary: Retrieve HWInventoryByFRU for {fruid}
      description: >-
        Retrieve HWInventoryByFRU for a specific fruID.
      operationId: doHWInvByFRUGet
      parameters:
        - name: fruid
          in: path
          type: string
          description: >-
            Global HMS field-replaceable (FRU) identifier (serial number, etc.)
            of the hardware component to select.
          required: true
      responses:
        "200":
          description: HWInventoryByFRU entry matching fruid
          schema:
            $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - HWInventoryByFRU
      summary: Delete HWInventoryByFRU entry with FRU identifier {fruid}
      description: >-
        Delete an entry in the HWInventoryByFRU collection.
        Note that this does not delete the associated HWInventoryByLocation entry
        if the FRU is currently residing in the system. In fact, if
        the FRU ID is associated with a HWInventoryByLocation currently,
        the deletion will fail.
      operationId: doHWInvByFRUDelete
      parameters:
        - name: fruid
          in: path
          type: string
          description: Locational xname of HWInventoryByFRU record to delete.
          required: true
      responses:
        "200":
          description: Zero (success) code - entry is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: FRU ID does Not Exist - no matching entry to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/Hardware/Query/{xname}:
    get:
      tags:
        - HWInventory
      summary: Retrieve results of HWInventory query starting at {xname}
      description: >-
        Retrieve zero or more HWInventoryByLocation entries in the form of a HWInventory
        by providing xname and modifiers in query string.
        The FRU (field-replaceable unit) data will be included in each
        HWInventoryByLocation entry if the location is populated.
      operationId: doHWInvByLocationQueryGet
      parameters:
        - name: xname
          in: path
          type: string
          description: >-
            Locational xname of parent component, system (e.g. s0, all) or
            partition (p#.#) to target for hardware inventory
          required: true
        - $ref: '#/parameters/compTypeParam'
        - name: children
          in: query
          type: boolean
          description: >-
            Also return children of the selected components. Default is
            true.
        - name: parents
          in: query
          type: boolean
          description: >-
            Also return parents of the selected components.
        - name: partition
          in: query
          type: string
          description: >-
            Restrict search to the given partition (p#.#). Child components are assumed to be
            in the same partition as the parent component when performing this kind of query.
        - name: format
          in: query
          type: string
          description: >-
            How to display results
              FullyFlat      All component types listed in their own
                             arrays only.  No nesting of any children.
              NestNodesOnly  Flat except that node subcomponents are nested
                             hierarchically.
            Default is NestNodesOnly.
      #        Hierarchical   All subcomponents listed as children up to
      #                       top level component (or set of cabinets)
      responses:
        "200":
          description: >-
            ComponentArray representing results of query.
          schema:
            $ref: '#/definitions/HWInventory.1.0.0_HWInventory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/Hardware/History:
    get:
      tags:
        - HWInventoryHistory
      summary: >-
        Retrieve the history entries for all HWInventoryByLocation entries
      description: >-
        Retrieve the history entries for all HWInventoryByLocation entries.
      operationId: doHWInvHistByLocationsGet
      parameters:
        - $ref: '#/parameters/compIDParam'
        - name: eventtype
          in: query
          type: string
          description: >-
            Retrieve the history entries of a specific type (Added, Removed, etc)
            for HWInventoryByLocation entries.
        - name: starttime
          in: query
          type: string
          description: >-
            Retrieve the history entries from after the requested history window
            start time for HWInventoryByLocation entries. This takes an RFC3339
            formatted string (2006-01-02T15:04:05Z07:00).
        - name: endtime
          in: query
          type: string
          description: >-
            Retrieve the history entries from before the requested history window
            end time for HWInventoryByLocation entries. This takes an RFC3339
            formatted string (2006-01-02T15:04:05Z07:00).
      responses:
        "200":
          description: >-
            An array of history entries sorted by xname.
          schema:
            $ref: '#/definitions/HWInventory.1.0.0_HWInventoryHistoryCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - HWInventoryHistory
        - cli_danger$This will delete all hardware history, continue?
      summary: >-
        Clear the HWInventory history.
      description: >-
        Delete all HWInventory history entries.
        Note that this also deletes history for any associated HWInventoryByFRU entries.
      operationId: doHWInvHistByLocationDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) response code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/Hardware/History/{xname}:
    get:
      tags:
        - HWInventoryHistory
      summary: >-
        Retrieve the history entries for the HWInventoryByLocation entry at {xname}
      description: >-
        Retrieve the history entries for a HWInventoryByLocation entry with a specific xname.
      operationId: doHWInvHistByLocationGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of hardware inventory record to return history for.
          required: true
        - name: eventtype
          in: query
          type: string
          description: >-
            Retrieve the history entries of a specific type (Added, Removed, etc)
            for a HWInventoryByLocation entry.
        - name: starttime
          in: query
          type: string
          description: >-
            Retrieve the history entries from after the requested history window
            start time for a HWInventoryByLocation entry. This takes an RFC3339
            formatted string (2006-01-02T15:04:05Z07:00).
        - name: endtime
          in: query
          type: string
          description: >-
            Retrieve the history entries from before the requested history window
            end time for a HWInventoryByLocation entry. This takes an RFC3339
            formatted string (2006-01-02T15:04:05Z07:00).
      responses:
        "200":
          description: >-
            History entries for the HWInventoryByLocation entry matching xname/ID
          schema:
            $ref: '#/definitions/HWInventory.1.0.0_HWInventoryHistoryArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - HWInventoryHistory
        - cli_danger$This will delete all history for this xname, continue?
      summary: DELETE history for the HWInventoryByLocation entry with ID (location) {xname}
      description: >-
        Delete history for the HWInventoryByLocation entry for a specific xname.
      operationId: doHWInvHistByLocationDelete
      parameters:
        - name: xname
          in: path
          type: string
          description:
            Locational xname of HWInventoryByLocation record to delete history for.
          required: true
      responses:
        "200":
          description: Zero (success) code - entry is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/HardwareByFRU/History:
    get:
      tags:
        - HWInventoryHistory
      summary: >-
        Retrieve the history entries for all HWInventoryByFRU entries.
      description: >-
        Retrieve the history entries for all HWInventoryByFRU entries. Sorted by FRU.
      operationId: doHWInvHistByFRUsGet
      parameters:
        - name: fruid
          in: query
          type: string
          description: >-
            Retrieve the history entries for HWInventoryByFRU entries with the given FRU ID.
        - name: eventtype
          in: query
          type: string
          description: >-
            Retrieve the history entries of a specific type (Added, Removed, etc)
            for HWInventoryByFRU entries.
        - name: starttime
          in: query
          type: string
          description: >-
            Retrieve the history entries from after the requested history window
            start time for HWInventoryByFRU entries. This takes an RFC3339
            formatted string (2006-01-02T15:04:05Z07:00).
        - name: endtime
          in: query
          type: string
          description: >-
            Retrieve the history entries from before the requested history window
            end time for HWInventoryByFRU entries. This takes an RFC3339
            formatted string (2006-01-02T15:04:05Z07:00).
      responses:
        "200":
          description: >-
            An array of history entries sorted by FRU.
          schema:
            $ref: '#/definitions/HWInventory.1.0.0_HWInventoryHistoryCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/HardwareByFRU/History/{fruid}:
    get:
      tags:
        - HWInventoryHistory
      summary: Retrieve the history entries for the HWInventoryByFRU for {fruid}
      description: >-
        Retrieve the history entries for the HWInventoryByFRU for a specific fruID.
      operationId: doHWInvHistByFRUGet
      parameters:
        - name: fruid
          in: path
          type: string
          description: >-
            Global HMS field-replaceable (FRU) identifier (serial number, etc.)
            of the hardware component to select.
          required: true
        - name: eventtype
          in: query
          type: string
          description: >-
            Retrieve the history entries of a specific type (Added, Removed, etc)
            for a HWInventoryByFRU entry.
        - name: starttime
          in: query
          type: string
          description: >-
            Retrieve the history entries from after the requested history window
            start time for a HWInventoryByFRU entry. This takes an RFC3339
            formatted string (2006-01-02T15:04:05Z07:00).
        - name: endtime
          in: query
          type: string
          description: >-
            Retrieve the history entries from before the requested history window
            end time for a HWInventoryByFRU entry. This takes an RFC3339
            formatted string (2006-01-02T15:04:05Z07:00).
      responses:
        "200":
          description: >-
            History entries for the HWInventoryByFRU entry matching fruid
          schema:
            $ref: '#/definitions/HWInventory.1.0.0_HWInventoryHistoryArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - HWInventoryHistory
        - cli_danger$This will delete all history for this FRU, continue?
      summary: Delete history for the HWInventoryByFRU entry with FRU identifier {fruid}
      description: >-
        Delete history for an entry in the HWInventoryByFRU collection.
      operationId: doHWInvHistByFRUDelete
      parameters:
        - name: fruid
          in: path
          type: string
          description: Locational xname of HWInventoryByFRU record to delete history for.
          required: true
      responses:
        "200":
          description: Zero (success) code - entry is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: FRU ID does Not Exist - no matching entry to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # RedfishEndpoint API Calls
  #
  ########################################################################
  /Inventory/RedfishEndpoints:
    get:
      tags:
        - RedfishEndpoint
      summary: >-
        Retrieve all RedfishEndpoints, returning RedfishEndpointArray
      description: >-
        Retrieve all Redfish endpoint entries as a named array, optionally
        filtering it.
      operationId: doRedfishEndpointsGet
      parameters:
        - $ref: '#/parameters/compIDParam'
        - name: fqdn
          in: query
          type: string
          description: >-
            Retrieve RedfishEndpoint with the given FQDN
        - $ref: '#/parameters/compTypeParam'
        - name: uuid
          in: query
          type: string
          description: >-
            Retrieve the RedfishEndpoint with the given UUID.
        - name: macaddr
          in: query
          type: string
          description: >-
            Retrieve the RedfishEndpoint with the given MAC address.
        - name: ipaddress
          in: query
          type: string
          description: >-
            Retrieve the RedfishEndpoint with the given IP address. A blank
            string will get Redfish endpoints without IP addresses.
        - name: laststatus
          in: query
          type: string
          description: >-
            Retrieve the RedfishEndpoints with the given discovery status. This can be negated (i.e. !DiscoverOK).
            Valid values are: EndpointInvalid, EPResponseFailedDecode, HTTPsGetFailed, NotYetQueried, VerificationFailed, ChildVerificationFailed, DiscoverOK
      responses:
        "200":
          description: >-
            Named RedfishEndpoints array representing all current RF endpoints.
          schema:
            $ref: '#/definitions/RedfishEndpointArray_RedfishEndpointArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - RedfishEndpoint
      summary: Create RedfishEndpoint(s)
      description: >-
        Create a new RedfishEndpoint whose ID field is a valid xname.
        ID can be given explicitly, or if the Hostname or hostname portion
        of the FQDN is given, and is a valid xname, this will be used for
        the ID instead.  The Hostname/Domain can be given as separate
        fields and will be used to create a FQDN if one is not given. The
        reverse is also true.  If FQDN is an IP address it will be
        treated as a hostname with a blank domain.  The domain field is
        used currently to assign the domain for discovered nodes
        automatically.


        If ID is given and is a valid XName, the hostname/domain/FQDN
        does not need to have an XName as the hostname portion. It can
        be any address.

        The ID and FQDN must be unique across all entries.
      operationId: doRedfishEndpointsPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/RedfishEndpoint.1.0.0_RedfishEndpoint'
      responses:
        "201":
          description: Success, returns array of created resource URIs
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceURI.1.0.0'
          examples:
            application/json:
              - URI: /hsm/v2/Inventory/RedfishEndpoints/x0c0s0b0
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - RedfishEndpoint
        - cli_danger$This will delete all Redfish endpoints in HSM, continue?
      summary: >-
        Delete all RedfishEndpoints
      description: >-
        Delete all entries in the RedfishEndpoint collection.
      operationId: doRedfishEndpointsDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/RedfishEndpoints/{xname}:
    get:
      tags:
        - RedfishEndpoint
      summary: Retrieve RedfishEndpoint at {xname}
      description: >-
        Retrieve RedfishEndpoint, located at physical location {xname}.
      operationId: doRedfishEndpointGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of RedfishEndpoint record to return.
          required: true
      responses:
        "200":
          description: RedfishEndpoint entry matching xname/ID
          schema:
            $ref: '#/definitions/RedfishEndpoint.1.0.0_RedfishEndpoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - RedfishEndpoint
      summary: Delete RedfishEndpoint with ID {xname}
      description: >-
        Delete RedfishEndpoint record for a specific xname.
      operationId: doRedfishEndpointDelete
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of RedfishEndpoint record to delete.
          required: true
      responses:
        "200":
          description: Zero (success) error code - component is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    put:
      tags:
        - RedfishEndpoint
        - cli_ignore
      summary: Update definition for RedfishEndpoint ID {xname}
      description: >-
        Create or update RedfishEndpoint record for a specific xname.
      operationId: doRedfishEndpointPut
      parameters:
        - name: xname
          in: path
          type: string
          description: >-
            Locational xname of RedfishEndpoint record to create or update.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/RedfishEndpoint.1.0.0_RedfishEndpoint'
      responses:
        "200":
          description: Success, return updated RedfishEndpoint resource
          schema:
            $ref: '#/definitions/RedfishEndpoint.1.0.0_RedfishEndpoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to update
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    patch:
      tags:
        - RedfishEndpoint
      summary: Update (PATCH) definition for RedfishEndpoint ID {xname}
      description: >-
        Update (PATCH) RedfishEndpoint record for a specific xname.
      operationId: doRedfishEndpointPatch
      parameters:
        - name: xname
          in: path
          type: string
          description: >-
            Locational xname of RedfishEndpoint record to create or update.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/RedfishEndpoint.1.0.0_RedfishEndpoint'
      responses:
        "200":
          description: Success, return updated RedfishEndpoint resource
          schema:
            $ref: '#/definitions/RedfishEndpoint.1.0.0_RedfishEndpoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to update
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  #  /Inventory/RedfishEndpoints/Query:
  #    post:
  #      tags:
  #        - RedfishEndpoint
  #      summary: >-
  #        POST RedfishEndpoint query, returning RedfishEndpointArray
  #      description: >-
  #        Given payload of locational xnames, retrieve the targeted entries
  #        in the form of a RedfishEndpointArray.
  #      operationId: doRedfishEndpointQueryPost
  #      parameters:
  #        - name: payload
  #          in: body
  #          required: true
  #          schema:
  #            $ref: '#/definitions/RedfishEndpointArray_PostQuery'
  #      responses:
  #        "200":
  #          description: >-
  #            ComponentArray representing results of query.
  #          schema:
  #            $ref: '#/definitions/RedfishEndpointArray_RedfishEndpointArray'
  #        "400":
  #          description: Bad Request
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #        "404":
  #          description: Does Not Exist
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #        default:
  #          description: Unexpected error
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  /Inventory/RedfishEndpoints/Query/{xname}:
    get:
      tags:
        - RedfishEndpoint
      summary: >-
        Retrieve RedfishEndpoint query for {xname}, returning RedfishEndpointArray
      description: >-
        Given xname and modifiers in query string, retrieve zero or more
        RedfishEndpoint entries in the form of a RedfishEndpointArray.
      operationId: doRedfishEndpointQueryGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of RedfishEndpoint to query.
          required: true
      #  - name: type
      #    in: query
      #    type: string
      #    description: >-
      #      Retrieve xname's children of type={type} instead of {xname}.
      #  - name: children
      #    in: query
      #    type: boolean
      #    description: >-
      #      Also return children of the selected RedfishEndpoints.
      #  - name: parents
      #    in: query
      #    type: boolean
      #    description: >-
      #      Also return parents of the selected RedfishEndpoints.
      #  - name: partition
      #    in: query
      #    type: string
      #    description: >-
      #      Restrict search to the given hard:soft partition.
      responses:
        "200":
          description: >-
            RedfishEndpointArray representing results of query.
          schema:
            $ref: '#/definitions/RedfishEndpointArray_RedfishEndpointArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - no matches
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # ComponentEndpoint API - ComponentEndpoints discovered under Redfish EP
  #
  ########################################################################
  /Inventory/ComponentEndpoints:
    get:
      tags:
        - ComponentEndpoint
      summary: Retrieve ComponentEndpoints Collection
      description: >-
        Retrieve the full collection of ComponentEndpoints in the form of a
        ComponentEndpointArray. Full results can also be filtered by query
        parameters. Only the first filter parameter of each type is
        used and the parameters are applied in an AND fashion.
        If the collection is empty or the filters have no match, an
        empty array is returned.
      operationId: doComponentEndpointsGet
      parameters:
        - $ref: '#/parameters/compIDParam'
        - name: redfish_ep
          in: query
          type: string
          description: >-
            Retrieve all ComponentEndpoints managed by the parent Redfish EP.
        - $ref: '#/parameters/compTypeParam'
        - name: redfish_type
          in: query
          type: string
          description: >-
            Retrieve all ComponentEndpoints with the given Redfish type.
        # Not implemented.
      #  - name: partition
      #    in: query
      #    type: string
      #    description: >-
      #      Restrict search to the given hard.soft partition.
      responses:
        "200":
          description: >-
            ComponentEndpointArray representing the ComponentEndpoint
            collection or a filtered subset thereof.
          schema:
            $ref: '#/definitions/ComponentEndpointArray_ComponentEndpointArray'
          examples:
            application/json:
              ComponentEndpoints:
                - ID: x0c0s0b0n0
                  Type: Node
                  Domain: mgmt.example.domain.com
                  FQDN: x0c0s0b0n0.mgmt.example.domain.com
                  RedfishType: ComputerSystem
                  RedfishSubtype: Physical
                  ComponentEndpointType: ComponentEndpointComputerSystem
                  MACAddr: d0:94:66:00:aa:37
                  UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
                  OdataID: /redfish/v1/Systems/System.Embedded.1
                  RedfishEndpointID: x0c0s0b0
                  RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
                  RedfishURL:
                    "x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems\
                    /System.Embedded.1"
                  RedfishSystemInfo:
                    Name: System Embedded 1
                    Actions:
                      '#ComputerSystem.Reset':
                        AllowableValues:
                          - "On"
                          - "ForceOff"
                        target:
                          "/redfish/v1/Systems/System.Embedded.1/Actions\
                          /ComputerSystem.Reset"
                    EthernetNICInfo:
                      - RedfishId: "1"
                        "@odata.id":
                          /redfish/v1/Systems/System.Embedded.1/EthernetInterfaces/1
                        Description: Management Network Interface
                        InterfaceEnabled: true
                        MACAddress: d0:94:66:00:aa:37,
                        PermanentMACAddress: d0:94:66:00:aa:37
                      - RedfishId: "2"
                        "@odata.id":
                          /redfish/v1/Systems/System.Embedded.1/EthernetInterfaces/2
                        Description: Management Network Interface
                        InterfaceEnabled: true
                        MACAddress: d0:94:66:00:aa:38
                        PermanentMACAddress: d0:94:66:00:aa:38
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - ComponentEndpoint
        - cli_danger$This will delete all component endpoints, continue?
      summary: >-
        Delete all ComponentEndpoints
      description: >-
        Delete all entries in the ComponentEndpoint collection.
      operationId: doComponentEndpointsDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/ComponentEndpoints/{xname}:
    get:
      tags:
        - ComponentEndpoint
      summary: Retrieve ComponentEndpoint at {xname}
      description: Retrieve ComponentEndpoint record for a specific xname.
      operationId: doComponentEndpointGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of ComponentEndpoint record to return.
          required: true
      responses:
        "200":
          description: HWInventoryByLocation entry matching xname/ID
          schema:
            $ref: '#/definitions/ComponentEndpoint.1.0.0_ComponentEndpoint'
          examples:
            application/json:
              ID: x0c0s0b0n0
              Type: Node
              Domain: mgmt.example.domain.com
              FQDN: x0c0s0b0n0.mgmt.example.domain.com
              RedfishType: ComputerSystem
              RedfishSubtype: Physical
              ComponentEndpointType: ComponentEndpointComputerSystem
              MACAddr: d0:94:66:00:aa:37
              UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
              OdataID: /redfish/v1/Systems/System.Embedded.1
              RedfishEndpointID: x0c0s0b0
              RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
              RedfishURL:
                "x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems\
                /System.Embedded.1"
              RedfishSystemInfo:
                Name: System Embedded 1
                Actions:
                  '#ComputerSystem.Reset':
                    AllowableValues:
                      - "On"
                      - "ForceOff"
                    target:
                      "/redfish/v1/Systems/System.Embedded.1/Actions\
                      /ComputerSystem.Reset"
                EthernetNICInfo:
                  - RedfishId: "1"
                    "@odata.id":
                      "/redfish/v1/Systems/System.Embedded.1\
                      /EthernetInterfaces/1"
                    Description: Management Network Interface
                    InterfaceEnabled: true
                    MACAddress: d0:94:66:00:aa:37
                    PermanentMACAddress: d0:94:66:00:aa:37
                  - RedfishId: "2"
                    "@odata.id":
                      "/redfish/v1/Systems/System.Embedded.1\
                      /EthernetInterfaces/2"
                    Description: Management Network Interface
                    InterfaceEnabled: true
                    MACAddress: ae:12:ce:7a:aa:99
                    PermanentMACAddress: ae:12:ce:7a:aa:99
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - ComponentEndpoint
      summary: Delete ComponentEndpoint with ID {xname}
      description: Delete ComponentEndpoint for a specific xname.
      operationId: doComponentEndpointDelete
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of ComponentEndpoint record to delete.
          required: true
      responses:
        "200":
          description:
            Zero (success) error code - ComponentEndpoint is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  #  /Inventory/ComponentEndpoints/Query:
  #    post:
  #      tags:
  #        - ComponentEndpoint
  #      summary: >-
  #        POST ComponentEndpoint query, returning ComponentEndpointArray
  #      description: >-
  #        Given payload of locational xnames, retrieve the targeted entries
  #        in the form of a ComponentEndpointArray.
  #      operationId: doComponentEndpointQueryPost
  #      parameters:
  #        - name: payload
  #          in: body
  #          required: true
  #          schema:
  #            $ref: '#/definitions/ComponentEndpointArray_PostQuery'
  #      responses:
  #        "200":
  #          description: >-
  #            ComponentArray representing results of query.
  #          schema:
  #            $ref:
  #              '#/definitions/ComponentEndpointArray_ComponentEndpointArray'
  #        "400":
  #          description: Bad Request
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #        "404":
  #          description: Does Not Exist
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #        default:
  #          description: Unexpected error
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #  /Inventory/ComponentEndpoints/Query/{xname}:
  #    get:
  #      tags:
  #        - ComponentEndpoint
  #      summary: >-
  #        GET ComponentEndpoint query for {xname}, returning
  #        ComponentEndpointArray
  #      description: >-
  #        Given xname and modifiers in query string, retrieve zero or more
  #        ComponentEndpoint entries in the form of a ComponentEndpointArray.
  #      operationId: doComponentEndpointQueryGet
  #      parameters:
  #        - name: xname
  #          in: path
  #          type: string
  #          description: Locational xname of ComponentEndpoint to query.
  #          required: true
  #        - name: type
  #          in: query
  #          type: string
  #          description: >-
  #            Retrieve xname's children of type={type} instead of {xname}.
  #        - name: children
  #          in: query
  #          type: boolean
  #          description: >-
  #            Also return children of the selected ComponentEndpoints.
  #        - name: parents
  #          in: query
  #          type: boolean
  #          description: >-
  #            Also return parents of the selected ComponentEndpoints.
  #        - name: partition
  #          in: query
  #          type: string
  #          description: >-
  #            Restrict search to the given hard:soft partition.
  #      responses:
  #        "200":
  #          description: >-
  #            ComponentEndpointArray representing results of query.
  #          schema:
  #            $ref:
  #              '#/definitions/ComponentEndpointArray_ComponentEndpointArray'
  #        "400":
  #          description: Bad Request
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #        "404":
  #          description: Does Not Exist
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  #        default:
  #          description: Unexpected error
  #          schema:
  #            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # ServiceEndpoint API - ServiceEndpoints discovered under Redfish EP
  #
  ########################################################################
  /Inventory/ServiceEndpoints:
    get:
      tags:
        - ServiceEndpoint
      summary: Retrieve ServiceEndpoints Collection
      description: >-
        Retrieve the full collection of ServiceEndpoints in the form of a
        ServiceEndpointArray. Full results can also be filtered by query
        parameters.  Only the first filter parameter of each type is
        used and the parameters are applied in an AND fashion.
        If the collection is empty or the filters have no match, an
        empty array is returned.
      operationId: doServiceEndpointsGetAll
      parameters:
        - name: redfish_ep
          in: query
          type: string
          description: >-
            Retrieve all ServiceEndpoints managed by the parent Redfish EP.
            Can be repeated to select groups of endpoints.
        - name: service
          in: query
          type: string
          description: >-
            Retrieve all ServiceEndpoints of the given Redfish service.
        # Not implemented.
      #  - name: partition
      #    in: query
      #    type: string
      #    description: >-
      #      Restrict search to the given hard.soft partition.
      responses:
        "200":
          description: >-
            ServiceEndpointArray representing the ServiceEndpoint
            collection or a filtered subset thereof.
          schema:
            $ref: '#/definitions/ServiceEndpointArray_ServiceEndpointArray'
          examples:
            application/json:
              ServiceEndpoints:
                RedfishEndpointID: x0c0s0b0
                RedfishType: UpdateService
                RedfishSubtype: Other
                UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
                OdataID: "/redfish/v1/UpdateService"
                RedfishEndpointFQDN: "x0c0s0b0.mgmt.example.domain.com"
                RedfishURL:
                  "x0c0s0b0.mgmt.example.domain.com/redfish/v1/UpdateService"
                ServiceInfo:
                  '@odata.context':
                    "/redfish/v1/$metadata#UpdateService.UpdateService"
                  '@odata.id': "/redfish/v1/UpdateService"
                  '@odata.type': "#UpdateService.v1_1_0.UpdateService"
                  ID: UpdateService
                  Name: Update Service
                  Actions:
                    '#UpdateService.SimpleUpdate':
                      target:
                        "/redfish/v1/Systems/System.Embedded.1/Actions\
                        /ComputerSystem.Reset"
                      title: ""
                  FirmwareInventory:
                    "@odata.id": "/redfish/v1/UpdateService/FirmwareInventory"
                  SoftwareInventory:
                    "@odata.id": "/redfish/v1/UpdateService/SoftwareInventory"
                  ServiceEnabled: "True"
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - ServiceEndpoint
        - cli_danger$This will delete all service endpoints, continue?
      summary: >-
        Delete all ServiceEndpoints
      description: >-
        Delete all entries in the ServiceEndpoint collection.
      operationId: doServiceEndpointsDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/ServiceEndpoints/{service}:
    get:
      tags:
        - ServiceEndpoint
      summary: Retrieve all ServiceEndpoints of a {service}
      description: >-
        Retrieve all ServiceEndpoint records for the Redfish service.
      operationId: doServiceEndpointsGet
      parameters:
        - name: service
          in: path
          type: string
          description: >-
            The Redfish service type of the ServiceEndpoint records to return.
          required: true
        - name: redfish_ep
          in: query
          type: string
          description: >-
            Retrieve all ServiceEndpoints of type {service} managed by
            the parent Redfish EP. Can be repeated to select groups of
            endpoints.
      responses:
        "200":
          description: >-
            ServiceEndpointArray representing the subset of the ServiceEndpoint
            collection filtered by {service} or additionally filtered
            thereof.
          schema:
            $ref: '#/definitions/ServiceEndpointArray_ServiceEndpointArray'
          examples:
            application/json:
              ServiceEndpoints:
                RedfishEndpointID: x0c0s0b0
                RedfishType: UpdateService
                RedfishSubtype: Other
                UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
                OdataID: "/redfish/v1/UpdateService"
                RedfishEndpointFQDN: "x0c0s0b0.mgmt.example.domain.com"
                RedfishURL:
                  "x0c0s0b0.mgmt.example.domain.com/redfish/v1/UpdateService"
                ServiceInfo:
                  '@odata.context':
                    "/redfish/v1/$metadata#UpdateService.UpdateService"
                  '@odata.id': "/redfish/v1/UpdateService"
                  '@odata.type': "#UpdateService.v1_1_0.UpdateService"
                  ID: UpdateService
                  Name: Update Service
                  Actions:
                    '#UpdateService.SimpleUpdate':
                      target:
                        "/redfish/v1/Systems/System.Embedded.1/Actions\
                        /ComputerSystem.Reset"
                      title: ""
                  FirmwareInventory:
                    "@odata.id": "/redfish/v1/UpdateService/FirmwareInventory"
                  SoftwareInventory:
                    "@odata.id": "/redfish/v1/UpdateService/SoftwareInventory"
                  ServiceEnabled: "True"
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Service does not exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/ServiceEndpoints/{service}/RedfishEndpoints/{xname}:
    get:
      tags:
        - ServiceEndpoint
      summary: Retrieve the ServiceEndpoint of a {service} managed by {xname}
      description: Retrieve the ServiceEndpoint for a Redfish service that is managed by xname.
      operationId: doServiceEndpointGet
      parameters:
        - name: service
          in: path
          type: string
          description: >-
            The Redfish service type of the ServiceEndpoint record to return.
          required: true
        - name: xname
          in: path
          type: string
          description: >-
            The locational xname of the RedfishEndpoint that manages the
            ServiceEndpoint record to return.
          required: true
      responses:
        "200":
          description: >-
            ServiceEndpoint entry matching {service}/{xname}
          schema:
            $ref: '#/definitions/ServiceEndpoint.1.0.0_ServiceEndpoint'
          examples:
            application/json:
              RedfishEndpointID: x0c0s0b0
              RedfishType: UpdateService
              RedfishSubtype: Other
              UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
              OdataID: "/redfish/v1/UpdateService"
              RedfishEndpointFQDN: "x0c0s0b0.mgmt.example.domain.com"
              RedfishURL:
                "x0c0s0b0.mgmt.example.domain.com/redfish/v1/UpdateService"
              ServiceInfo:
                '@odata.context':
                  "/redfish/v1/$metadata#UpdateService.UpdateService"
                '@odata.id': "/redfish/v1/UpdateService"
                '@odata.type': "#UpdateService.v1_1_0.UpdateService"
                ID: UpdateService
                Name: Update Service
                Actions:
                  '#UpdateService.SimpleUpdate':
                    target:
                      "/redfish/v1/Systems/System.Embedded.1/Actions\
                      /ComputerSystem.Reset"
                    title: ""
                FirmwareInventory:
                  "@odata.id": "/redfish/v1/UpdateService/FirmwareInventory"
                SoftwareInventory:
                  "@odata.id": "/redfish/v1/UpdateService/SoftwareInventory"
                ServiceEnabled: "True"
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - ServiceEndpoint
      summary: Delete the {service} ServiceEndpoint managed by {xname}
      description: Delete the {service} ServiceEndpoint managed by {xname}
      operationId: doServiceEndpointDelete
      parameters:
        - name: service
          in: path
          type: string
          description: >-
            The Redfish service type of the ServiceEndpoint record to delete.
          required: true
        - name: xname
          in: path
          type: string
          description: >-
            The locational xname of the RedfishEndpoint that manages the
            ServiceEndpoint record to delete.
          required: true
      responses:
        "200":
          description: Zero (success) error code - ServiceEndpoint is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - no matching ServiceEndpoint to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # Component Ethernet Interfaces V2 API
  #
  ########################################################################
  /Inventory/EthernetInterfaces:
    get:
      tags:
        - ComponentEthernetInterfaces
      summary: >-
        GET ALL existing component Ethernet interfaces
      description: >-
        Get all component Ethernet interfaces that currently exist, optionally filtering
        the set, returning an array of component Ethernet interfaces.
      operationId: doCompEthInterfacesGetV2
      parameters:
        - name: MACAddress
          in: query
          type: string
          description: >-
            Retrieve the component Ethernet interface with the provided MAC address. Can be
            repeated to select multiple component Ethernet interfaces.
        - name: IPAddress
          in: query
          type: string
          description: >-
            Retrieve the component Ethernet interface with the provided IP address. Can be
            repeated to select multiple component Ethernet interfaces. A blank string will
            retrieve component Ethernet interfaces that have no IP address.
        - name: Network
          in: query
          type: string
          description: >-
            Retrieve the component Ethernet interface with a IP addresses on the provided 
            network. Can be repeated to select multiple component Ethernet interfaces. A blank
            string will retrieve component Ethernet interfaces that have an IP address with no 
            network.
        - name: ComponentID
          in: query
          type: string
          description: >-
            Retrieve all component Ethernet interfaces with the provided component ID. Can be
            repeated to select multiple component Ethernet interfaces.
        - name: Type
          in: query
          type: string
          description: >-
            Retrieve all component Ethernet interfaces with the provided parent HMS type. Can be
            repeated to select multiple component Ethernet interfaces.
        - name: OlderThan
          in: query
          type: string
          description: >-
            Retrieve all component Ethernet interfaces that were last updated before the
            specified time. This takes an RFC3339 formatted string (2006-01-02T15:04:05Z07:00).
        - name: NewerThan
          in: query
          type: string
          description: >-
            Retrieve all component Ethernet interfaces that were last updated after the
            specified time. This takes an RFC3339 formatted string (2006-01-02T15:04:05Z07:00).
      responses:
        "200":
          description: >-
            An array containing all existing component Ethernet interface objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/CompEthInterface.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - ComponentEthernetInterfaces
      summary: CREATE a new component Ethernet interface (via POST)
      description: >-
        Create a new component Ethernet interface.
      operationId: doCompEthInterfacePostV2
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CompEthInterface.1.0.0'
      responses:
        "201":
          description: >-
            Success, returns array containing the created resource URI.
          schema:
            $ref: '#/definitions/ResourceURI.1.0.0'
          examples:
            application/json:
              uri: /hsm/v2/Inventory/a4bf012b7311
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate component Ethernet interface would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - ComponentEthernetInterfaces
        - cli_danger$This will delete all component Ethernet interfaces, continue?
      summary: >-
        Clear the component Ethernet interface collection.
      description: >-
        Delete all component Ethernet interface entries.
      operationId: doCompEthInterfaceDeleteAllV2
      responses:
        "200":
          description: >-
            Zero (success) response code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/EthernetInterfaces/{ethInterfaceID}:
    get:
      tags:
        - ComponentEthernetInterfaces
      summary: GET existing component Ethernet interface {ethInterfaceID}
      description: >-
        Retrieve the component Ethernet interface which was created with the given {ethInterfaceID}.
      operationId: doCompEthInterfaceGetV2
      parameters:
        - name: ethInterfaceID
          in: path
          type: string
          description: The ID of the component Ethernet interface to return.
          required: true
      responses:
        "200":
          description: Component Ethernet interface entry identified by {ethInterfaceID}, if it exists.
          schema:
            $ref: '#/definitions/CompEthInterface.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - ComponentEthernetInterfaces
      summary: DELETE existing component Ethernet interface with {ethInterfaceID}
      description: >-
        Delete the given component Ethernet interface with {ethInterfaceID}.
      operationId: doCompEthInterfaceDeleteV2
      parameters:
        - name: ethInterfaceID
          in: path
          type: string
          description: The ID of the component Ethernet interface to delete.
          required: true
      responses:
        "200":
          description: Zero (success) error code - component Ethernet interface is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - No component Ethernet interface with ethInterfaceID.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    patch:
      tags:
        - ComponentEthernetInterfaces
      summary: UPDATE metadata for existing component Ethernet interface {ethInterfaceID}
      description: >-
        To update the IP address, CompID, and/or description of a component Ethernet interface,
        a PATCH operation can be used. Omitted fields are not updated.
        The 'LastUpdate' field will be updated if an IP address is provided.
      operationId: doCompEthInterfacePatchV2
      parameters:
        - name: ethInterfaceID
          in: path
          type: string
          description: >-
            The ID of the component Ethernet interface to update.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CompEthInterface.1.0.0_Patch'
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: The component Ethernet interface with this ethInterfaceID does not exist.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/EthernetInterfaces/{ethInterfaceID}/IPAddresses:
    get:
      tags:
        - ComponentEthernetInterfaces
      summary: >-
        Retrieve all IP addresses of a component Ethernet interface {ethInterfaceID}
      description: >-
        Retrieve all IP addresses of a component Ethernet interface {ethInterfaceID}
      operationId: doCompEthInterfaceIPAddressesGetV2
      parameters:
        - name: ethInterfaceID
          in: path
          type: string
          description: The ID of the component Ethernet interface to retrieve the IP addresses of.
          required: true
      responses:
        "200":
          description: IP addresses of the component Ethernet interface entry identified by {ethInterfaceID}, if it exists.
          schema:
            type: array
            items:
              $ref: '#/definitions/CompEthInterface.1.0.0_IPAddressMapping'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - ComponentEthernetInterfaces
      summary: CREATE a new IP address mapping in a component Ethernet interface (via POST)
      description: >-
        Create a new IP address mapping in a component Ethernet interface {ethInterfaceID}.
      operationId: doCompEthInterfaceIPAddressesPostV2
      parameters:
        - name: ethInterfaceID
          in: path
          type: string
          description: The ID of the component Ethernet interface to add the IP address to.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CompEthInterface.1.0.0_IPAddressMapping'
      responses:
        "201":
          description: >-
            Success, returns the created resource URI.
          schema:
            $ref: '#/definitions/ResourceURI.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate IP address in component Ethernet interface would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/EthernetInterfaces/{ethInterfaceID}/IPAddresses/{ipAddress}:
    patch:
      tags:
        - ComponentEthernetInterfaces
      summary: >-
        UPDATE metadata for existing IP address {ipAddress} in a component Ethernet interface {ethInterfaceID
      description: >-
        "To update the network of an IP address in a component Ethernet interface,
        a PATCH operation can be used. Omitted fields are not updated.
        The 'LastUpdate' field of the component Ethernet interface will be updated"
      operationId: doCompEthInterfaceIPAddressPatchV2
      parameters:
        - name: ethInterfaceID
          in: path
          type: string
          description: The ID of the component Ethernet interface with the IP address to patch.
          required: true
        - name: ipAddress
          in: path
          type: string
          description: The IP address to patch from the component Ethernet interface.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CompEthInterface.1.0.0_IPAddressMapping_Patch'
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - No IP address with ipAddress exists on the specified component Ethernet interface.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - ComponentEthernetInterfaces
      summary: DELETE existing IP address mapping with {ipAddress} from a component Ethernet interface with {ethInterfaceID}
      description: >-
        Delete the given IP address mapping with {ipAddress} from a component Ethernet interface with {ethInterfaceID}.
        The 'LastUpdate' field of the component Ethernet interface will be updated"
      operationId: doCompEthInterfaceIPAddressDeleteV2
      parameters:
        - name: ethInterfaceID
          in: path
          type: string
          description: The ID of the component Ethernet interface to delete the IP address from
          required: true
        - name: ipAddress
          in: path
          type: string
          description: The IP address to delete from the component Ethernet interface.
          required: true
      responses:
        "200":
          description: Zero (success) error code - IP address mapping is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - No IP address with ipAddress exists on the specified component Ethernet interface
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # Discovery API Calls - Discover action and DiscoveryStatus
  #
  ########################################################################
  /Inventory/DiscoveryStatus:
    get:
      tags:
        - DiscoveryStatus
      summary: >-
        Retrieve all DiscoveryStatus entries in collection
      description: >-
        Retrieve all DiscoveryStatus entries as an unnamed array.
      operationId: doDiscoveryStatusGetAll
      responses:
        "200":
          description: >-
            Unnamed DiscoveryStatus array representing all entries
            in collection.
          schema:
            type: array
            items:
              $ref: '#/definitions/DiscoveryStatus.1.0.0_DiscoveryStatus'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/DiscoveryStatus/{id}:
    get:
      tags:
        - DiscoveryStatus
      summary: >-
        Retrieve DiscoveryStatus entry matching {id}
      description: >-
        Retrieve DiscoveryStatus entry with the specific ID.
      operationId: doDiscoveryStatusGet
      parameters:
        - name: id
          in: path
          type: number
          format: int32
          description: Positive integer ID of DiscoveryStatus entry to retrieve
          required: true
      responses:
        "200":
          description: >-
            Success.  Returns matching DiscoveryStatus entry.
          schema:
            $ref: '#/definitions/DiscoveryStatus.1.0.0_DiscoveryStatus'
        "400":
          description: Bad Request, e.g. not a positive integer
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Not found (no such ID)
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Inventory/Discover:
    post:
      tags:
        - Discover
      summary: Create Discover operation request
      description: >-
        Discover and populate database with component data (ComponentEndpoints,
        HMS Components, HWInventory) based on interrogating RedfishEndpoint
        entries.  If not all RedfishEndpoints should be discovered, an
        array of xnames can be provided in the DiscoverInput payload.
      operationId: doInventoryDiscoverPost
      parameters:
        - name: payload
          in: body
          required: false
          schema:
            $ref: '#/definitions/Discover.1.0.0_DiscoverInput'
      responses:
        "200":
          description: >-
            Success, discovery started.  DiscoverStatus link(s) to check in
            returned URI array.
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceURI.1.0.0'
          examples:
            application/json:
              - URI: /hsm/v2/Inventory/DiscoveryStatus/0
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: >-
            One or more requested RedfishEndpoint xname IDs was not found.
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: >-
            Conflict.  One or more DiscoveryStatus objects is InProgress
            or Pending and prevents this operation from starting. Try again
            later or use force option (should never be needed unless some
            kind of problem has occurred).  Simultaneous discoveries could
            cause one or both to fail.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ##########################################################################
  #
  # Node State Change Notification API - Subscribe to receive node SCNs from HSM
  #
  ##########################################################################
  /Subscriptions/SCN:
    post:
      tags:
        - SCN
        - cli_ignore
      summary: Create a subscription for state change notifications
      description: >-
        Request a subscription for state change notifications for a set of
        component states. This will create a new subscription and produce
        a unique ID for the subscription. This will not affect the existing
        subscriptions.
      operationId: doPostSCNSubscription
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/Subscriptions_SCNPostSubscription'
      responses:
        "200":
          description: >-
            A new subscription was created. The subscription ID is
            included in the response.
          schema:
            $ref: '#/definitions/Subscriptions_SCNSubscriptionArrayItem.1.0.0'
        "400":
          description:
            Bad Request. Malformed JSON. Verify all JSON formatting in payload.
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: >-
            The subscription already exists for the specified subscriber
            and URL.
          schema:
            $ref: '#/definitions/Problem7807'
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - SCN
        - cli_ignore
      summary: Delete all state change notification subscriptions
      description: >-
        Delete all subscriptions.
      operationId: doDeleteSCNSubscriptionsAll
      responses:
        "200":
          description: Success. Subscriptions deleted successfully.
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    get:
      tags:
        - SCN
        - cli_ignore
      summary: Retrieve currently-held state change notification subscriptions
      description: >-
        Retrieve all information on currently held state change notification
        subscriptions.
      operationId: doGetSCNSubscriptionsAll
      produces:
        - application/json
      responses:
        "200":
          description: Success. Currently held subscriptions are returned.
          schema:
            $ref: '#/definitions/Subscriptions_SCNSubscriptionArray'
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /Subscriptions/SCN/{id}:
    put:
      tags:
        - SCN
        - cli_ignore
      summary: Update a subscription for state change notifications
      description: >-
        Update an existing state change notification subscription in whole.
        This will overwrite the specified subscription.
      operationId: doPutSCNSubscription
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          type: string
          description: >-
            This is the ID associated with the subscription that was generated
            at its creation.
          required: true
        - in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/Subscriptions_SCNPostSubscription'
      responses:
        "200":
          description: Success. The subscription has been overwritten.
        "400":
          description: >-
            Bad Request. Malformed JSON. Verify all JSON formatting in payload.
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: The subscription does not exist.
          schema:
            $ref: '#/definitions/Problem7807'
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    patch:
      tags:
        - SCN
        - cli_ignore
      summary: Update a subscription for state change notifications
      description: >-
        Update a subscription for state change notifications to add or remove triggers.
      operationId: doPatchSCNSubscription
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          type: string
          description: >-
            This is the ID associated with the subscription that was generated
            at its creation.
          required: true
        - in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/Subscriptions_SCNPatchSubscription'
      responses:
        "204":
          description: Success.
        "400":
          description:
            Bad Request. Malformed JSON. Verify all JSON formatting in payload.
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        "500":
          description: Internal server error. Database error.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - SCN
        - cli_ignore
      summary: Delete a state change notification subscription
      description: >-
        Delete a state change notification subscription.
      operationId: doDeleteSCNSubscription
      parameters:
        - name: id
          in: path
          type: string
          description: >-
            This is the ID associated with the subscription that was generated
            at its creation.
          required: true
      responses:
        "200":
          description: Success. Subscription deleted successfully.
        "400":
          description: Bad Request.
          schema:
            $ref: '#/definitions/Problem7807'
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    get:
      tags:
        - SCN
        - cli_ignore
      summary: Retrieve a currently-held state change notification subscription
      description: >-
        Return the information on a currently held state change notification
        subscription
      operationId: doGetSCNSubscription
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          type: string
          description: >-
            This is the ID associated with the subscription that was generated
            at its creation.
          required: true
      responses:
        "200":
          description: Success. A currently held subscription is returned.
          schema:
            $ref: '#/definitions/Subscriptions_SCNPostSubscription'
        "500":
          description: Database error.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # Group API Calls
  #
  ########################################################################
  /groups:
    get:
      tags:
        - Group
      summary: >-
        Retrieve all existing groups
      description: >-
        Retrieve all groups that currently exist, optionally filtering
        the set, returning an array of groups.
      operationId: doGroupsGet
      parameters:
        - name: group
          in: query
          type: string
          description: >-
            Retrieve the group with the provided group label. Can be
            repeated to select multiple groups.
        - name: tag
          in: query
          type: string
          description: >-
            Retrieve all groups associated with the given free-form tag from
            the tags field.
      responses:
        "200":
          description: >-
            Groups array containing all existing group objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Group.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - Group
      summary: Create a new group
      description: >-
        Create a new group identified by the group_label field.
        Label should be given explicitly, and should not conflict with
        any existing group, or an error will occur.


        Note that if the exclusiveGroup field is present, the group is not allowed to add
        a member that exists under a different group/label where the exclusiveGroup
        field is the same. This can be used to create groups of groups
        where a component may only be present in one of the set.
      operationId: doGroupsPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Group.1.0.0'
      responses:
        "201":
          description: >-
            Success, returns array containing the created resource URI.
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceURI.1.0.0'
          examples:
            application/json:
              - uri: /hsm/v2/groups/mygrouplabel
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /groups/{group_label}:
    get:
      tags:
        - Group
      summary: Retrieve existing group {group_label}
      description: >-
        Retrieve the group which was created with the given {group_label}.
      operationId: doGroupGet
      parameters:
        - name: group_label
          in: path
          type: string
          description: Label name of the group to return.
          required: true
        - name: partition
          in: query
          type: string
          description: >-
            AND the members set by the given partition name (p#.#).  NULL will
            return the group members not in ANY partition.
      responses:
        "200":
          description: Group entry identified by {group_label}, if it exists.
          schema:
            $ref: '#/definitions/Group.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - Group
      summary: Delete existing group with {group_label}
      description: >-
        Delete the given group with {group_label}. Any members previously in
        the group will no longer have the deleted group label associated with
        them.
      operationId: doGroupDelete
      parameters:
        - name: group_label
          in: path
          type: string
          description: Label (i.e. name) of the group to delete.
          required: true
      responses:
        "200":
          description: Zero (success) error code - component is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - No group matches label.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    patch:
      tags:
        - Group
      summary: Update metadata for existing group {group_label}
      description: >-
        To update the tags array and/or description, a PATCH operation can
        be used.  Omitted fields are not updated. This cannot be
        used to completely replace the members list. Rather, individual
        members can be removed or added with the POST/DELETE
        {group_label}/members API below.
      operationId: doGroupPatch
      parameters:
        - name: group_label
          in: path
          type: string
          description: >-
            Label (i.e. name) of the group to update.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Group.1.0.0_Patch'
      responses:
        "204":
          description: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: The group with this label did not exist.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /groups/labels:
    get:
      tags:
        - Group
      summary: >-
        Retrieve all existing group labels
      description: >-
        Retrieve a string array of all group labels (i.e. group names) that
        currently exist in HSM.
      operationId: doGroupLabelsGet
      responses:
        "200":
          description: >-
            Array of group labels which form the names of all existing groups,
            or an empty array if none currently exist.
          schema:
            type: array
            items:
              type: string
          examples:
            application/json:
              - blue
              - green
              - red
              - compute_a
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ##########################################################################
  # Group Members
  ##########################################################################
  /groups/{group_label}/members:
    get:
      tags:
        - Group
      summary: >-
        Retrieve all members of existing group
      description: >-
        Retrieve members of an existing group {group_label}, optionally
        filtering the set, returning a members set containing the component
        xname IDs.
      operationId: doGroupMembersGet
      parameters:
        - name: group_label
          in: path
          type: string
          required: true
          description: >-
            Specifies an existing group {group_label} to query the members of.
        - name: partition
          in: query
          type: string
          description: >-
            AND the members set by the given partition name (p#.#).  NULL will
            return the group members not in ANY partition.
      responses:
        "200":
          description: >-
            Members set including component xname IDs which are members
            of group {group_label}.  If none exist, an empty array with be
            returned.
          schema:
            $ref: '#/definitions/Members.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does not exist - No such group {group_label}
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - Group
      summary: Create new member of existing group (via POST)
      description: >-
        Create a new member of group {group_label} with the component
        xname ID provided in the payload.
        New member should not already exist in the given group.
      operationId: doGroupMembersPost
      parameters:
        - name: group_label
          in: path
          type: string
          required: true
          description: >-
            Specifies an existing group {group_label} to add the new member to.
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/MemberID'
      responses:
        "201":
          description: >-
            Success, returns array containing the created member URI.
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceURI.1.0.0'
          examples:
            application/json:
              - uri: /hsm/v2/groups/mygrouplabel/members/x0c0s1b0n0
        "400":
          description: Bad Request - e.g. malformed string
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does not exist - No such group {group_label}
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /groups/{group_label}/members/{xname_id}:
    delete:
      tags:
        - Group
      summary: >-
        Delete member from existing group
      description: >-
        Delete component {xname_id} from the members of group {group_label}.
      operationId: doGroupMemberDelete
      parameters:
        - name: group_label
          in: path
          type: string
          required: true
          description: >-
            Specifies an existing group {group_label} to remove the member from.
        - name: xname_id
          in: path
          type: string
          required: true
          description: >-
            Member of {group_label} to remove.
      responses:
        "200":
          description: >-
            Zero (success) error code - entry deleted.
            Message contains count of deleted items (should always be one).
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request, malformed group label or component xname_id
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - no such member or group.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # Partition API Calls
  #
  ########################################################################
  /partitions:
    get:
      tags:
        - Partition
      summary: >-
        Retrieve all existing partitions
      description: >-
        Retrieve all partitions that currently exist, optionally filtering
        the set, returning an array of partition records.
      operationId: doPartitionsGet
      parameters:
        - name: partition
          in: query
          type: string
          description: >-
            Retrieve the partition with the provided partition name (p#.#). Can be
            repeated to select multiple partitions.
        - name: tag
          in: query
          type: string
          description: >-
            Retrieve all partitions associated with the given free-form tag
            from the tags field.
      responses:
        "200":
          description: >-
            Array containing all existing partition objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Partition.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - Partition
      summary: Create new partition (via POST)
      description: >-
        Create a new partition identified by the partition_name field. Partition
        names should be of the format p# or p#.# (hard_part.soft_part).
        Partition name should be given explicitly, and should not conflict with
        any existing partition, or an error will occur.  In addition, the
        member list must not overlap with any existing partition.
      operationId: doPartitionsPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Partition.1.0.0'
      responses:
        "201":
          description: >-
            Success, returns array containing the created resource URI.
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceURI.1.0.0'
          examples:
            application/json:
              - uri: /hsm/v2/partitions/p1
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /partitions/{partition_name}:
    get:
      tags:
        - Partition
      summary: Retrieve existing partition {partition_name}
      description: >-
        Retrieve the partition which was created with the given
        {partition_name}.
      operationId: doPartitionGet
      parameters:
        - name: partition_name
          in: path
          type: string
          description: Partition name to be retrieved
          required: true
      responses:
        "200":
          description:
            Partition entry identified by {partition_name}, if it exists.
          schema:
            $ref: '#/definitions/Partition.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - Partition
      summary: Delete existing partition with {partition_name}
      description: >-
        Delete partition {partition_name}. Any members previously in the
        partition will no longer have the deleted partition name associated
        with them.
      operationId: doPartitionDelete
      parameters:
        - name: partition_name
          in: path
          type: string
          description: Partition name of the partition to delete.
          required: true
      responses:
        "200":
          description: Zero (success) error code - component is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - No partition matches partition_name.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    patch:
      tags:
        - Partition
      summary: Update metadata for existing partition {partition_name}
      description: >-
        Update the tags array and/or description by using PATCH.
        Omitted fields are not updated. This cannot be used
        to completely replace the members list. Rather, individual members
        can be removed or added with the POST/DELETE {partition_name}/members
        API.
      operationId: doPartitionPatch
      parameters:
        - name: partition_name
          in: path
          type: string
          description: >-
            Name of the partition to update.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Partition.1.0.0_Patch'
      responses:
        "204":
          description: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: The partition with this partition_name did not exist.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /partitions/names:
    get:
      tags:
        - Partition
      summary: >-
        Retrieve all existing partition names
      description: >-
        Retrieve a string array of all partition names that currently exist in HSM.
        These are just the names, not the complete partition records.
      operationId: doPartitionNamesGet
      responses:
        "200":
          description: >-
            Array of partition names comprising all partitions known to HSM
            at the present time, or an empty array if none currently exist.
          schema:
            type: array
            items:
              type: string
          examples:
            application/json:
              - p1
              - p2
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ##########################################################################
  # Partition Members
  ##########################################################################
  /partitions/{partition_name}/members:
    get:
      tags:
        - Partition
      summary: >-
        Retrieve all members of existing partition
      description: >-
        Retrieve all members of existing partition {partition_name}, optionally
        filtering the set, returning a members set that includes the component
        xname IDs.
      operationId: doPartitionMembersGet
      parameters:
        - name: partition_name
          in: path
          type: string
          required: true
          description: >-
            Existing partition {partition_name} to query the members of.
      responses:
        "200":
          description: >-
            Members set including component xname IDs which are members
            of partition {partition_name}.  If none exist, an empty array will
            be returned.
          schema:
            $ref: '#/definitions/Members.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does not exist - No such partition {partition_name}
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - Partition
      summary: Create new member of existing partition (via POST)
      description: >-
        Create a new member of partition {partition_name} with the component
        xname ID provided in the payload.
        New member should not already exist in the given partition
      operationId: doPartitionMembersPost
      parameters:
        - name: partition_name
          in: path
          type: string
          required: true
          description: >-
            Existing partition {partition_name} to add the new member to.
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/MemberID'
      responses:
        "201":
          description: >-
            Success, returns array containing the created member URI.
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceURI.1.0.0'
          examples:
            application/json:
              - uri: /hsm/v2/partitions/p1/members/x0c0s1b0n0
        "400":
          description: Bad Request - Bad partition_name or malformed string?
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does not exist - No such partition {partition_name}
          schema:
            $ref: '#/definitions/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /partitions/{partition_name}/members/{xname_id}:
    delete:
      tags:
        - Partition
      summary: >-
        Delete member from existing partition
      description: >-
        Delete component {xname_id} from the members of partition
        {partition_name}.
      operationId: doPartitionMemberDelete
      parameters:
        - name: partition_name
          in: path
          type: string
          required: true
          description: >-
            Existing partition {partition_name} to remove the member from.
        - name: xname_id
          in: path
          type: string
          required: true
          description: >-
            Member of {partition_name} to remove.
      responses:
        "200":
          description: >-
            Zero (success) error code - entry deleted.
            Message contains count of deleted items (should always be one).
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request, malformed partition_name or xname_id
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - no such member or partition.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # Memberships (of Groups and Partitions) API Calls
  #
  ########################################################################
  /memberships:
    get:
      tags:
        - Membership
      summary: >-
        Retrieve all memberships for components
      description: >-
        Display group labels and partition names for each component xname ID
        (where applicable).
      operationId: doMembershipsGet
      parameters:
        - $ref: '#/parameters/compIDParam'
        - $ref: '#/parameters/compTypeParam'
        - $ref: '#/parameters/compStateParam'
        - $ref: '#/parameters/compFlagParam'
        - $ref: '#/parameters/compRoleParam'
        - $ref: '#/parameters/compSubroleParam'
        - $ref: '#/parameters/compEnabledParam'
        - $ref: '#/parameters/compSoftwareStatusParam'
        - $ref: '#/parameters/compSubtypeParam'
        - $ref: '#/parameters/compArchParam'
        - $ref: '#/parameters/compClassParam'
        - $ref: '#/parameters/compNIDParam'
        - $ref: '#/parameters/compNIDStartParam'
        - $ref: '#/parameters/compNIDEndParam'
        - $ref: '#/parameters/compPartitionParam'
        - $ref: '#/parameters/compGroupParam'
      responses:
        "200":
          description: >-
            Array containing component xname IDs to their group and
            partition memberships.
          schema:
            type: array
            items:
              $ref: '#/definitions/Membership.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /memberships/{xname}:
    get:
      tags:
        - Membership
      summary: >-
        Retrieve membership for component {xname}
      description: >-
        Display group labels and partition names for a given component xname ID.
      operationId: doMembershipGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Component xname ID (i.e. locational identifier)
          required: true
      responses:
        "200":
          description: >-
            Membership info for component at {xname}
          schema:
            $ref: '#/definitions/Membership.1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Not Found - no such xname.
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  ########################################################################
  #
  # Power Maps - Component to power supply mapping.
  #
  ########################################################################
  /sysinfo/powermaps:
    get:
      tags:
        - PowerMap
      summary: >-
        Retrieve all PowerMaps, returning PowerMapArray
      description: >-
        Retrieve all power map entries as a named array, or an empty array if the
        collection is empty.
      operationId: doPowerMapsGet
      responses:
        "200":
          description: >-
            Named PowerMaps array.
          schema:
            $ref: '#/definitions/PowerMapArray_PowerMapArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    post:
      tags:
        - PowerMap
      summary: Create or Modify PowerMaps
      description: >-
        Create or update the given set of PowerMaps whose ID fields are each a
        valid xname. The poweredBy field is required.
      operationId: doPowerMapsPost
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PowerMapArray_PowerMapArray'
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries created or
            updated.  Message contains count of new/modified items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - PowerMap
        - cli_ignore
      summary: >-
        Delete all PowerMap entities
      description: >-
        Delete all entries in the PowerMaps collection.
      operationId: doPowerMapsDeleteAll
      responses:
        "200":
          description: >-
            Zero (success) error code - one or more entries deleted.
            Message contains count of deleted items.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
  /sysinfo/powermaps/{xname}:
    get:
      tags:
        - PowerMap
      summary: Retrieve PowerMap at {xname}
      description: >-
        Retrieve PowerMap for a component located at physical location {xname}.
      operationId: doPowerMapGet
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of PowerMap record to return.
          required: true
      responses:
        "200":
          description: PowerMap entry matching xname/ID
          schema:
            $ref: '#/definitions/PowerMap.1.0.0_PowerMap'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: Does Not Exist
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    delete:
      tags:
        - PowerMap
      summary: Delete PowerMap with ID {xname}
      description: >-
        Delete PowerMap entry for a specific component {xname}.
      operationId: doPowerMapDelete
      parameters:
        - name: xname
          in: path
          type: string
          description: Locational xname of PowerMap record to delete.
          required: true
      responses:
        "200":
          description: Zero (success) error code - PowerMap is deleted.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
    put:
      tags:
        - PowerMap
      summary: Update definition for PowerMap ID {xname}
      description: >-
        Update or create an entry for an individual component xname using PUT.
        If the PUT operation contains an xname that already exists, the entry
        will be overwritten with the new entry.
      operationId: doPowerMapPut
      parameters:
        - name: xname
          in: path
          type: string
          description: >-
            Locational xname of PowerMap record to create or update.
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PowerMap.1.0.0_PowerMap'
      responses:
        "200":
          description: Zero (success) error code - PowerMap was created/updated.
          schema:
            $ref: '#/definitions/Response_1.0.0'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Problem7807'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Problem7807'
definitions:
  ##########################################################################
  #
  # State Component data structures
  #
  ##########################################################################
  Component.1.0.0_Component:
    description: >-
      This is the logical representation of a component for which state is
      tracked and includes other variables that may be needed by clients.
      It is keyed by the physical location i.e. xname.
    properties:
      ID:
        # Uniquely identifies the component by its physical location (xname)
        $ref: '#/definitions/XName.1.0.0'
      Type:
        # HMS Logical component type e.g. Node, Cabinet, etc.
        $ref: '#/definitions/HMSType.1.0.0'
      State:
        # Logical component state e.g. On, Off, Ready.
        $ref: '#/definitions/HMSState.1.0.0'
      Flag:
        # Logical component state flag e.g. OK, Alert.
        $ref: '#/definitions/HMSFlag.1.0.0'
      Enabled:
        description: >-
          Whether component is enabled. True when enabled, false when disabled.
        type: boolean
      SoftwareStatus:
        description: >-
          SoftwareStatus of a node, used by the managed plane for running
          nodes.  Will be missing for other component types or if
          not set by software.
        type: string
      Role:
        # Component/node role currently assigned if not default.
        $ref: '#/definitions/HMSRole.1.0.0'
      SubRole:
        # Component/node subrole currently assigned if not default.
        $ref: '#/definitions/HMSSubRole.1.0.0'
      NID:
        description: This is the integer Node ID if the component is a node.
        type: integer
        example: 1
      Subtype:
        description: Further distinguishes between components of same type.
        type: string
        readOnly: true
      NetType:
        # Type of network for HSN, if applicable and present.
        $ref: '#/definitions/NetType.1.0.0'
      Arch:
        # Architecture type e.g. X86 or ARM.
        $ref: '#/definitions/HMSArch.1.0.0'
      Class:
        # Hardware class e.g. River or Mountain.
        $ref: '#/definitions/HMSClass.1.0.0'
      ReservationDisabled:
        description: >-
          Whether component can be reserved via the locking API.
          True when reservations are disabled, thus no new
          reservations can be created on this component.
        type: boolean
        example: false
        readOnly: true
      Locked:
        description: >-
          Whether a component is locked via the locking API.
        type: boolean
        example: false
        readOnly: true
    type: object
  Component.1.0.0_ComponentCreate:
    description: >-
      This is the logical representation of a component for which state is
      tracked and includes other variables that may be needed by clients.
      It is keyed by the physical location i.e. xname.
    properties:
      ID:
        # Uniquely identifies the component by its physical location (xname)
        $ref: '#/definitions/XNameRW.1.0.0'
      State:
        # Logical component state e.g. On, Off, Ready.
        $ref: '#/definitions/HMSState.1.0.0'
      Flag:
        # Logical component state flag e.g. OK, Alert.
        $ref: '#/definitions/HMSFlag.1.0.0'
      Enabled:
        description: >-
          Whether component is enabled. True when enabled, false when disabled.
        type: boolean
      SoftwareStatus:
        description: >-
          SoftwareStatus of a node, used by the managed plane for running
          nodes.  Will be missing for other component types or if
          not set by software.
        type: string
      Role:
        # Component/node role currently assigned if not default.
        $ref: '#/definitions/HMSRole.1.0.0'
      SubRole:
        # Component/node subrole currently assigned if not default.
        $ref: '#/definitions/HMSSubRole.1.0.0'
      NID:
        description: This is the integer Node ID if the component is a node.
        type: integer
        example: 1
      Subtype:
        description: Further distinguishes between components of same type.
        type: string
      NetType:
        # Type of network for HSN, if applicable and present.
        $ref: '#/definitions/NetType.1.0.0'
      Arch:
        # Architecture type e.g. X86 or ARM.
        $ref: '#/definitions/HMSArch.1.0.0'
      Class:
        # Hardware class e.g. River or Mountain.
        $ref: '#/definitions/HMSClass.1.0.0'
    type: object
    required:
      - ID
      - State
  Component.1.0.0_Put:
    description: >-
      This is the payload of a state components URI put operation on a
      component.
    properties:
      Component:
        $ref: '#/definitions/Component.1.0.0_ComponentCreate'
      Force:
        description: >-
          If true, 'force' causes this operation to overwrite the 'State',
          'Flag', 'Subtype', 'NetType', and 'Arch' fields for the specified
          component if it already exists. Otherwise, nothing will be
          overwritten.
        type: boolean
    type: object
    required:
      - Component
  #
  # Component Patch operation payloads.  Modify only selected fields
  # given the corresponding API that is used to patch.
  #
  Component.1.0.0_Patch.StateData:
    description: >-
      This is the payload of a StateData URI patch operation on a component.
      Flag ID optional and will be reset to OK if no Flag value is given.
    properties:
      State:
        # Logical component state e.g. On, Off, Ready.
        $ref: '#/definitions/HMSState.1.0.0'
      Flag:
        # Logical component state flag e.g. OK, Alert.
        $ref: '#/definitions/HMSFlag.1.0.0'
      Force:
        description: >-
          If the state change is normally prohibited, due to the current
          and new states, force the change anyways.  Default is false.
        type: boolean
        example: false
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    type: object
    required:
      - State
  Component.1.0.0_Patch.FlagOnly:
    description: >-
      This is the payload of a FlagOnly patch operation on a component.
      Flag is required and the State field is unmodified regardless of the
      value given.
    properties:
      Flag:
        # Logical component state flag e.g. OK, Alert.
        $ref: '#/definitions/HMSFlag.1.0.0'
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    type: object
    required:
      - Flag
  Component.1.0.0_Patch.Enabled:
    description: >-
      This is the payload of a Enabled patch operation on a Component.
      Enabled is required, and is a boolean field with true representing
      enabled and false disabled.
    properties:
      Enabled:
        description: Component Enabled(true)/Disabled(false) flag
        type: boolean
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    type: object
    required:
      - Enabled
  Component.1.0.0_Patch.SoftwareStatus:
    description: >-
      This is the payload of a SoftwareStatus patch operation on a Component.
    properties:
      SoftwareStatus:
        description: >-
          Component/node software status field, reserved for managed plane.
        type: string
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    type: object
  Component.1.0.0_Patch.Role:
    description: >-
      This is the payload of a Role patch operation on a Component.
      Role is required, however operation will fail if Role is not
      a supported property of the corresponding HMS type.
    properties:
      Role:
        # Component/node role currently assigned if not default.
        $ref: '#/definitions/HMSRole.1.0.0'
      SubRole:
        # Component/node subrole currently assigned if not default.
        $ref: '#/definitions/HMSSubRole.1.0.0'
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    type: object
    required:
      - Role
  Component.1.0.0_Patch.NID:
    description: >-
      This is the payload of a NID patch operation on a Component.
      NID is required but the operation will fail if NID is not a valid
    properties:
      NID:
        description: This is the integer Node ID if the component is a node.
        type: integer
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    type: object
    required:
      - NID
  #
  # Component Patch payloads - Bulk operations with ComponentArray
  #
  Component.1.0.0_PatchArrayItem.NID:
    description: >-
      This is one entry in a NID patch operation on an entire
      ComponentArray.  ID and NID are required or the operation will fail.
      Only the NID field is updated, and then only if it is appropriate
      for the corresponding HMS type of the entry (e.g. node).
    properties:
      ID:
        $ref: '#/definitions/XNameForQuery.1.0.0'
      Type:
        $ref: '#/definitions/HMSType.1.0.0'
      NID:
        description: This is the integer Node ID if the component is a node.
        type: integer
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    required:
      - ID
      - NID
    type: object
  Component.1.0.0_ResourceURICollection:
    properties:
      Name:
        description: >-
          Should describe the collection, though the type of resources
          the links correspond to should also be inferred from the context
          in which the collection was obtained.
        type: string
        readOnly: true
        example: (Type of Object) Collection
      Members:
        description: An array of ResourceIds.
        items:
          $ref: '#/definitions/ResourceURI.1.0.0'
        type: array
        readOnly: true
      MemberCount:
        description: Number of ResourceURIs in the collection
        type: number
        format: int32
        readOnly: true
    type: object
  ComponentByNID.1.0.0_ResourceURICollection:
    properties:
      Name:
        description: >-
          Should describe the collection, though the type of resources
          the links correspond to should also be inferred from the context
          in which the collection was obtained.
        type: string
        readOnly: true
        example: (Type of Object) Collection
      Members:
        description: An array of ResourceIds.
        items:
          $ref: '#/definitions/ResourceURI.1.0.0'
        type: array
        readOnly: true
      MemberCount:
        description: Number of ResourceURIs in the collection
        type: number
        format: int32
        readOnly: true
    type: object
  #
  # ComponentArray
  #
  ComponentArray_ComponentArray:
    description: >-
      This is a collection of Component objects returned whenever a query
      is expected to result in 0 to n matches.
    properties:
      Components:
        description: Contains the HMS component objects in the array.
        items:
          $ref: '#/definitions/Component.1.0.0_Component'
        type: array
    type: object
  ComponentArray_PostArray:
    description: >-
      This is a component post request. Contains the new component fields to
      apply.
    properties:
      Components:
        description: >-
          Contains the HMS component objects in the array.
        items:
          $ref: '#/definitions/Component.1.0.0_ComponentCreate'
        type: array
      Force:
        description: >-
          If true, 'force' causes this operation to overwrite the 'State',
          'Flag', 'Subtype', 'NetType', and 'Arch' fields for the specified
          component if it already exists. Otherwise, nothing will be
          overwritten.
        type: boolean
    required:
      - Components
    type: object
  ComponentArray_PatchArray.StateData:
    description: >-
      This is a component state data patch request. Contains the new state
      to apply, new flag to apply (optional), and a list of component xnames
      for update. If the component flag is omitted, the flag will be reset
      to 'ok'.
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to update.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      State:
        description: >-
          The new state to apply.
        # Logical component state e.g. On, Off, Ready.
        $ref: '#/definitions/HMSState.1.0.0'
      Flag:
        description: >-
          The new flag to apply. If omitted, the component flag reset to 'ok'.
        # Logical component state flag e.g. OK, Alert.
        $ref: '#/definitions/HMSFlag.1.0.0'
      Force:
        description: >-
          If the state change is normally prohibited, due to the current
          and new states, force the change anyways.  Default is false.
        type: boolean
        example: false
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    required:
      - ComponentIDs
      - State
    type: object
  ComponentArray_PatchArray.FlagOnly:
    description: >-
      This is a component flag value patch request. Contains the new flag
      to apply and a list of component xnames for update.
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to update.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      Flag:
        description: >-
          The new flag to apply.
        # Logical component state flag e.g. OK, Alert.
        $ref: '#/definitions/HMSFlag.1.0.0'
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    required:
      - ComponentIDs
      - Flag
    type: object
  ComponentArray_PatchArray.Enabled:
    description: >-
      This is a component Enabled field patch request. Contains the new value
      of enabled to apply and the list of component xnames to update.
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to update.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      Enabled:
        description: >-
          Whether component is enabled. True when enabled, false when disabled.
        type: boolean
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    required:
      - ComponentIDs
      - Enabled
    type: object
  ComponentArray_PatchArray.SoftwareStatus:
    description: >-
      This is a component SoftwareStatus field patch request. Contains a new,
      single value of SoftwareStatus to apply, and the list of component xnames
      to update.
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to update.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      SoftwareStatus:
        description: >-
          SoftwareStatus of the node, used by the managed plane for running
          nodes.
        type: string
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    required:
      - ComponentIDs
      - SoftwareStatus
    type: object
  ComponentArray_PatchArray.Role:
    description: >-
      This is a component Role value patch request. Contains the new Role
      to apply and a list of component xnames for update.
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to update.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      Role:
        description: >-
          The new Role to apply.
        $ref: '#/definitions/HMSRole.1.0.0'
      SubRole:
        description: >-
          The new SubRole to apply.
        $ref: '#/definitions/HMSSubRole.1.0.0'
      ExtendedInfo:
        # This is the message that should explain what triggered the change.
        # it is optional and may be omitted.
        $ref: '#/definitions/Message_1.0.0_ExtendedInfo'
    required:
      - ComponentIDs
      - Role
    type: object
  ComponentArray_PatchArray.NID:
    description: >-
      This is a collection of Component objects with just the ID and
      NID fields populated.
    properties:
      Name:
        description: Descriptive name e.g. why it was generated.
        readOnly: true
        type: string
      Components:
        description: >-
          Contains the component objects in the array but with just the
          Component ID and the patchable fields for a NID patch
          operation filled in.  Other Component fields are not undated
          during these operations.
        items:
          $ref: '#/definitions/Component.1.0.0_PatchArrayItem.NID'
        type: array
    type: object
  #
  # Query POSTs to supply arbitrary list of components.
  #
  ComponentArray_PostQuery:
    description: >-
      There are limits to the length of an HTTP URL and query string.
      Hence, if we wish to query an arbitrary list of XName/IDs, it
      will need to be in the body of the request.  This object is
      used for this purpose.  It is similar to the analogous GET operation.
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to query.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      partition:
        description: >-
          Partition name to filter on, as per current /partitions/names
        type: string
        example: p1
      group:
        description: >-
          Group label to filter on, as per current /groups/labels
        type: string
        example: group_label
      stateonly:
        description: >-
          Return only component state and flag fields (plus xname/ID and
          type).  Results can be modified and used for bulk state/flag-
          only patch operations.
        type: boolean
      flagonly:
        description: >-
          Return only component flag field (plus xname/ID and type).
          Results can be modified and used for bulk flag-only patch
          operations.
        type: boolean
      roleonly:
        description: >-
          Return only component role and subrole fields (plus xname/ID and type).
          Results can be modified and used for bulk role-only patches.
        type: boolean
      nidonly:
        description: >-
          Return only component NID field (plus xname/ID and type).
          Results can be modified and used for bulk NID-only patches.
        type: boolean
      type:
        description: >-
          Retrieve all components with the given HMS type.
        items:
          type: string
        type: array
      state:
        description: >-
          Retrieve all components with the given HMS state.
        items:
          type: string
        type: array
      flag:
        description: >-
          Retrieve all components with the given HMS flag value.
        items:
          type: string
        type: array
      enabled:
        description: >-
          Retrieve all components with the given enabled status (true or false).
        items:
          type: string
        type: array
      softwarestatus:
        description: >-
          Retrieve all components with the given software status.
          Software status is a free form string. Matching is case-insensitive.
        items:
          type: string
        type: array
      role:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS role
        items:
          type: string
        type: array
      subrole:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS subrole
        items:
          type: string
        type: array
      subtype:
        description: >-
          Retrieve all components with the given HMS subtype.
        items:
          type: string
        type: array
      arch:
        description: >-
          Retrieve all components with the given architecture.
        items:
          type: string
        type: array
      class:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS hardware class. Class can be
          River, Mountain, etc.
        items:
          type: string
        type: array
      nid:
        description: >-
          Retrieve all components (i.e. one node) with the given integer NID
        items:
          type: string
        type: array
      nid_start:
        description: >-
          Retrieve all components (i.e. nodes) with NIDs equal to or greater
          than the provided integer.
        items:
          type: string
        type: array
      nid_end:
        description: >-
          Retrieve all components (i.e. nodes) with NIDs less than or equal
          to the provided integer.
        items:
          type: string
        type: array
    type: object
  ComponentArray_PostByNIDQuery:
    description: >-
      There are limits to the length of an HTTP URL and query string.
      Hence, if we wish to query an arbitrary list of NIDs, it
      will need to be in the body of the request.  This object is
      used for this purpose.  Parameters are similar to the analogous GET
      operation.
    properties:
      # NIDs:
      #   description: >-
      #     NID values to query, producing a ComponentArray with the matching
      #     components.
      #   items:
      #     type: integer
      #     format: int32
      #   type: array
      NIDRanges:
        description: >-
          NID range values to query, producing a ComponentArray with the
          matching components, e.g. "0-24" or "2".  Add each multiple ranges
          as a separate array item.
        items:
          $ref: '#/definitions/NIDRange.1.0.0'
        type: array
      partition:
        $ref: '#/definitions/XNamePartition.1.0.0'
      stateonly:
        description: >-
          Return only component state and flag fields (plus xname/ID and
          type).  Results can be modified and used for bulk state/flag-
          only patch operations.
        type: boolean
      flagonly:
        description: >-
          Return only component flag field (plus xname/ID and type).
          Results can be modified and used for bulk flag-only patch
          operations.
        type: boolean
      roleonly:
        description: >-
          Return only component role and subrole fields (plus xname/ID and type).
          Results can be modified and used for bulk role-only patches.
        type: boolean
      nidonly:
        description: >-
          Return only component NID field (plus xname/ID and type).
          Results can be modified and used for bulk NID-only patches.
        type: boolean
    required:
      - NIDRanges
    type: object
  ##########################################################################
  #
  # Node Map structures - Default xname->NID/Role/etc. mappings.
  #
  ##########################################################################
  NodeMap.1.0.0_NodeMap:
    description: >-
      NodeMaps are a way of pre-populating state manager with a set of
      valid node xnames (currently populated, or just potentially populated)
      and assigning each a default NID (and optionally also a Role and SubRole).
      NID is required and must be unique within the NodeMaps.

      When components are first discovered, if a matching NodeMap entry is
      found, that NID will be used to create the component entry.  This
      allows NIDs to be defined in advance in an orderly way that allows
      NID ranges to be consecutive on the set of xnames that is actually
      used for a particular hardware config.  The default NIDs used
      if no NodeMap is present are based on enumerating NIDs for ALL
      POSSIBLE xnames, even though in practice only a small subset will
      be used for any particular hardware config (resulting in very sparse
      assignments).  NodeMaps, then, help avoid this.

      Updating NodeMaps for already discovered components (unless they are
      deleted and then rediscovered) will not automatically update the NID
      field in States/Components.  Likewise using a patch to update NID
      on a particular entry in States/Components will not automatically
      define or update a NodeMap entry.
    properties:
      ID:
        # Uniquely identifies a node by its physical location (xname)
        $ref: '#/definitions/XName.1.0.0'
      NID:
        description: Positive default Node ID (NID) for the xname in ID
        type: integer
        example: 1
      Role:
        # Component/node role currently assigned if not default.
        $ref: '#/definitions/HMSRole.1.0.0'
      SubRole:
        # Component/node subrole currently assigned if not default.
        $ref: '#/definitions/HMSSubRole.1.0.0'
    required:
      - NID
    type: object
  NodeMap.1.0.0_PostNodeMap:
    description: >-
      NodeMaps are a way of pre-populating state manager with a set of
      valid node xnames (currently populated, or just potentially populated)
      and assigning each a default NID (and optionally also a Role and SubRole).
      NID is required and must be unique within the NodeMaps.

      When components are first discovered, if a matching NodeMap entry is
      found, that NID will be used to create the component entry.  This
      allows NIDs to be defined in advance in an orderly way that allows
      NID ranges to be consecutive on the set of xnames that is actually
      used for a particular hardware config.  The default NIDs used
      if no NodeMap is present are based on enumerating NIDs for ALL
      POSSIBLE xnames, even though in practice only a small subset will
      be used for any particular hardware config (resulting in very sparse
      assignments).  NodeMaps, then, help avoid this.

      Updating NodeMaps for already discovered components (unless they are
      deleted and then rediscovered) will not automatically update the NID
      field in States/Components.  Likewise using a patch to update NID
      on a particular entry in States/Components will not automatically
      define or update a NodeMap entry.
    properties:
      ID:
        # Uniquely identifies a node by its physical location (xname)
        $ref: '#/definitions/XNameForQuery.1.0.0'
      NID:
        description: Positive default Node ID (NID) for the xname in ID
        type: integer
        example: 1
      Role:
        # Component/node role currently assigned if not default.
        $ref: '#/definitions/HMSRole.1.0.0'
      SubRole:
        # Component/node subrole currently assigned if not default.
        $ref: '#/definitions/HMSSubRole.1.0.0'
    required:
      - ID
      - NID
    type: object
  NodeMapArray_NodeMapArray:
    description: >-
      This is a named array of NodeMap objects. This is the result of
      GET-ing the NodeMaps collection, or can be used to populate or
      update it as input provided via POST.
    properties:
      NodeMaps:
        description: Contains the NodeMap objects in the array.
        items:
          $ref: '#/definitions/NodeMap.1.0.0_PostNodeMap'
        type: array
    type: object
  #########################################################################
  #
  # Redfish ComponentEndpoint data - Represents Redfish discovered data for
  #                                  components running under a particular
  #                                  Redfish endpoint, needed for services
  #                                  that interact with these at via Redfish.
  #
  #########################################################################
  ComponentEndpoint.1.0.0_ComponentEndpoint:
    description: >-
      This describes a child component of a Redfish endpoint and is populated
      when Redfish endpoint discovery occurs.  It is used by services that
      need to interact directly with the component via Redfish.
      It represents a physical component of something and has a corresponding
      representation as an HMS Component, hence the name.
      There are also ServiceEndpoints which represent Redfish services that
      are discovered when the RedfishEndpoint is discovered.

      NOTE: These records are discovered, not created, and therefore are not
      writable (since any changes would be overwritten by a subsequent
      discovery).

      Additional info is appended depending on RedfishType (discriminator)
    properties:
      ID:
        # Uniquely identifies the component endpoint by its location i.e. xname.
        $ref: '#/definitions/XName.1.0.0'
      Type:
        # HMS Logical component type e.g. Node, Cabinet, etc.
        $ref: '#/definitions/HMSType.1.0.0'
      Domain:
        description: Domain of component FQDN.  Hostname is always ID/xname
        type: string
        example: mgmt.example.domain.com
      FQDN:
        description: >-
          Fully-qualified domain name of component on management network if
          for example the component is a node.
        type: string
        example: x0c0s0b0n0.mgmt.example.domain.com
      RedfishType:
        # This is the Redfish object type, not to be confused with the HMS
        # component type.  In this case, either a Manager, Chassis or
        # ComputerSystem.
        $ref: '#/definitions/RedfishType.1.0.0'
      RedfishSubtype:
        # This is the type corresponding to the Redfish object type, i.e. the
        # ChassisType field, SystemType, ManagerType fields.
        $ref: '#/definitions/RedfishSubtype.1.0.0'
      Enabled:
        description: >-
          To disable a component without deleting its data from the database,
          can be set to false
        type: boolean
        example: true
      ComponentEndpointType:
        description: >-
          This is used as a discriminator to determine the additional RF-type-
          specific data that is kept for a ComponentEndpoint.
        enum:
          - ComponentEndpointChassis
          - ComponentEndpointComputerSystem
          - ComponentEndpointManager
          - ComponentEndpointPowerDistribution
          - ComponentEndpointOutlet
        type: string
        example: ComponentEndpointComputerSystem
      MACAddr:
        description: >-
          If the component e.g. a ComputerSystem/Node has a MAC on the
          management network, i.e. corresponding to the FQDN field's
          Ethernet interface, this field will be present.  Not the HSN
          MAC.  Represented as the standard colon-separated 6 byte hex string.
        pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
        type: string
        example: ae:12:ce:7a:aa:99
      UUID:
        $ref: '#/definitions/UUID.1.0.0'
      OdataID:
        # This is the relative path to the component relative to the parent
        # RedfishEndpoint's service root.
        $ref: '#/definitions/OdataID.1.0.0'
      RedfishEndpointID:
        # Unique identifier for the parent RedfishEndpoint by its location
        # i.e. xname.  This is essentially a back-reference to the RF endpoint
        # that was used to discover this component.
        $ref: '#/definitions/XNameRFEndpoint.1.0.0'
      RedfishEndpointFQDN:
        description: >-
          This is a back-reference to the fully-qualified domain name of the
          parent Redfish endpoint that was used to discover the component.  It
          is the RedfishEndpointID field i.e. the hostname/xname plus its
          current domain.
        type: string
        readOnly: true
        example: x0c0s0b0.mgmt.example.domain.com
      RedfishURL:
        description: >-
          Complete URL to the corresponding Redfish object,
          combining the RedfishEndpoint's FQDN and the OdataID.
        type: string
        readOnly: true
        example:
          x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems/System.Embedded.1
    type: object
    discriminator: ComponentEndpointType
    required:
      - ComponentEndpointType
  ComponentEndpointChassis:
    description: >-
      This is a subtype of ComponentEndpoint for Chassis RF components,
      i.e. of most HMS components other than nodes and BMCs.
      This subtype is used when the ComponentEndpoint's ComponentEndpointType
      is 'ComponentEndpointChassis' via the 'discriminator:
      ComponentEndpointType' property.
    allOf:
      - $ref: '#/definitions/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishChassisInfo:
            $ref: '#/definitions/ComponentEndpoint.1.0.0_RedfishChassisInfo'
    type: object
  ComponentEndpointComputerSystem:
    description: >-
      This is a subtype of ComponentEndpoint for ComputerSystem RF components,
      i.e. a node HMS type.
      This subtype is used when the ComponentEndpoint's ComponentEndpointType
      is 'ComponentEndpointComputerSystem' via the 'discriminator:
      ComponentEndpointType' property.
    allOf:
      - $ref: '#/definitions/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishSystemInfo:
            $ref: '#/definitions/ComponentEndpoint.1.0.0_RedfishSystemInfo'
    type: object
  ComponentEndpointManager:
    description: >-
      This is a subtype of ComponentEndpoint for Manager RF components,
      i.e. any BMC type.  For example NodeBMC is a Manager, NodeEnclosure
      is a Chassis RF type.
      This subtype is used when the ComponentEndpoint's ComponentEndpointType
      is 'ComponentEndpointManager' via the 'discriminator:
      ComponentEndpointType' property.
    allOf:
      - $ref: '#/definitions/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishManagerInfo:
            $ref: '#/definitions/ComponentEndpoint.1.0.0_RedfishManagerInfo'
    type: object
  ComponentEndpointPowerDistribution:
    description: >-
      This is a subtype of ComponentEndpoint for PowerDistribution RF
      components. This subtype is used when the ComponentEndpoints
      ComponentEndpointType is ComponentEndpointPowerDistribution via
      the discriminator: ComponentEndpointType property.
    allOf:
      - $ref: '#/definitions/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishChassisInfo:
            $ref:
              '#/definitions/ComponentEndpoint.1.0.0_RedfishPowerDistributionInfo'
    type: object
  ComponentEndpointOutlet:
    description: >-
      This is a subtype of ComponentEndpoint for PowerDistribution Outlet RF
      components. This subtype is used when the ComponentEndpoints
      ComponentEndpointType is ComponentEndpointOutlet via
      the discriminator: ComponentEndpointType property.
    allOf:
      - $ref: '#/definitions/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishChassisInfo:
            $ref: '#/definitions/ComponentEndpoint.1.0.0_RedfishOutletInfo'
    type: object
  ComponentEndpoint.1.0.0_RedfishChassisInfo:
    description: >-
      This is the ChassisInfo field in the RF Chassis subtype of
      ComponentEndpoint, i.e. when the latter's RedfishType is Chassis.
      This is where new fields will be added.
    properties:
      Name:
        description: The Redfish 'Name' of the Chassis.
        type: string
        readOnly: true
      Actions:
        $ref: '#/definitions/Actions_1.0.0_ChassisActions'
    type: object
  ComponentEndpoint.1.0.0_RedfishSystemInfo:
    description: >-
      This is the SystemInfo object in the RF ComputerSystem subtype of
      ComponentEndpoint, i.e. when the latter's RedfishType is ComputerSystem.
      It contains HMS-Node/ComputerSystem-specific Redfish fields that need
      to be collected during discovery and made available to clients.
      This is where new fields will be added.  Mostly placeholder now.
    properties:
      Name:
        description: The Redfish 'name' of the ComputerSystem.
        type: string
        readOnly: true
      Actions:
        $ref: '#/definitions/Actions_1.0.0_ComputerSystemActions'
      EthernetNICInfo:
        items:
          $ref: '#/definitions/EthernetNICInfo_1.0.0'
        type: array
      PowerURL:
        description: The URL for the power info for this node.
        type: string
        readOnly: true
        example: /redfish/v1/Chassis/Node0/Power
      PowerControl:
        items:
          $ref: '#/definitions/PowerControl_1.0.0'
        type: array
    type: object
  ComponentEndpoint.1.0.0_RedfishManagerInfo:
    description: >-
      This is the ManagerInfo object in the RF Manager subtype of
      ComponentEndpoint, i.e. when the latter's RedfishType is Manager.
      It contains BMC/Manager-specific Redfish fields that need
      to be collected during discovery and made available to clients.
      This is where new fields will be added.  Mostly placeholder now.
    properties:
      Name:
        description: The Redfish 'Name' of the Manager.
        type: string
        readOnly: true
      Actions:
        $ref: '#/definitions/Actions_1.0.0_ManagerActions'
      EthernetNICInfo:
        items:
          $ref: '#/definitions/EthernetNICInfo_1.0.0'
        type: array
    type: object
  ComponentEndpoint.1.0.0_RedfishPowerDistributionInfo:
    description: >-
      This is the RedfishPDUInfo field in the RF Chassis subtype of
      ComponentEndpoint, i.e. when the latter's RedfishType is
      PowerDistribution.  This is where new fields will be added.
    properties:
      Name:
        description: The Redfish Name of the PDU.
        type: string
        readOnly: true
    # Actions:
    #   $ref: '#/definitions/Actions_1.0.0_PDUActions'
    type: object
  ComponentEndpoint.1.0.0_RedfishOutletInfo:
    description: >-
      This is the RedfishOutletInfo field in the RF Outlet subtype of
      ComponentEndpoint, i.e. when the latter's RedfishType is Outlet.
      This is where new fields will be added.
    properties:
      Name:
        description: The Redfish Name of the Outlet.
        type: string
        readOnly: true
      Actions:
        $ref: '#/definitions/Actions_1.0.0_OutletActions'
    type: object
  ComponentEndpoint.1.0.0_ResourceURICollection:
    properties:
      Name:
        description: >-
          Should describe the collection, though the type of resources
          the links correspond to should also be inferred from the context
          in which the collection was obtained.
        type: string
        readOnly: true
        example: (Type of Object) Collection
      Members:
        description: An array of ResourceIds.
        items:
          $ref: '#/definitions/ResourceURI.1.0.0'
        type: array
        readOnly: true
      MemberCount:
        description: Number of ResourceURIs in the collection
        type: number
        format: int32
        readOnly: true
    type: object
  ComponentEndpointArray_ComponentEndpointArray:
    description: >-
      This is a collection of ComponentEndpoint objects returned whenever a
      query is expected to result in 0 to n matches.
    properties:
      ComponentEndpoints:
        description: Contains the HMS RedfishEndpoint objects in the array.
        items:
          $ref: '#/definitions/ComponentEndpoint.1.0.0_ComponentEndpoint'
        type: array
    type: object
  #
  # ComponentEndpoint POST query bodies
  #
  ComponentEndpointArray_PostQuery:
    description: >-
      There are limits to the length of an HTTP URL and query string.
      Hence, if we wish to query an arbitrary list of XName/IDs, it
      will need to be in the body of the request.  This object is
      used for this purpose.  It is similar to the analogous GET operation.
    properties:
      ComponentEndpointIDs:
        description: >-
          An array of XName/ID values for the ComponentEndpoints to query.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      partition:
        $ref: '#/definitions/XNamePartition.1.0.0'
    required:
      - ComponentEndpointIDs
    type: object
  ###########################################################################
  #
  # HSN Info - HSN NIC Addresses and Coordinates by xname
  #
  ###########################################################################
  HSNInfo.1.0.0:
    description: >-
      Component to NIC and Network Coordinate Map
    properties:
      HSNTopology:
        $ref: '#/definitions/HSNTopology.1.0.0'
      HSNNetworkType:
        $ref: '#/definitions/NetType.1.0.0'
      HSNInfoEntries:
        description: Contains an HSN info entry for each component.
        items:
          $ref: '#/definitions/HSNInfoEntry.1.0.0'
        type: array
    readOnly: true
    type: object
  HSNInfoEntry.1.0.0:
    description: The HSN info for an individual component, e.g. node.
    properties:
      ID:
        # The xname of the component location
        $ref: '#/definitions/XName.1.0.0'
      Type:
        # The HMS Type of the location/xname
        $ref: '#/definitions/HMSType.1.0.0'
      NICAddrs:
        #  A collection of HSN NIC addresses in string form.
        $ref: '#/definitions/NICAddrs.1.0.0'
      HSNCoords:
        description:
          HSN Coordinates of the components, an integer tuple of a particular
          length in array form.
        items:
          type: integer
          format: int32
        type: array
        example: [ 0, 0, 0, 0, 0 ]
    readOnly: true
    type: object
  HSNTopology.1.0.0:
    description: Numerical identifier for HSN topology class
    type: integer
    format: int32
    example: 0
  ###########################################################################
  #
  # Hardware Inventory
  #
  ###########################################################################
  HWInventory.1.0.0_HWInventory:
    description: >-
      This is a collection of hardware inventory data. Depending on
      the query only some of these arrays will be populated.

      Also, depending on the query that produced the inventory, some
      components may have their subcomponents nested underneath them
      (hierarchical query), rather than all arranged in their own arrays by
      their types (flat query).

      The default is hierarchical for node subcomponents (Processors, Memory)
      and flat for everything else, but other query types are possible and can
      use this same basic structure.

      Either way, the 'Target' field is the parent component, partition or
      system that is used to select the components for the query.
    properties:
      XName:
        # Partition, component or s0 that is used to select the components
        # in the inventory.
        $ref: '#/definitions/XName.1.0.0'
      Format:
        description: >-
          How results are displayed
            FullyFlat      All component types listed in their own
                           arrays only.  No nesting of any children
            Hierarchical   All subcomponents listed as children up to
                           top level component (or set of cabinets)
            NestNodesOnly  Flat except that node subcomponents are nested
                           hierarchically.
          Default is NestNodesOnly.
        enum:
          - FullyFlat
          - Hierarchical
          - NestNodesOnly
        type: string
        example: NestNodesOnly
      Cabinets:
        description: >-
          All components with HMS type 'Cabinet' appropriate given Target
          component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocCabinet'
        readOnly: true
        type: array
      Chassis:
        description: >-
          All appropriate components with HMS type 'Chassis' given Target
          component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocChassis'
        readOnly: true
        type: array
      ComputeModules:
        description: >-
          All appropriate components with HMS type 'ComputeModule' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocComputeModule'
        readOnly: true
        type: array
      RouterModules:
        description: >-
          All appropriate components with HMS type 'RouterModule' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocRouterModule'
        readOnly: true
        type: array
      NodeEnclosures:
        description: >-
          All appropriate components with HMS type 'NodeEnclosure' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocNodeEnclosure'
        readOnly: true
        type: array
      HSNBoards:
        description: >-
          All appropriate components with HMS type 'HSNBoard' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocHSNBoard'
        readOnly: true
        type: array
      Nodes:
        description: >-
          All appropriate components with HMS type 'Node' given Target
          component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocNode'
        readOnly: true
        type: array
      Processors:
        description: >-
          All appropriate components with HMS type 'Processor' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocProcessor'
        readOnly: true
        type: array
      NodeAccels:
        description: >-
          All appropriate components with HMS type 'NodeAccel' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocNodeAccel'
        readOnly: true
        type: array
      Drives:
        description: >-
          All appropriate components with HMS type 'Drive' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocDrive'
        readOnly: true
        type: array
      Memory:
        description: >-
          All appropriate components with HMS type 'Memory' given Target
          component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocMemory'
        readOnly: true
        type: array
      CabinetPDUs:
        description: >-
          All appropriate components with HMS type 'CabinetPDU' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocPDU'
        readOnly: true
        type: array
      CabinetPDUPowerConnectors:
        description: >-
          All appropriate components with HMS type 'CabinetPDUPowerConnector' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocOutlet'
        readOnly: true
        type: array
      CMMRectifiers:
        description: >-
          All appropriate components with HMS type 'CMMRectifier' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocCMMRectifier'
        readOnly: true
        type: array
      NodeAccelRisers:
        description: >-
          All appropriate components with HMS type 'NodeAccelRiser' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocNodeAccelRiser'
        readOnly: true
        type: array
      NodeHsnNICs:
        description: >-
          All appropriate components with HMS type 'NodeHsnNic' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocHSNNIC'
        readOnly: true
        type: array
      NodeEnclosurePowerSupplies:
        description: >-
          All appropriate components with HMS type 'NodeEnclosurePowerSupply' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocNodeEnclosurePowerSupply'
        readOnly: true
        type: array
      NodeBMC:
        description: >-
          All appropriate components with HMS type 'NodeBMC' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocNodeBMC'
        readOnly: true
        type: array
      RouterBMC:
        description: >-
          All appropriate components with HMS type 'RouterBMC' given
          Target component/partition and query type.
        items:
          $ref: '#/definitions/HWInvByLocRouterBMC'
        readOnly: true
        type: array
    type: object
  #
  #
  # Hardware Inventory by location
  #
  #
  HWInventory.1.0.0_HWInventoryByLocation:
    description: >-
      This is the basic entry in the hardware inventory for a particular
      location/xname.  If the location is populated (e.g. if a slot for a
      blade exists and the blade is present), then there will also be a
      link to the FRU entry for the physical piece of hardware that occupies
      it.
    properties:
      ID:
        # The xname of the component location
        $ref: '#/definitions/XNameCompOrPartition.1.0.0'
      Type:
        # The HMS Type of the location/xname
        $ref: '#/definitions/HMSType.1.0.0'
      Ordinal:
        description: >-
          This is the normalized (from zero) index of the component location
          (e.g. slot number) when there are more than one.  This should
          match the last number in the xname in most cases (e.g. Ordinal 0
          for node x0c0s0b0n0).  Note that Redfish may use a different value
          or naming scheme, but this is passed through via the *LocationInfo
          for the type of component.
        type: integer
        format: int32
        readOnly: true
      Status:
        description: Populated or Empty - whether location is populated.
        enum:
          - Populated
          - Empty
        type: string
        readOnly: true
      HWInventoryByLocationType:
        description: >-
          This is used as a discriminator to determine the additional HMS-type
          specific subtype that is returned.
        enum:
          - HWInvByLocCabinet
          - HWInvByLocChassis
          - HWInvByLocComputeModule
          - HWInvByLocRouterModule
          - HWInvByLocNodeEnclosure
          - HWInvByLocHSNBoard
          - HWInvByLocNode
          - HWInvByLocProcessor
          - HWInvByLocNodeAccel
          - HWInvByLocNodeAccelRiser
          - HWInvByLocDrive
          - HWInvByLocMemory
          - HWInvByLocPDU
          - HWInvByLocOutlet
          - HWInvByLocCMMRectifier
          - HWInvByLocNodeEnclosurePowerSupply
          - HWInvByLocNodeBMC
          - HWInvByLocRouterBMC
          - HWInvByLocHSNNIC
        type: string
      PopulatedFRU:
        # If Status is 'Populated' then this will embed the FRU object.
        $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
    type: object
    discriminator: HWInventoryByLocationType
    required:
      - HWInventoryByLocationType
      - ID
    # See example for appropriate subclass per HWInventoryByLocationType
    # field.
    example:
  HWInvByLocCabinet:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType Cabinet.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocCabinet'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          CabinetLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisLocationInfo'
          Chassis:
            description: >-
              Embedded chassis HWInv object array representing subcomponents
              (if query is hierarchical).
            items:
              $ref: '#/definitions/HWInvByLocChassis'
            readOnly: true
            type: array
    type: object
    example:
      ID: x0
      Type: Cabinet
      Ordinal: 0
      Status: Populated
      HWInventoryByLocationType: HWInvByLocCabinet
      CabinetLocationInfo:
        Id: Cabinet
        Name: Name describing cabinet or where it is located, per manufacturing
        Description: Description of cabinet, per manufacturing
        Hostname: if_defined_in_Redfish
      PopulatedFRU:
        FRUID: Cray-2345-1234556789
        Type: Cabinet
        Subtype: MountainCabinet (example)
        HWInventoryByFRUType: HWInvByFRUCabinet
        CabinetFRUInfo:
          AssetTag: AdminAssignedAssetTag
          Model: 123
          Manufacturer: Cray
          PartNumber: p2345
          SerialNumber: sn1234556789
          SKU: as213234
          ChassisType: Rack
  HWInvByLocChassis:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType Chassis.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocChassis'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          ChassisLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisLocationInfo'
          ComputeModules:
            description: >-
              Embedded ComputeModule HWInv object array representing
              subcomponents of that type (if query is hierarchical).
            items:
              $ref: '#/definitions/HWInvByLocComputeModule'
            readOnly: true
            type: array
          RouterModules:
            description: >-
              Embedded RouterModule HWInv object array representing
              subcomponents of that type (if query is hierarchical).
            items:
              $ref: '#/definitions/HWInvByLocRouterModule'
            readOnly: true
            type: array
    type: object
    example:
      ID: x0c0
      Type: Chassis
      Ordinal: 0
      Status: Populated
      HWInventoryByLocationType: HWInvByLocChassis
      ChassisLocationInfo:
        Id: Chassis.1
        Name: Name describing component or its location, per manufacturing
        Description: Description, per manufacturing
        Hostname: if_defined_in_Redfish
      PopulatedFRU:
        FRUID: Cray-ch01-23452345
        Type: Chassis
        Subtype: MountainChassis (example)
        HWInventoryByFRUType: HWInvByFRUChassis
        ChassisFRUInfo:
          AssetTag: AdminAssignedAssetTag
          Model: 3245
          Manufacturer: Cray
          PartNumber: ch01
          SerialNumber: sn23452345
          SKU: as213234
          ChassisType: Enclosure
  HWInvByLocComputeModule:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType ComputeModule.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocComputeModule'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          ComputeModuleLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisLocationInfo'
          NodeEnclosures:
            description: >-
              Embedded NodeEnclosure HWInv object array representing
              subcomponents of that type (if query is hierarchical).
            items:
              $ref: '#/definitions/HWInvByLocNodeEnclosure'
            readOnly: true
            type: array
    type: object
  HWInvByLocRouterModule:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType RouterModule.
      This is a Mountain switch module.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocRouterModule'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          RouterModuleLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisLocationInfo'
          HSNBoards:
            description: >-
              Embedded HSNBoard HWInv object array representing
              subcomponents of that type (if query is hierarchical).
            items:
              $ref: '#/definitions/HWInvByLocHSNBoard'
            readOnly: true
            type: array
    type: object
  HWInvByLocNodeEnclosure:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType NodeEnclosure.
      It represents a Mountain node card or River rack enclosure.  It is
      NOT the BMC, which is separate and corresponds to a Redfish Manager.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocNodeEnclosure'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeEnclosureLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisLocationInfo'
  HWInvByLocHSNBoard:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType HSNBoard.
      It represents a Mountain switch card or River TOR enclosure.  It is
      NOT the BMC, which is separate and corresponds to a Redfish Manager.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocHSNBoard'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          HSNBoardLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisLocationInfo'
    type: object
  HWInvByLocNode:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType Node.
      It represents a service, compute, or system node.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocNode'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishSystemLocationInfo'
          Processors:
            description: >-
              Embedded Processor HWInv object array representing
              subcomponents of that type (this is default for Nodes).
            items:
              $ref: '#/definitions/HWInvByLocProcessor'
            readOnly: true
            type: array
          NodeAccels:
            description: >-
              Embedded NodeAccel HWInv object array representing
              subcomponents of that type (this is default for Nodes).
            items:
              $ref: '#/definitions/HWInvByLocNodeAccel'
            readOnly: true
            type: array
          Drives:
            description: >-
              Embedded Drives HWInv object array representing
              subcomponents of that type (this is default for Nodes).
            items:
              $ref: '#/definitions/HWInvByLocDrive'
            readOnly: true
            type: array
          Memory:
            description: >-
              Embedded Memory HWInv object array representing
              subcomponents of that type (this is default for Nodes).
            items:
              $ref: '#/definitions/HWInvByLocMemory'
            readOnly: true
            type: array
          NodeAccelRisers:
            description: >-
              Embedded NodeAccelRiser HWInv object array representing
              subcomponents of that type (this is default for Nodes).
            items:
              $ref: '#/definitions/HWInvByLocNodeAccelRiser'
            readOnly: true
            type: array
          NodeHsnNICs:
            description: >-
              Embedded NodeHsnNIC HWInv object array representing
              subcomponents of that type (this is default for Nodes).
            items:
              $ref: '#/definitions/HWInvByLocHSNNIC'
            readOnly: true
            type: array
    type: object
    example:
      ID: x0c0s0b0n0
      Type: Node
      Ordinal: 0
      Status: Populated
      HWInventoryByLocationType: HWInvByLocNode
      NodeLocationInfo:
        Id: System.Embedded.1
        Name: Name describing system or where it is located, per manufacturing
        Description: Description of system/node type, per manufacturing
        Hostname: if_defined_in_Redfish
        ProcessorSummary:
          Count: 2
          Model: Multi-Core Intel(R) Xeon(R) processor E5-16xx Series
        MemorySummary:
          TotalSystemMemoryGiB: 64
      PopulatedFRU:
        FRUID: Dell-99999-1234.1234.2345
        Type: Node
        Subtype: River
        HWInventoryByFRUType: HWInvByFRUNode
        NodeFRUInfo:
          AssetTag: AdminAssignedAssetTag
          BiosVersion: v1.0.2.9999
          Model: OKS0P2354
          Manufacturer: Dell
          PartNumber: p99999
          SerialNumber: 1234.1234.2345
          SKU: as213234
          SystemType: Physical
          UUID: 26276e2a-29dd-43eb-8ca6-8186bbc3d971
      Processors:
        - ID: x0c0s0b0n0p0
          Type: Processor
          Ordinal: 0
          Status: Populated
          HWInventoryByLocationType: HWInvByLocProcessor
          ProcessorLocationInfo:
            Id: CPU1
            Name: Processor
            Description: Socket 1 Processor
            Socket: CPU 1
          PopulatedFRU:
            FRUID: HOW-TO-ID-CPUS-FROM-REDFISH-IF-AT-ALL
            Type: Processor
            Subtype: SKL24
            HWInventoryByFRUType: HWInvByFRUProcessor
            ProcessorFRUInfo:
              InstructionSet: x86-64
              Manufacturer: Intel
              MaxSpeedMHz: 2600
              Model: Intel(R) Xeon(R) CPU E5-2623 v4 @ 2.60GHz
              ProcessorArchitecture: x86
              ProcessorId:
                EffectiveFamily: 6
                EffectiveModel: 79
                IdentificationRegisters: 0x000406F1
                MicrocodeInfo: 0xB000017
                Step: 1
                VendorID: GenuineIntel
              ProcessorType: CPU
              TotalCores: 24
              TotalThreads: 48
        - ID: x0c0s0b0n0p1
          Type: Processor
          Ordinal: 1
          Status: Populated
          HWInventoryByLocationType: HWInvByLocProcessor
          ProcessorLocationInfo:
            Id: CPU2
            Name: Processor
            Description: Socket 2 Processor
            Socket: CPU 2
          PopulatedFRU:
            FRUID: HOW-TO-ID-CPUS-FROM-REDFISH-IF-AT-ALL
            Type: Processor
            Subtype: SKL24
            HWInventoryByFRUType: HWInvByFRUProcessor
            ProcessorFRUInfo:
              InstructionSet: x86-64
              Manufacturer: Intel
              MaxSpeedMHz: 2600
              Model: Intel(R) Xeon(R) CPU E5-2623 v4 @ 2.60GHz
              ProcessorArchitecture: x86
              ProcessorId:
                EffectiveFamily: 6
                EffectiveModel: 79
                IdentificationRegisters: 0x000406F1
                MicrocodeInfo: 0xB000017
                Step: 1
                VendorID: GenuineIntel
              ProcessorType: CPU
              TotalCores: 24
              TotalThreads: 48
      Memory:
        - ID: x0c0s0b0n0d0
          Type: Memory
          Ordinal: 0
          Status: Populated
          HWInventoryByLocationType: HWInvByLocMemory
          MemoryLocationInfo:
            Id: DIMM1
            Name: DIMM Slot 1
            MemoryLocation:
              Socket: 1
              MemoryController: 1
              Channel: 1
              Slot: 1
          PopulatedFRU:
            FRUID: MFR-PARTNUMBER-SERIALNUMBER
            Type: Memory
            Subtype: DIMM2400G32
            HWInventoryByFRUType: HWInvByFRUMemory
            MemoryFRUInfo:
              BaseModuleType: RDIMM
              BusWidthBits: 72
              CapacityMiB: 32768
              DataWidthBits: 64
              ErrorCorrection: MultiBitECC
              Manufacturer: Micron
              MemoryType: DRAM
              MemoryDeviceType: DDR4
              OperatingSpeedMhz: 2400
              PartNumber: XYZ-123-1232
              RankCount: 2
              SerialNumber: sn12344567689
        - ID: x0c0s0b0n0d1
          Type: Memory
          Ordinal: 1
          Status: Empty
          HWInventoryByLocationType: HWInvByLocMemory
          MemoryLocationInfo:
            Id: DIMM2
            Name: Socket 1 DIMM Slot 2
            MemoryLocation:
              Socket: 1
              MemoryController: 1
              Channel: 1
              Slot: 2
          PopulatedFRU:
        - ID: x0c0s0b0n0d2
          Type: Memory
          Ordinal: 2
          Status: Populated
          HWInventoryByLocationType: HWInvByLocMemory
          MemoryLocationInfo:
            Id: DIMM3
            Name: Socket 2 DIMM Slot 1
            MemoryLocation:
              Socket: 2
              MemoryController: 2
              Channel: 1
              Slot: 1
          PopulatedFRU:
            FRUID: MFR-PARTNUMBER-SERIALNUMBER_2
            Type: Memory
            Subtype: DIMM2400G32
            HWInventoryByFRUType: HWInvByFRUMemory
            MemoryFRUInfo:
              BaseModuleType: RDIMM
              BusWidthBits: 72
              CapacityMiB: 32768
              DataWidthBits: 64
              ErrorCorrection: MultiBitECC
              Manufacturer: Micron
              MemoryType: DRAM
              MemoryDeviceType: DDR4
              OperatingSpeedMhz: 2400
              PartNumber: XYZ-123-1232
              RankCount: 2
              SerialNumber: k346456346346
        - ID: x0c0s0b0n0d3
          Type: Memory
          Ordinal: 3
          Status: Empty
          HWInventoryByLocationType: HWInvByLocMemory
          MemoryLocationInfo:
            Id: DIMM3
            Name: Socket 2 DIMM Slot 2
            MemoryLocation:
              Socket: 2
              MemoryController: 2
              Channel: 1
              Slot: 2
          PopulatedFRU:
  HWInvByLocProcessor:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType Processor.
      It represents a primary CPU type (e.g. non-accelerator).
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocProcessor'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          ProcessorLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_RedfishProcessorLocationInfo'
    type: object
    example:
      description:
        By default, listed as subcomponent of Node, see example there.
  HWInvByLocNodeAccel:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType NodeAccel.
      It represents a GPU type (e.g. accelerator).
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocNodeAccel'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeAccelLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_RedfishProcessorLocationInfo'
    type: object
    example:
      description:
        By default, listed as subcomponent of Node.
  HWInvByLocDrive:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType Drive.
      It represents a disk drive.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocDrive'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          DriveLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_RedfishDriveLocationInfo'
    type: object
    example:
      description:
        By default, listed as subcomponent of Node, see example there.
  HWInvByLocMemory:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType Memory.
      It represents a DIMM or other memory module type.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocMemory'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          MemoryLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishMemoryLocationInfo'
    type: object
    example:
      description:
        By default, listed as subcomponent of Node, see example there.
  HWInvByLocPDU:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType CabinetPDU.
      It represents a master or slave PowerDistribution aka PDU component.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocPDU'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          PDULocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishPDULocationInfo'
          CabinetPDUPowerConnectors:
            description: >-
              Embedded Outlets HWInv object array representing
              outlets of this PDU.
            items:
              $ref: '#/definitions/HWInvByLocOutlet'
            readOnly: true
            type: array
    type: object
    example:
      ID: x0m0p0
      Type: CabinetPDU
      Ordinal: 0
      Status: Populated
      HWInventoryByLocationType: HWInvByLocPDU
      PDULocationInfo:
        Id: "1"
        Name: RackPDU1
        Description: Description of PDU, per manufacturing
        UUID: 32354641-4135-4332-4a35-313735303734
      PopulatedFRU:
        FRUID: "CabinetPDU.29347ZT536"
        Type: CabinetPDU
        HWInventoryByFRUType: HWInvByFRUPDU
        PDUFRUInfo:
          FirmwareVersion: 4.3.0
          EquipmentType: RackPDU
          Manufacturer: Contoso
          CircuitSummary:
            TotalPhases: 3
            TotalBranches: 4
            TotalOutlets: 16
            MonitoredPhases: 3
            ControlledOutlets: 8
            MonitoredBranches: 4
            MonitoredOutlets: 12
          AssetTag: PDX-92381
          DateOfManufacture: 2017-01-11T08:00:00Z
          HardwareRevision: 1.03b
          Model: ZAP4000
          SerialNumber: 29347ZT536
          PartNumber: AA-23
      CabinetPDUPowerConnectors:
        - ID: x0m0p0v1
          Type: CabinetPDUPowerConnector
          Ordinal: 0
          Status: Populated
          HWInventoryByLocationType: HWInvByLocOutlet
          OutletLocationInfo:
            Id: A1
            Name: Outlet A1, Branch Circuit A
            Description: Outlet description
          PopulatedFRU:
            FRUID: "CabinetPDUPowerConnector.0.CabinetPDU.29347ZT536"
            Type: CabinetPDUPowerConnector
            HWInventoryByFRUType: HWInvByFRUOutlet
            OutletFRUInfo:
              PowerEnabled: true
              NominalVoltage: AC120V
              RatedCurrentAmps: 20
              VoltageType: AC
              OutletType: NEMA_5_20R
              PhaseWiringType: OnePhase3Wire
        - ID: x0m0p0v2
          Type: CabinetPDUPowerConnector
          Ordinal: 2
          Status: Populated
          HWInventoryByLocationType: HWInvByLocOutlet
          OutletLocationInfo:
            Id: A2
            Name: Outlet A2, Branch Circuit A
            Description: Outlet description
          PopulatedFRU:
            FRUID: "CabinetPDUPowerConnector.1.CabinetPDU.29347ZT536"
            Type: CabinetPDUPowerConnector
            HWInventoryByFRUType: HWInvByFRUOutlet
            OutletFRUInfo:
              PowerEnabled: true
              NominalVoltage: AC120V
              RatedCurrentAmps: 20
              VoltageType: AC
              OutletType: NEMA_5_20R
              PhaseWiringType: OnePhase3Wire
  HWInvByLocOutlet:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType CabinetPDUPowerConnector.
      It an outlet that is a child of of a parent master or slave PDU.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocOutlet'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          OutletLocationInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishOutletLocationInfo'
    type: object
    example:
      description:
        By default, listed as subcomponent of PDU, see example there.
  HWInvByLocCMMRectifier:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType CMMRectifier.
      It represents a power supply.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocCMMRectifier'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          CMMRectifierLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_RedfishCMMRectifierLocationInfo'
    type: object
  HWInvByLocNodeAccelRiser:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType NodeAccelRiser.
      It represents a GPUSubsystem baseboard.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocNodeAccelRiser'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeAccelRiserLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_RedfishNodeAccelRiserLocationInfo'
    type: object
  HWInvByLocNodeEnclosurePowerSupply:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType NodeEnclosurePowerSupply.
      It represents a power supply.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocNodeEnclosurePowerSupply'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeEnclosurePowerSupplyLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_RedfishNodeEnclosurePowerSupplyLocationInfo'
    type: object
  HWInvByLocNodeBMC:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType NodeBMC.
      It represents a NodeBMC.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocNodeBMC'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeBMCLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_RedfishManagerLocationInfo'
    type: object
  HWInvByLocRouterBMC:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType RouterBMC.
      It represents a RouterBMC.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocRouterBMC'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          RouterBMCLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_RedfishManagerLocationInfo'
    type: object
  HWInvByLocHSNNIC:
    description: >-
      This is a subtype of HWInventoryByLocation for HMSType NodeHSNNIC.
      It represents a NodeHSNNIC.
      It is selected via the 'discriminator: HWInventoryByLocationType'
      of HWInventoryByLocation when HWInventoryByLocationType is
      'HWInvByLocHSNNIC'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          HSNNICLocationInfo:
            $ref:
              '#/definitions/HWInventory.1.0.0_HSNNICLocationInfo'
    type: object
  HWInventory.1.0.0_RedfishChassisLocationInfo:
    description: >-
      These are pass-through properties of the Redfish Chassis object type
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The Id is included for informational purposes.  The RedfishEndpoint
          objects are intended to help locate and interact with HMS components
          via the Redfish endpoint, so this is mostly needed in case
          servicing the component requires its ID/name according to a
          particular COTS manufacturer's naming scheme within, for example,
          a particular server enclosure.
        type: string
        readOnly: true
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is an informational description set by the BMC implementation.
        type: string
        readOnly: true
      Hostname:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          Note this is simply what (if anything) Redfish has been told
          the hostname is.  It isn't necessarily its hostname on any particular
          network interface (e.g. the HMS management network).
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishSystemLocationInfo:
    description: >-
      These are pass-through properties of the Redfish ComputerSystem object
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The Id is included for informational purposes.  The RedfishEndpoint
          objects are intended to help locate and interact with HMS components
          via the Redfish endpoint, so this is mostly needed in case
          servicing the component requires its ID/name according to a
          particular COTS manufacturer's naming scheme within, for example,
          a particular server enclosure.
        type: string
        readOnly: true
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is an informational description set by the BMC implementation.
        type: string
        readOnly: true
      Hostname:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          Note this is simply what (if anything) Redfish has been told
          the hostname is.  It isn't necessarily its hostname on any particular
          network interface (e.g. the HMS management network).
        type: string
        readOnly: true
      ProcessorSummary:
        description: >-
          This is a summary of the installed processors, if any.
          It is taken from ComputerSystem.1.0.0_ProcessorSummary.
        properties:
          Count:
            description: The number of processors in the system.
            minimum: 0
            readOnly: true
            type: number
          Model:
            description: >-
              The processor model for the primary or majority of processors in
              this system.
            readOnly: true
            type: string
        type: object
        readOnly: true
      MemorySummary:
        description: >-
          This object describes the memory of the system in general detail.
          It is taken from ComputerSystem.1.0.0_MemorySummary.
        properties:
          TotalSystemMemoryGiB:
            description: >-
              The total installed, operating system-accessible memory (RAM),
              measured in GiB.
            minimum: 0
            readOnly: true
            type: number
        type: object
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishProcessorLocationInfo:
    description: >-
      These are pass-through properties of the Redfish Processor object type
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The Id is included for informational purposes.  The RedfishEndpoint
          objects are intended to help locate and interact with HMS components
          via the Redfish endpoint, so this is mostly needed in case
          servicing the component requires its ID/name according to a
          particular COTS manufacturer's naming scheme within, for example,
          a particular server enclosure.
        type: string
        readOnly: true
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is an informational description set by the BMC implementation.
        type: string
        readOnly: true
      Socket:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          It represents the socket or location of the processor, and may
          differ from the normalized HMS Ordinal value (or xname) that is
          always indexed from 0.  Manufacturers may or may not use zero
          indexing (or may have some other naming scheme for sockets) and
          so we retain this information to resolve any ambiguity when
          servicing the component.
        readOnly: true
        type: string
    type: object
  HWInventory.1.0.0_RedfishDriveLocationInfo:
    description: >-
      These are pass-through properties of the Redfish Drive object type
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The Id is included for informational purposes.  The RedfishEndpoint
          objects are intended to help locate and interact with HMS components
          via the Redfish endpoint, so this is mostly needed in case
          servicing the component requires its ID/name according to a
          particular COTS manufacturer's naming scheme within, for example,
          a particular server enclosure.
        type: string
        readOnly: true
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is an informational description set by the BMC implementation.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishMemoryLocationInfo:
    description: >-
      These are pass-through properties of the Redfish Memory object type
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The Id is included for informational purposes.  The RedfishEndpoint
          objects are intended to help locate and interact with HMS components
          via the Redfish endpoint, so this is mostly needed in case
          servicing the component requires its ID/name according to a
          particular COTS manufacturer's naming scheme within, for example,
          a particular server enclosure.
        type: string
        readOnly: true
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is an informational description set by the BMC implementation.
        type: string
        readOnly: true
      MemoryLocation:
        description: >-
          Describes the location of the memory module.  Note that the
          indexing of these fields are set by the manufacturer and may
          not start at zero (or one for that matter) and therefore are
          for informational/servicing purposes only.
          This object and its fields are again a pass-through from Redfish.
        properties:
          Socket:
            description: >-
              Socket number (numbering may vary by manufacturer).
            minimum: 0
            readOnly: true
            type: number
          MemoryController:
            description: >-
              Memory controller number (numbering may vary by manufacturer).
            minimum: 0
            readOnly: true
            type: number
          Channel:
            description: >-
              Channel number (numbering may vary by manufacturer).
            minimum: 0
            readOnly: true
            type: number
          Slot:
            description: >-
              Slot number (numbering may vary by manufacturer).
            minimum: 0
            readOnly: true
            type: number
        type: object
    type: object
  HWInventory.1.0.0_RedfishPDULocationInfo:
    description: >-
      These are pass-through properties of the Redfish PowerDistribution object
      type that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The Id is included for informational purposes.  The RedfishEndpoint
          objects are intended to help locate and interact with HMS components
          via the Redfish endpoint, so this is mostly needed in case
          servicing the component requires its ID/name according to a
          particular COTS manufacturers naming scheme within, for example,
          a particular server enclosure.
        type: string
        readOnly: true
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is an informational description set by the implementation.
        type: string
        readOnly: true
      UUID:
        description: >-
          This is a pass-through of the Redfish value of the same name.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishOutletLocationInfo:
    description: >-
      These are pass-through properties of the Redfish PDU Outlet object
      type that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The Id is included for informational purposes.  The RedfishEndpoint
          objects are intended to help locate and interact with HMS components
          via the Redfish endpoint, so this is mostly needed in case
          servicing the component requires its ID/name according to a
          particular COTS manufacturers naming scheme within, for example,
          a particular server enclosure.
        type: string
        readOnly: true
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is an informational description set by the implementation.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishCMMRectifierLocationInfo:
    description: >-
      These are pass-through properties of the Redfish Power Supply object type
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      FirmwareVersion:
        description: >-
          This is a pass-through of the Redfish value of the same name.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishNodeAccelRiserLocationInfo:
    description: >-
      These are the properties of the NodeAccelRiser type
      that are passed-through to the HMS inventory data when the underlying Redfish object 
      type is an Assembly with a PhysicalContext of GPUSubsystem.  These are the
      properties of a specific hardware instance/FRU that may change if
      the component is relocated within the system.  Child of a Chassis.
    properties:
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishNodeEnclosurePowerSupplyLocationInfo:
    description: >-
      These are pass-through properties of the Redfish Power Supply object type
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
      FirmwareVersion:
        description: >-
          This is a pass-through of the Redfish value of the same name.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishManagerLocationInfo:
    description: >-
      These are pass-through properties of the Redfish Manager object type
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      DateTime:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The current date and time with UTC offset that the manager uses to set or read time.
        type: string
        readOnly: true
      DateTimeLocalOffset:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The time offset from UTC that the DateTime property is in +HH:MM format.
        type: string
        readOnly: true
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is an informational description set by the implementation.
        type: string
        readOnly: true
      FirmwareVersion:
        description: >-
          This is a pass-through of the Redfish value of the same name.
        type: string
        readOnly: true
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          The Id is included for informational purposes.  The RedfishEndpoint
          objects are intended to help locate and interact with HMS components
          via the Redfish endpoint, so this is mostly needed in case
          servicing the component requires its ID/name according to a
          particular COTS manufacturers naming scheme within, for example,
          a particular server enclosure.
        type: string
        readOnly: true
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
          This is included for informational purposes as the naming will
          likely vary from manufacturer-to-manufacturer, but should help
          match items up to manufacturer's documentation if the normalized
          HMS naming scheme is too vague for some COTS systems.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_HSNNICLocationInfo:
    description: >-
      These are pass-through properties of the Node HSN NIC object type
      that are also used in HMS inventory data.  They will be mostly
      informational as exactly how fields are set depends on how
      the particular implementation does things, but will be useful for
      servicing.
    properties:
      Description:
        description: >-
          This is a pass-through of the Redfish value of the same name.
        type: string
      Id:
        description: >-
          This is a pass-through of the Redfish value of the same name.
        type: string
      Name:
        description: >-
          This is a pass-through of the Redfish value of the same name.
        type: string
    type: object
  #
  # Hardware Inventory by FRU - This is the device-specific attributes that
  # are specific to an individual piece of hardware, regardless of its
  # current location, if any.
  #
  HWInventory.1.0.0_HWInventoryByFRU:
    description: >-
      This represents a physical piece of hardware with properties specific
      to a unique component in the system.  It is the counterpart to
      HWInventoryByLocation (which contains ONLY information specific to
      a particular location in the system that may or may not be populated),
      in that it contains only info about the component that is durably
      consistent wherever the component is installed in the system (if it
      is still installed at all).
    properties:
      FRUID:
        # The FRU identifier
        $ref: '#/definitions/FRUId.1.0.0'
      Type:
        # The HMS Type of the FRU
        $ref: '#/definitions/HMSType.1.0.0'
      FRUSubtype:
        description: TBD.
        type: string
      HWInventoryByFRUType:
        description: >-
          This is used as a discriminator to determine the additional HMS-type
          specific subtype that is returned.
        enum:
          - HWInvByFRUCabinet
          - HWInvByFRUChassis
          - HWInvByFRUComputeModule
          - HWInvByFRURouterModule
          - HWInvByFRUNodeEnclosure
          - HWInvByFRUHSNBoard
          - HWInvByFRUNode
          - HWInvByFRUProcessor
          - HWInvByFRUNodeAccel
          - HWInvByFRUNodeAccelRiser
          - HWInvByFRUDrive
          - HWInvByFRUMemory
          - HWInvByFRUPDU
          - HWInvByFRUOutlet
          - HWInvByFRUCMMRectifier
          - HWInvByFRUNodeEnclosurePowerSupply
          - HWInvByFRUNodeBMC
          - HWInvByFRURouterBMC
          - HWIncByFRUHSNNIC
        type: string
    type: object
    discriminator: HWInventoryByFRUType
    required:
      - HWInventoryByFRUType
    example:
      FRUID: Dell-99999-1234-1234-2345
      Type: Node
      Subtype: River
      HWInventoryByFRUType: HWInvByFRUNode
      NodeFRUInfo:
        AssetTag: AdminAssignedAssetTag
        BiosVersion: v1.0.2.9999
        Model: OKS0P2354
        Manufacturer: Dell
        PartNumber: y99999
        SerialNumber: 1234-1234-2345
        SKU: as213234
        SystemType: Physical
        UUID: 26276e2a-29dd-43eb-8ca6-8186bbc3d971
  HWInvByFRUCabinet:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType Cabinet.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUCabinet'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          CabinetFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisFRUInfo'
    type: object
  HWInvByFRUChassis:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType Chassis.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUChassis'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          ChassisFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisFRUInfo'
    type: object
  HWInvByFRUComputeModule:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType ComputeModule.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUComputeModule'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          ComputeModuleFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisFRUInfo'
    type: object
  HWInvByFRURouterModule:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType RouterModule.
      This is a Mountain switch module.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRURouterModule'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          RouterModuleFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisFRUInfo'
    type: object
  HWInvByFRUNodeEnclosure:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType NodeEnclosure.
      It represents a Mountain node card or River rack enclosure.  It is
      NOT the BMC, which is separate and corresponds to a Redfish Manager.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUNodeEnclosure'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeEnclosureFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisFRUInfo'
  HWInvByFRUHSNBoard:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType HSNBoard.
      It represents a Mountain switch card or River TOR enclosure.  It is
      NOT the BMC, which is separate and corresponds to a Redfish Manager.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUHSNBoard'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          HSNBoardFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishChassisFRUInfo'
    type: object
  HWInvByFRUNode:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType Node.
      It represents a service, compute, or system node.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUNode'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishSystemFRUInfo'
    type: object
  HWInvByFRUProcessor:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType Processor.
      It represents a primary CPU type (e.g. non-accelerator).
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUProcessor'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          ProcessorFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishProcessorFRUInfo'
    type: object
    example:
      FRUID: HOW-TO-ID-CPUS-FROM-REDFISH-IF-AT-ALL
      Type: Processor
      Subtype: SKL24
      HWInventoryByFRUType: HWInvByFRUProcessor
      ProcessorFRUInfo:
        InstructionSet: x86-64
        Manufacturer: Intel
        MaxSpeedMHz: 2600
        Model: Intel(R) Xeon(R) CPU E5-2623 v4 @ 2.60GHz
        ProcessorArchitecture: x86
        ProcessorId:
          EffectiveFamily: 6
          EffectiveModel: 79
          IdentificationRegisters: 0x000406F1
          MicrocodeInfo: 0xB000017
          Step: 1
          VendorID: GenuineIntel
        ProcessorType: CPU
        TotalCores: 24
        TotalThreads: 48
  HWInvByFRUNodeAccel:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType NodeAccel.
      It represents a GPU type (e.g. accelerator).
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUNodeAccel'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeAccelFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishProcessorFRUInfo'
  HWInvByFRUDrive:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType Drive.
      It represents a disk drive type.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUDrive'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          DriveFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishDriveFRUInfo'
    type: object
    example:
      HWInventoryByFRUType: HWInvByFRUDrive
      DriveFRUInfo:
        SerialNumber: S45PNA0M540940
        Model: SAMSUNG MZ7LH480HAHQ-00005
        CapacityBytes: 503424483328
        FailurePredicted: false
  HWInvByFRUMemory:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType Memory.
      It represents a DIMM or other memory module type.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByLocMemory'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          MemoryFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishMemoryFRUInfo'
    type: object
  HWInvByFRUPDU:
    description: >-
      This is a subtype of HWInventoryByFRU for PDU HMSTypes, e.g. CabinetPDU.
      It represents a Redfish PowerDistribution master or slave PDU.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUPDU'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          PDUFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishPDUFRUInfo'
    type: object
  HWInvByFRUOutlet:
    description: >-
      This is a subtype of HWInventoryByFRU for Outlet HMSTypes, e.g.
      CabinetPDUPowerConnector.  It represents an outlet of a PDU.
      It is selected via the "discriminator:" HWInventoryByFRUType
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUOutlet'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          OutletFRUInfoFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishOutletFRUInfo'
    type: object
    example:
      ID: x0m0p0v1
      Type: CabinetPDUPowerConnector
      Ordinal: 0
      Status: Populated
      HWInventoryByLocationType: HWInvByLocOutlet
      OutletLocationInfo:
        Id: A1
        Name: Outlet A1, Branch Circuit A
        Description: Outlet description
        PopulatedFRU:
          FRUID: "CabinetPDUPowerConnector.0.CabinetPDU.29347ZT536"
          Type: CabinetPDUPowerConnector
          HWInventoryByFRUType: HWInvByFRUOutlet
          OutletFRUInfo:
            PowerEnabled: true
            NominalVoltage: AC120V
            RatedCurrentAmps: 20
            VoltageType: AC
            OutletType: NEMA_5_20R
            PhaseWiringType: OnePhase3Wire
  HWInvByFRUCMMRectifier:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType CMMRectifier.
      It represents a power supply type.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUCMMRectifier'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          PowerSupplyFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishCMMRectifierFRUInfo'
    type: object
  HWInvByFRUNodeAccelRiser:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType NodeAccelRiser.
      It represents a GPUSubsystem baseboard type.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUNodeAccelRiser'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeAccelRiserFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishNodeAccelRiserFRUInfo'
    type: object
  HWInvByFRUNodeEnclosurePowerSupply:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType NodeEnclosurePowerSupply.
      It represents a power supply type.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUNodeEnclosurePowerSupply'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeEnclosurePowerSupplyFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishNodeEnclosurePowerSupplyFRUInfo'
    type: object
  HWInvByFRUNodeBMC:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType NodeBMC.
      It represents a Node BMC type.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUNodeBMC'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeBMCFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishManagerFRUInfo'
    type: object
  HWInvByFRURouterBMC:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType RouterBMC.
      It represents a Router BMC type.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRURouterBMC'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          RouterBMCFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_RedfishManagerFRUInfo'
    type: object
  HWInvByFRUHSNNIC:
    description: >-
      This is a subtype of HWInventoryByFRU for HMSType NodeHsnNic.
      It represents a node HSN NIC type.
      It is selected via the 'discriminator: HWInventoryByFRUType'
      of HWInventoryByFRU when HWInventoryByFRUType is
      'HWInvByFRUHSNNIC'.
    allOf:
      - $ref: '#/definitions/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          HSNNICFRUInfo:
            $ref: '#/definitions/HWInventory.1.0.0_HSNNICFRUInfo'
    type: object
  HWInventory.1.0.0_RedfishChassisFRUInfo:
    description: >-
      These are pass-through properties of the Redfish Chassis object type
      that are also used in HMS inventory data when this is the underlying
      Redfish object type for a particular HMS component type.  These are
      properties of a specific hardware instance/FRU that remain the same if
      the component is relocated within the system.
    properties:
      AssetTag:
        description: The administratively-assigned asset tag for this chassis.
        type: string
        readOnly: true
      ChassisType:
        description: >-
          This property indicates the type of physical form factor of this
          resource (from Redfish - not all of these will likely appear
          in practice.  In any case, the HMS type and subtype will
          identify the hardware type, this is for informational purposes
          only).
        enum:
          - Rack
          - Blade
          - Enclosure
          - StandAlone
          - RackMount
          - Card
          - Cartridge
          - Row
          - Pod
          - Expansion
          - Sidecar
          - Zone
          - Sled
          - Shelf
          - Drawer
          - Module
          - Component
          - Other
        readOnly: true
        type: string
      Model:
        description: Manufacturer-provided model number for part.
        type: string
        readOnly: true
      Manufacturer:
        description: Intended to provide the manufacturer of the part.
        type: string
        readOnly: true
      PartNumber:
        description: Manufacturer-provided part number for this component.
        type: string
        readOnly: true
      SerialNumber:
        description: Manufacturer-provided serial number for this component.
        type: string
        readOnly: true
      SKU:
        description: Manufacturer-provided SKU for this component.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishSystemFRUInfo:
    description: >-
      These are pass-through properties of the Redfish ComputerSystem object
      that are also used in HMS inventory data.  These are properties
      of a specific hardware instance that remain the same if the component
      is relocated within the system.

      Note that Redfish ComputerSystem objects are an abstract type that
      represents a system, but not necessarily a specific piece of hardware.
      Chassis objects represent things like the physical enclosure.  The
      system links to chassis and also to subcomponents that have their
      own object types like Processors, Memory, and Storage.

      That said, they are a close fit to how we represent nodes in HMS and
      so it makes sense to pass through their properties since that is
      how we will discover this information anyways.
    properties:
      AssetTag:
        description: The administratively-assigned asset tag for this chassis.
        type: string
        readOnly: true
      BiosVersion:
        description: The version of the system BIOS or primary system firmware.
        type: string
        readOnly: true
      Model:
        description: Manufacturer-provided model number for part.
        type: string
        readOnly: true
      Manufacturer:
        description: Intended to provide the manufacturer of the part.
        type: string
        readOnly: true
      PartNumber:
        description: Manufacturer-provided part number for this component.
        type: string
        readOnly: true
      SerialNumber:
        description: Manufacturer-provided serial number for this component.
        type: string
        readOnly: true
      SKU:
        description: Manufacturer-provided SKU for this component.
        type: string
      SystemType:
        description: Type of system.  Probably always physical for now.
        enum:
          - Physical
          - Virtual
          - OS
          - PhysicallyPartitioned
          - VirtuallyPartitioned
        readOnly: true
        type: string
      UUID:
        $ref: '#/definitions/UUID.1.0.0'
    type: object
  HWInventory.1.0.0_RedfishProcessorFRUInfo:
    description: >-
      These are pass-through properties of the Redfish Processor object type
      that are also used in HMS inventory data. These are properties
      of a specific processor instance that remain the same if it is
      relocated within the system.
    properties:
      InstructionSet:
        description:
          The instruction set of the processor (Redfish pass-through)
        enum:
          - x86
          - x86-64
          - IA-64
          - ARM-A32
          - ARM-A64
          - MIPS32
          - MIPS64
          - OEM
        readOnly: true
        type: string
      Manufacturer:
        description: The processor manufacturer
        readOnly: true
        type: string
      MaxSpeedMHz:
        description: The maximum clock speed of the processor
        readOnly: true
        type: number
      Model:
        description: The product model number of this device
        readOnly: true
        type: string
      ProcessorArchitecture:
        description: The architecture of the processor
        enum:
          - x86
          - IA-64
          - ARM
          - MIPS
          - OEM
        readOnly: true
        type: string
      ProcessorId:
        description: >-
          Identification information for this processor. Pass-through
          from Redfish.
        properties:
          EffectiveFamily:
            description: The effective Family for this processor
            readOnly: true
            type: string
          EffectiveModel:
            description: The effective Model for this processor
            readOnly: true
            type: string
          IdentificationRegisters:
            description: >-
              The contents of the Identification Registers (CPUID) for this
              processor
            readOnly: true
            type: string
          MicrocodeInfo:
            description: The Microcode Information for this processor
            readOnly: true
            type: string
          Step:
            description: The Step value for this processor
            readOnly: true
            type: string
          VendorId:
            description: The Vendor Identification for this processor
            readOnly: true
            type: string
        type: object
      ProcessorType:
        description: The type of processor
        enum:
          - CPU
          - GPU
          - FPGA
          - DSP
          - Accelerator
          - OEM
        readOnly: true
        type: string
      TotalCores:
        description: The total number of cores contained in this processor
        readOnly: true
        type: number
      TotalThreads:
        description:
          The total number of execution threads supported by this processor
        readOnly: true
        type: number
    type: object
  HWInventory.1.0.0_RedfishDriveFRUInfo:
    description: >-
      These are pass-through properties of the Redfish Drive object type
      that are also used in HMS inventory data. These are properties
      of a specific drive instance that remain the same if it is
      relocated within the system.
    properties:
      Manufacturer:
        description: The drive manufacturer
        readOnly: true
        type: string
      SerialNumber:
        description: Unique identifier
        readOnly: true
        type: string
      PartNumber:
        description: Manufacturer part number
        readOnly: true
        type: string
      Model:
        description: Manufacturer model name
        readOnly: true
        type: string
      SKU:
        description: Manufacturer Stock Keeping Unit
        readOnly: true
        type: string
      CapacityBytes:
        description: Manufacturer Stock Keeping Unit
        readOnly: true
        type: number
      Protocol:
        description: The protocol that this drive currently uses to communicate to the storage controller.
        enum:
          - AHCI
          - FC
          - FCP
          - FCoE
          - FICON
          - FTP
          - GenZ
          - HTTP
          - HTTPS
          - I2C
          - MultiProtocol
          - NFSv3
          - NFSv4
          - NVMe
          - NVMeOverFabrics
          - OEM
          - PCIe
          - RoCE
          - RoCEv2
          - SAS
          - SATA
          - SFTP
          - SMB
          - TCP
          - TFTP
          - UDP
          - UHCI
          - USB
          - iSCSI
          - iWARP
        readOnly: true
        type: string
      MediaType:
        description: The type of media contained in this drive
        enum:
          - HDD
          - SMR
          - SSD
        readOnly: true
        type: string
      RotationSpeedRPM:
        description: The rotation speed of this drive, in revolutions per minute (RPM)
        readOnly: true
        type: number
      BlockSizeBytes:
        description: The size, in bytes, of the smallest addressable unit, or block
        readOnly: true
        type: integer
      CapableSpeedGbs:
        description: The speed, in gigabit per second (Gbit/s), at which this drive can communicate to a storage controller in ideal conditions.
        readOnly: true
        type: number
      FailurePredicted:
        description: An indication of whether this drive currently predicts a failure in the near future.
        readOnly: true
        type: boolean
      EncryptionAbility:
        description: The encryption ability of this drive.
        enum:
          - None
          - Other
          - SelfEncryptingDrive
        readOnly: true
        type: string
      EncryptionStatus:
        description: The status of the encryption of this drive.
        enum:
          - Foreign
          - Locked
          - Encrypted
          - Unencrypted
          - Unlocked
        readOnly: true
        type: string
      NegotiatedSpeedGbs:
        description: The speed, in gigabit per second (Gbit/s), at which this drive currently communicates to the storage controller.
        readOnly: true
        type: number
      PredictedMediaLifeLeftPercent:
        description: The percentage of reads and writes that are predicted to still be available for the media.
        readOnly: true
        type: number
    type: object
  HWInventory.1.0.0_RedfishMemoryFRUInfo:
    description: >-
      These are pass-through properties of the Redfish Memory object type
      that are also used in HMS inventory data.  These are properties
      of a specific memory module that remain the same if it the module is
      relocated within the system.
    properties:
      BaseModuleType:
        description: The base module type of Memory.
        enum:
          - RDIMM
          - UDIMM
          - SO_DIMM
          - LRDIMM
          - Mini_RDIMM
          - Mini_UDIMM
          - SO_RDIMM_72b
          - SO_UDIMM_72b
          - SO_DIMM_16b
          - SO_DIMM_32b
        readOnly: true
        type: string
      BusWidthBits:
        description: Bus width in bits.
        readOnly: true
        type: number
      CapacityMiB:
        description: Memory Capacity in MiB.
        readOnly: true
        type: number
      DataWidthBits:
        description: Data width in bits.
        readOnly: true
        type: number
      ErrorCorrection:
        description: >-
          Whether single or multiple errors, or address parity errors can be
          corrected.
        enum:
          - NoECC
          - SingleBitECC
          - MultiBitECC
          - AddressParity
        readOnly: true
        type: string
      Manufacturer:
        description: The manufacturer of the memory module
        readOnly: true
        type: string
      MemoryType:
        description: Type of memory module.
        enum:
          - DRAM
          - NVDIMM_N
          - NVDIMM_F
          - NVDIMM_P
        readOnly: true
        type: string
      MemoryDeviceType:
        description: Type details of the memory.
        enum:
          - DDR
          - DDR2
          - DDR3
          - DDR4
          - DDR4_SDRAM
          - DDR4E_SDRAM
          - LPDDR4_SDRAM
          - DDR3_SDRAM
          - LPDDR3_SDRAM
          - DDR2_SDRAM
          - DDR2_SDRAM_FB_DIMM
          - DDR2_SDRAM_FB_DIMM_PROBE
          - DDR_SGRAM
          - DDR_SDRAM
          - ROM
          - SDRAM
          - EDO
          - FastPageMode
          - PipelinedNibble
        readOnly: true
        type: string
      OperatingSpeedMhz:
        description: Operating speed of Memory in MHz.
        readOnly: true
        type: number
      PartNumber:
        description: Manufacturer-provided part number for this component.
        type: string
        readOnly: true
      RankCount:
        description: Number of ranks available in the memory.
        minimum: 0
        readOnly: true
        type: number
      SerialNumber:
        description: Manufacturer-provided serial number for this component.
        type: string
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishPDUFRUInfo:
    description: >-
      These are pass-through properties of the Redfish PowerDistribution type
      that are also used in HMS inventory data when this is the underlying
      Redfish object type for a particular HMS component type.  These are
      properties of a specific hardware instance/FRU that remain the same if
      the component is relocated within the system.
    properties:
      AssetTag:
        description: The administratively-assigned asset tag for this chassis.
        type: string
        readOnly: true
      DateOfManufacture:
        description: Manufacturer-provided date-of-manufacture for part.
        type: string
        readOnly: true
      EquipmentType:
        description: >-
          This property indicates the type of PowerDistribution
          in practice.  In any case, the HMS type and subtype will
          identify the hardware type, this is for informational purposes
          only).
        enum:
          - RackPDU
          - FloorPDU
          - ManualTransferSwitch
          - AutomaticTransferSwitch
          - Other
        readOnly: true
        type: string
      FirmwareVersion:
        description: Firmware version at time of discovery.
        type: string
        readOnly: true
      HardwareRevision:
        description: Manufacturer-provided HardwareRevision for part.
        type: string
        readOnly: true
      Model:
        description: Manufacturer-provided model number for part.
        type: string
        readOnly: true
      Manufacturer:
        description: Intended to provide the manufacturer of the part.
        type: string
        readOnly: true
      PartNumber:
        description: Manufacturer-provided part number for this component.
        type: string
        readOnly: true
      SerialNumber:
        description: Manufacturer-provided serial number for this component.
        type: string
        readOnly: true
      SKU:
        description: Manufacturer-provided SKU for this component.
        type: string
        readOnly: true
      CircuitSummary:
        description: Summary of circuits for PDU.
        properties:
          MonitoredOutlets:
            description: Number of monitored outlets
            readOnly: true
            type: number
          TotalPhases:
            description: Number of phases in total
            readOnly: true
            type: number
          ControlledOutlets:
            description: Total number of controller outlets
            readOnly: true
            type: number
          TotalOutlets:
            description: Total number of outlets
            readOnly: true
            type: number
          MonitoredBranches:
            description: Number of monitored branches
            readOnly: true
            type: number
          MonitoredPhases:
            description: Number of monitored phases
            readOnly: true
            type: number
          TotalBranches:
            description: Number of total branches.
            readOnly: true
            type: number
        type: object
        readOnly: true
    type: object
  HWInventory.1.0.0_RedfishOutletFRUInfo:
    description: >-
      These are pass-through properties of the Redfish Outlet type
      that are also used in HMS inventory data when this is the underlying
      Redfish object type for a particular HMS component type.  These are the
      properties of a specific hardware instance/FRU that remain the same if
      the component is relocated within the system.  Child of a PDU.
    properties:
      VoltageType:
        description: type of voltage
        enum:
          - AC
          - DC
        readOnly: true
        type: string
      NominalVoltage:
        description: Nominal voltage for outlet.
        readOnly: true
        type: string
      PowerEnabled:
        description: Indicates if the outlet can be powered.
        type: boolean
        example: true
      RatedCurrentAmps:
        description: Rated current in amps
        readOnly: true
        type: number
      OutletType:
        description: Type of outlet.
        readOnly: true
        type: string
      PhaseWiringType:
        description: Phase wiring type
        enum:
          - OnePhase3Wire
          - TwoPhase3Wire
          - TwoPhase4Wire
          - ThreePhase4Wire
          - ThreePhase5Wire
        readOnly: true
        type: string
    type: object
  HWInventory.1.0.0_RedfishCMMRectifierFRUInfo:
    description: >-
      These are pass-through properties of the Redfish PowerSupply type
      that are also used in HMS inventory data when this is the underlying
      Redfish object type for a particular HMS component type.  These are the
      properties of a specific hardware instance/FRU that remain the same if
      the component is relocated within the system.  Child of a Chassis.
    properties:
      Manufacturer:
        description: The manufacturer of this power supply.
        readOnly: true
        type: string
      SerialNumber:
        description: The serial number for this power supply.
        readOnly: true
        type: string
      Model:
        description: The model number for this power supply.
        readOnly: true
        type: string
      PartNumber:
        description: The part number for this power supply.
        readOnly: true
        type: string
      PowerCapacityWatts:
        description: The maximum capacity of this power supply.
        readOnly: true
        type: number
      PowerInputWatts:
        description: The measured input power of this power supply.
        readOnly: true
        type: number
      PowerOutputWatts:
        description: The measured output power of this power supply.
        readOnly: true
        type: number
      PowerSupplyType:
        description: The power supply type (AC or DC).
        readOnly: true
        type: string
    type: object
  HWInventory.1.0.0_RedfishNodeAccelRiserFRUInfo:
    description: >-
      These are the properties of the NodeAccelRiser type
      that are passed-through to the HMS inventory data when the underlying Redfish object 
      type is an Assembly with a PhysicalContext of GPUSubsystem.  These are the
      properties of a specific hardware instance/FRU that remain the same if
      the component is relocated within the system.  Child of a Chassis.
    properties:
      Producer:
        description: The manufacturer of this riser card.
        readOnly: true
        type: string
      SerialNumber:
        description: The serial number for this riser card.
        readOnly: true
        type: string
      Model:
        description: The model number for this riser card.
        readOnly: true
        type: string
      PartNumber:
        description: The part number for this riser card.
        readOnly: true
        type: string
      ProductionDate:
        description: The date of production of this riser card.
        readOnly: true
        type: string
      Version:
        description: The version of this riser card.
        readOnly: true
        type: string
      EngineeringChangeLevel:
        description: The engineering change level of this riser card.
        readOnly: true
        type: string
      PhysicalContext:
        description: The hardware type of this riser card.
        readOnly: true
        type: string
    type: object
  HWInventory.1.0.0_RedfishNodeEnclosurePowerSupplyFRUInfo:
    description: >-
      These are pass-through properties of the Redfish PowerSupply type
      that are also used in HMS inventory data when this is the underlying
      Redfish object type for a particular HMS component type.  These are the
      properties of a specific hardware instance/FRU that remain the same if
      the component is relocated within the system.  Child of a Chassis.
    properties:
      Manufacturer:
        description: The manufacturer of this power supply.
        readOnly: true
        type: string
      SerialNumber:
        description: The serial number for this power supply.
        readOnly: true
        type: string
      Model:
        description: The model number for this power supply.
        readOnly: true
        type: string
      PartNumber:
        description: The part number for this power supply.
        readOnly: true
        type: string
      PowerCapacityWatts:
        description: The maximum capacity of this power supply.
        readOnly: true
        type: number
      PowerInputWatts:
        description: The measured input power of this power supply.
        readOnly: true
        type: number
      PowerOutputWatts:
        description: The measured output power of this power supply.
        readOnly: true
        type: number
      PowerSupplyType:
        description: The power supply type (AC or DC).
        readOnly: true
        type: string
    type: object
  HWInventory.1.0.0_RedfishManagerFRUInfo:
    description: >-
      These are pass-through properties of the Redfish Manager type
      that are also used in HMS inventory data when this is the underlying
      Redfish object type for a particular HMS component type.  These are the
      properties of a specific hardware instance/FRU that remain the same if
      the component is relocated within the system.
    properties:
      ManagerType:
        description: The type of manager that this Resource represents, i.e. BMC, EnclosureManager, RackManager, etc.
        readOnly: true
        type: string
      Manufacturer:
        description: The manufacturer of this manager.
        readOnly: true
        type: string
      SerialNumber:
        description: The serial number for this manager.
        readOnly: true
        type: string
      Model:
        description: The model number for this manager.
        readOnly: true
        type: string
      PartNumber:
        description: The part number for this manager.
        readOnly: true
        type: string
    type: object
  HWInventory.1.0.0_HSNNICFRUInfo:
    description: >-
      These are pass-through properties of the Node HSN NIC type
      that are also used in HMS inventory data when this is the underlying
      network object type for a particular HMS component type.  These are the
      properties of a specific hardware instance/FRU that remain the same if
      the component is relocated within the system.
    properties:
      Manufacturer:
        description: The manufacturer of this HSN NIC.
        type: string
      Model:
        description: The model of this HSN NIC.
        type: string
      PartNumber:
        description: The part number for this HSN NIC.
        type: string
      SKU:
        description: The SKU for this HSN NIC.
        type: string
      SerialNumber:
        description: The serial number for this HSN NIC.
        type: string
    type: object
  #
  # Hardware Inventory History - This is the historical data for each FRU
  # and location tracked by HSM.
  #
  HWInventory.1.0.0_HWInventoryHistoryCollection:
    description: >-
      This is the array of sorted history entries (by FRU or by location).
    properties:
      Components:
        type: array
        items:
          $ref: '#/definitions/HWInventory.1.0.0_HWInventoryHistoryArray'
    type: object
  HWInventory.1.0.0_HWInventoryHistoryArray:
    description: >-
      This is the array of history entries for a particular FRU or component location (xname).
    properties:
      ID:
        type: string
        description: >-
          Locational xname or FRU ID of the component associated with the history entries in
          the 'History' array.
      History:
        type: array
        items:
          $ref: '#/definitions/HWInventory.1.0.0_HWInventoryHistory'
    type: object
  HWInventory.1.0.0_HWInventoryHistory:
    description: >-
      This is a HWInventory history entry. Each time a HWInventory event happens a history
      record is created with associated data including locational xname, FRU ID, timestamp,
      and event type (Added, Removed, Scanned, etc).
    properties:
      ID:
        description: >-
          Uniquely identifies the component by its physical location (xname).
        $ref: '#/definitions/XName.1.0.0'
      FRUID:
        # The FRU identifier
        $ref: '#/definitions/FRUId.1.0.0'
      Timestamp:
        description: The time that the history entry was created.
        format: date-time
        type: string
        example: '2018-08-09 03:55:57.000000'
      EventType:
        description: Describes the type of event the history entry was created for.
        enum:
          - Added
          - Removed
          - Scanned
        type: string
        example: Added
    type: object
  #########################################################################
  #
  # RedfishEndpoint data structures - Represents component running
  #                                   Redfish service entry point.
  #
  #########################################################################
  RedfishEndpoint.1.0.0_RedfishEndpoint:
    description: >-
      This describes a RedfishEndpoint that is interrogated in order to
      perform discovery of the components below it. It is a BMC or
      card/blade controller or other device that operates a Redfish
      entry point through which the components underneath it may be
      discovered and managed.
    properties:
      ID:
        $ref: '#/definitions/XNameRFEndpoint.1.0.0'
      Type:
        # HMS Logical component type e.g. NodeBMC, ChassisBMC.
        # This may be left blank and will be detected from the ID/xname
        # and/or by the discovery process.
        $ref: '#/definitions/HMSType.1.0.0'
      Name:
        description: >-
          This is an arbitrary, user-provided name for the endpoint.  It can
          describe anything that is not captured by the ID/xname.
        type: string
      Hostname:
        description: >-
          Hostname of the endpoint's FQDN, will always be the host portion of
          the fully-qualified domain name.
          Note that the hostname should normally always be the same as the ID
          field (i.e. xname) of the endpoint.
        type: string
      Domain:
        description: >-
          Domain of the endpoint's FQDN.  Will always match remaining
          non-hostname portion of fully-qualified domain name (FQDN).
        type: string
      FQDN:
        description: >-
          Fully-qualified domain name of RF endpoint on management network.
          This is not writable because it is made up of the Hostname and
          Domain.
        type: string
      Enabled:
        description: >-
          To disable a component without deleting its data from the database,
          can be set to false
        type: boolean
        example: true
      UUID:
        # UUID of Redfish service root
        $ref: '#/definitions/UUID.1.0.0'
      User:
        description: Username to use when interrogating endpoint
        type: string
      Password:
        description: >-
          Password to use when interrogating endpoint, normally
          suppressed in output.
        type: string
      UseSSDP:
        description: Whether to use SSDP for discovery if the EP supports it.
        type: boolean
      MacRequired:
        description: >-
          Whether the MAC must be used (e.g. in River) in setting up
          geolocation info so the endpoint's location in the system can be
          determined.  The MAC does not need to be provided when creating the
          endpoint if the endpoint type can arrive at a geolocated hostname
          on its own.
        type: boolean
      MACAddr:
        description: >-
          This is the MAC on the of the Redfish Endpoint on the
          management network, i.e. corresponding to the FQDN field's
          Ethernet interface where the root service is running.
          Not the HSN MAC.
          This is a MAC address in the standard colon-separated 12 byte hex
          format.
        pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
        type: string
        example: ae:12:e2:ff:89:9d
      IPAddress:
        description: >-
          This is the IP of the Redfish Endpoint on the
          management network, i.e. corresponding to the FQDN field's
          Ethernet interface where the root service is running. This may be
          IPv4 or IPv6
        type: string
        example: 10.254.2.10
      RediscoverOnUpdate:
        description: Trigger a rediscovery when endpoint info is updated.
        type: boolean
      TemplateID:
        description: >-
          Links to a discovery template defining how the endpoint should
          be discovered.
        type: string
      DiscoveryInfo:
        description: >-
          Contains info about the discovery status of the given endpoint.
        properties:
          LastAttempt:
            description: The time the last discovery attempt took place.
            format: date-time
            readOnly: true
            type: string
          LastStatus:
            description: Describes the outcome of the last discovery attempt.
            enum:
              - EndpointInvalid
              - EPResponseFailedDecode
              - HTTPsGetFailed
              - NotYetQueried
              - VerificationFailed
              - ChildVerificationFailed
              - DiscoverOK
            type: string
            readOnly: true
          RedfishVersion:
            description: Version of Redfish as reported by the RF service root.
            type: string
            readOnly: true
        type: object
        readOnly: true
    # ComponentEndpoints:
    #   items:
    #     $ref: '#/definitions/ComponentEndpoint.1.0.0_ComponentEndpoint'
    #   type: array
    #   readOnly: true
    # ServiceEndpoints:
    #   items:
    #     $ref: '#/definitions/ServiceEndpoint.1.0.0_ServiceEndpoint'
    #   type: array
    #   readOnly: true
    type: object
    required:
      - ID
  RedfishEndpoint.1.0.0_ResourceURICollection:
    properties:
      Name:
        description: >-
          Should describe the collection, though the type of resources
          the links correspond to should also be inferred from the context
          in which the collection was obtained.
        type: string
        readOnly: true
        example: (Type of Object) Collection
      Members:
        description: An array of ResourceIds.
        items:
          $ref: '#/definitions/ResourceURI.1.0.0'
        type: array
        readOnly: true
      MemberCount:
        description: Number of ResourceURIs in the collection
        type: number
        format: int32
        readOnly: true
    type: object
  #
  # RedfishEndpointArray - Used for queries returning 0->n RedfishEndpoints
  #
  RedfishEndpointArray_RedfishEndpointArray:
    description: >-
      This is a collection of RedfishEndpoint objects returned whenever a
      query is expected to result in 0 to n matches.
    properties:
      RedfishEndpoints:
        description: Contains the HMS RedfishEndpoint objects in the array.
        items:
          $ref: '#/definitions/RedfishEndpoint.1.0.0_RedfishEndpoint'
        type: array
    type: object
  #
  # RedfishEndpoint POST query bodies
  #
  RedfishEndpointArray_PostQuery:
    description: >-
      There are limits to the length of an HTTP URL and query string.
      Hence, if we wish to query an arbitrary list of XName/IDs, it
      will need to be in the body of the request.  This object is
      used for this purpose.  It is similar to the analogous GET operation.
    properties:
      RedfishEndpointIDs:
        description: >-
          An array of XName/ID values for the RedfishEndpoints to query.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      partition:
        $ref: '#/definitions/XNamePartition.1.0.0'
    required:
      - RedfishEndpointIDs
    type: object
  #########################################################################
  #
  # ServiceEndpoint - Captures discovered data about service running on a
  #                   particular RedfishEndpoint
  #
  #########################################################################
  ServiceEndpoint.1.0.0_ServiceEndpoint:
    description: >-
      This describes a service running on a Redfish endpoint and is populated
      when Redfish endpoint discovery occurs.  It is used by clients who
      need to interact directly with the service via Redfish.

      There are also ComponentEndpoints, which represent Redfish components of
      a physical type (i.e., we track their state as components), which are
      also discovered when the Redfish Endpoint is discovered.

      The RedfishEndpointID is just the ID of the parent Redfish endpoint.
      As there are many service types per endpoint, the RedfishType
      must also be included to get a unique entry for a service.  Services
      do not have their own xnames, and so they are identified by thee
      combination of the RedfishEndpointID they are running on, plus
      the RedfishType value (e.g. AccountService, TaskService, etc.).

      NOTE: These records are discovered, not created, and therefore are not
      writable (since any changes would be overwritten by a subsequent
      discovery).
    properties:
      RedfishEndpointID:
        # Unique identifier for the parent RedfishEndpoint by its location
        # i.e. xname.  This is essentially a back-reference to the RF endpoint
        # that was used to discover this service.
        $ref: '#/definitions/XNameRFEndpoint.1.0.0'
      RedfishType:
        # This is the Redfish service type, not to be confused with the HMS
        # component type.  In this case, may be AccountService, TaskService,
        # or so on.
        $ref: '#/definitions/RedfishType.1.0.0'
      RedfishSubtype:
        # This may not be relevant to RF services like it is for components,
        # so it is likely to not be present or empty.
        $ref: '#/definitions/RedfishSubtype.1.0.0'
      UUID:
        $ref: '#/definitions/UUID.1.0.0'
      OdataID:
        # This is the relative path to the component relative to the parent
        # RedfishEndpoint's service root.
        $ref: '#/definitions/OdataID.1.0.0'
      RedfishEndpointFQDN:
        description: >-
          This is a back-reference to the fully-qualified domain name of the
          parent Redfish endpoint that was used to discover the component.  It
          is the RedfishEndpointID field i.e. the hostname/xname plus its
          current domain.
        type: string
        readOnly: true
      RedfishURL:
        description: >-
          This is the complete URL to the corresponding Redfish object,
          combining the RedfishEndpoint's FQDN and the OdataID.
        type: string
        readOnly: true
      ServiceInfo:
        # This is any additional information for the service.
        $ref: '#/definitions/ServiceEndpoint.1.0.0_ServiceInfo'
    type: object
  ServiceEndpoint.1.0.0_ServiceInfo:
    description: >-
      This is any additional information for the service.  This is service
      specific.  Schema for Redfish services can be found at
      https://redfish.dmtf.org/redfish/schema_index
    properties:
      Name:
        description: The name of the service.
        type: string
        readOnly: true
    type: object
  ServiceEndpointArray_ServiceEndpointArray:
    description: >-
      This is a collection of ServiceEndpoint objects returned whenever a
      query is expected to result in 0 to n matches.
    properties:
      ServiceEndpoints:
        description: Contains the HMS ServiceEndpoint objects in the array.
        items:
          $ref: '#/definitions/ServiceEndpoint.1.0.0_ServiceEndpoint'
        type: array
    type: object
  #########################################################################
  #
  # CompEthInterface - Captures discovered data about component Ethernet
  #                    interfaces on a particular ComponentEndpoint
  #
  #########################################################################
  CompEthInterface.1.0.0:
    description: >-
      A component Ethernet interface is an object describing a relation between
      a MAC address and IP address for components.
    properties:
      ID:
        description: >-
          The ID of the component Ethernet interface.
        type: string
        readOnly: true
        example: a4bf012b7310
      Description:
        description: >-
          An optional description for the component Ethernet interface.
        type: string
      MACAddress:
        description: >-
          The MAC address of this component Ethernet interface
        type: string
      IPAddresses:
        description: >-
          The IP addresses associated with the MAC address for this component Ethernet interface.
        type: array
        items:
          $ref: '#/definitions/CompEthInterface.1.0.0_IPAddressMapping'        
      LastUpdate:
        description: >-
          A timestamp for when the component Ethernet interface last was modified.
        format: date-time
        type: string
        readOnly: true
        example: '2020-05-13T19:18:45.524974Z'
      ComponentID:
        description: >-
          The xname of the component with this Ethernet interface. Maybe blank if
          the component has not been discovered yet.
        $ref: '#/definitions/XNameRW.1.0.0'
      Type:
        description: >-
          HMS component type of the component with this Ethernet interface. Maybe blank if
          the component has not been discovered yet.
        $ref: '#/definitions/HMSType.1.0.0'
    type: object
    required:
      - MACAddress
  CompEthInterface.1.0.0_Patch:
    description: >-
      To update the IP addresses, CompID, and/or description fields of a component Ethernet interface,
      a PATCH operation can be used. Omitted fields are not updated.
      NOTE: Updating the IP addresses field updates the LastUpdate field.  
    properties:
      Description:
        description: >-
          An optional description for the component Ethernet interface.
        type: string
      IPAddresses:
        description: >-
          The IP addresses associated with the MAC address for this component Ethernet interface.
        type: array
        items:
          $ref: '#/definitions/CompEthInterface.1.0.0_IPAddressMapping'        
      ComponentID:
        description: >-
          The xname of the component with this Ethernet interface.
        $ref: '#/definitions/XNameRW.1.0.0'
    type: object
  CompEthInterface.1.0.0_IPAddressMapping:
    description: >-
      A IP address Mapping maps a IP address to a network. In a Component Ethernet Interface it is used to describe what IP addresses and their networks that are associated with it.
    properties:
      IPAddress:
        description: >-
          The IP address associated with the MAC address for this component Ethernet interface on for this particular network.
        type: string
        example: 10.252.0.1
      Network:
        type: string
        description: >-
          The network that this IP addresses is associated with.
        example: HMN
    type: object
    required:
      - IPAddress
  CompEthInterface.1.0.0_IPAddressMapping_Patch:
    description: >-
      To update the network field a IP address mapping in a component 
      Ethernet interface a PATCH operation can be used. Omitted fields are not updated.
    properties:
      Network:
        type: string
        description: >-
          The network that this IP addresses is associated with.
    type: object
  ###########################################################################
  #
  # Discover payload and DiscoveryStatus object definitions
  #
  ###########################################################################
  DiscoveryStatus.1.0.0_DiscoveryStatus:
    description: >-
      Returns info on the current status of a discovery operation with the
      given ID returned when a Discover action is requested.
    properties:
      ID:
        description: The ID number of the discover operation.
        type: number
        format: int32
        readOnly: true
        example: 0
      Status:
        description: Describes the status of the given Discover operation.
        enum:
          - NotStarted
          - Pending
          - InProgress
          - Complete
        type: string
        readOnly: true
        example: Complete
      LastUpdateTime:
        description: The time that the Status field was last updated.
        readOnly: true
        format: date-time
        type: string
        example: '2018-08-09 03:55:57.000000'
      Details:
        $ref: '#/definitions/DiscoveryStatus.1.0.0_Details'
    type: object
  DiscoveryStatus.1.0.0_Details:
    description: >-
      Details accompanying a DiscoveryStatus entry.  Optional.
      Reserved for future use.
    type: object
    example: null
  Discover.1.0.0_DiscoverInput:
    description: >-
      The POST body for a Discover operation.  Note that these fields are
      optional.  The default for the xnames field is to select all
      RedfishEndpoints. The default for force is false.
    properties:
      xnames:
        description: >-
          An array of XName/ID values for the RedfishEndpoints to discover.
          If zero-length or omitted, all RedfishEndpoints will be discovered.
        items:
          $ref: '#/definitions/XNameRFEndpoint.1.0.0'
        type: array
      force:
        description: >-
          Whether to force discovery if there is already a conflicting
          DiscoveryStatus entry that is either Pending or InProgress.
          default is false.
        type: boolean
        example: false
    type: object
  ###########################################################################
  #
  # System Information Block (SIB) object definitions
  #
  ###########################################################################
  # SystemInformationBlock.1.0.0_SystemInformationBlock:
    # description: >-
      # The SystemInformationBlock (SIB) nests Component, HWInventory, HSNType,
      # and HSNInfo subschemas.
      # This provides information
      # that may be needed by a large number of endpoints in a single,
      # self-contained object.  While the all of the individual sections,
      # (except for the HSNInfo, which is obtained from the fabric manager)
      # can be queried using several of the more general APIs for these
      # structures, the SIB supports the use of a single API that clients may
      # use to bootstrap their initial system state, for example.
    # properties:
      # XName:
        # description: The component xname used to query the SIB
        # type: string
        # example: s0
      # ItemsQueried:
        # description: >-
          # The subsections of the SIB requested in the query that
          # produced this SIB.  This is given by the 'items' query
          # parameter or POST body property.
        # properties:
          # NodeList:
            # type: boolean
          # HWInventory:
            # type: boolean
          # HSNType:
            # type: boolean
          # HSNInfo:
            # type: boolean
        # type: object
      # SIBItems:
        # properties:
          # NodeList:
            # $ref: '#/definitions/ComponentArray_ComponentArray'
          # HSNType:
            # $ref: '#/definitions/NetType.1.0.0'
          # HWInventory:
            # $ref: '#/definitions/HWInventory.1.0.0_HWInventory'
          # HSNInfo:
            # $ref: '#/definitions/HSNInfo.1.0.0'
        # type: object
        # readOnly: true
    # type: object
    # readOnly: true
  # #
  # # Queries via POST for SIB data
  # #
  # SystemInformationBlock.1.0.0_PostQuery:
    # description: >-
      # A POST query that can be used to select the SIB block instead of
      # a get.
    # properties:
      # XName:
        # description: The component xname used to query the SIB
        # type: string
        # example: s0
      # UseMsgBus:
        # description: Deliver over message bus.  Default false.
        # type: boolean
      # Items:
        # description: >-
          # The subsections of the SIB to be requested in the query that
          # produced this SIB.  These will be reflected in the ItemsQueried
          # field in the response.  This, plus the xname can be used to match up
          # a response with the query parameters.
        # properties:
          # NodeList:
            # type: boolean
          # HWInventory:
            # type: boolean
          # HSNType:
            # type: boolean
          # HSNInfo:
            # type: boolean
        # type: object
    # type: object
  #
  # SCN Subscriptions
  #
  Subscriptions_SCNPostSubscription:
    type: object
    description: >-
      This is the JSON payload that contains information to create a new
      state change notification subscription
    properties:
      Subscriber:
        description: This is the name of the subscriber.
        type: string
        example: 'scnfd@sms02.cray.com'
      Enabled:
        description: >-
          This value toggles subscriptions to state change notifications
          concerning components being disabled or enabled. 'true' will cause
          the subscriber to be notified about components being enabled or
          disabled. 'false' or empty will result in no such notifications.
        type: boolean
        example: true
      Roles:
        description: >-
          This is an array containing component roles for which to be notified
          when role changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSRole.1.0.0'
      SubRoles:
        description: >-
          This is an array containing component subroles for which to be notified
          when subrole changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSSubRole.1.0.0'
      SoftwareStatus:
        description: >-
          This is an array containing component software statuses for which
          to be notified when software status changes occur.
        type: array
        items:
          type: string
          description: >-
            SoftwareStatus of the node, used by the managed plane for running
            nodes.
      States:
        description: >-
          This is an array containing component states for which to be notified
          when state changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSState.1.0.0'
      Url:
        $ref: '#/definitions/Subscriptions_Url'
  Subscriptions_SCNPatchSubscription:
    type: object
    description: >-
      This is the JSON payload that contains state change notification
      subscription information.
    properties:
      Op:
        description: >-
          The type of operation to be performed on the subscription
        enum:
          - add
          - remove
          - replace
        type: string
        example: "add"
      Enabled:
        description: >-
          This value toggles subscriptions to state change notifications
          concerning components being disabled or enabled. 'true' will cause
          the subscriber to be notified about components being enabled or
          disabled. 'false' or empty will result in no such notifications.
        type: boolean
        example: true
      Roles:
        description: >-
          This is an array containing component roles for which to be notified
          when role changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSRole.1.0.0'
      SubRoles:
        description: >-
          This is an array containing component subroles for which to be notified
          when subrole changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSSubRole.1.0.0'
      SoftwareStatus:
        description: >-
          This is an array containing component software statuses for which to
          be notified when software status changes occur.
        type: array
        items:
          type: string
          description: >-
            SoftwareStatus of the node, used by the managed plane for running
            nodes.
      States:
        description: >-
          This is an array containing component states for which to be notified
          when state changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSState.1.0.0'
  Subscriptions_SCNSubscriptionArrayItem.1.0.0:
    description: 'State change notification subscription JSON payload.'
    properties:
      ID:
        $ref: '#/definitions/Subscription_ID'
      Subscriber:
        type: string
        example: 'scnfd@sms02.cray.com'
      Enabled:
        description: >-
          This value toggles subscriptions to state change notifications
          concerning components being disabled or enabled. 'true' will cause
          the subscriber to be notified about components being enabled or
          disabled. 'false' or empty will result in no such notifications.
        type: boolean
        example: true
      Roles:
        description: >-
          This is an array containing component roles for which to be notified
          when role changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSRole.1.0.0'
      SubRoles:
        description: >-
          This is an array containing component subroles for which to be notified
          when subrole changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSSubRole.1.0.0'
      SoftwareStatus:
        description: >-
          This is an array containing component software statuses for which
          to be notified when software status changes occur.
        type: array
        items:
          type: string
          description: >-
            SoftwareStatus of the node, used by the managed plane for running
            nodes.
      States:
        description: >-
          This is an array containing component states for which to be notified
          when state changes occur.
        type: array
        items:
          $ref: '#/definitions/HMSState.1.0.0'
      Url:
        $ref: '#/definitions/Subscriptions_Url'
  Subscriptions_SCNSubscriptionArray:
    description:
      List of all currently held state change notification subscriptions.
    properties:
      SubscriptionList:
        type: array
        items:
          $ref: '#/definitions/Subscriptions_SCNSubscriptionArrayItem.1.0.0'
  Subscriptions_Url:
    description: 'URL to send notifications to'
    type: string
    example: 'https://sms02.cray.com:27000/scnfd/v1/scn'
  Subscription_ID:
    description: >-
      This is the ID associated with the subscription that was generated at
      its creation.
    type: string
    example: '42'
  Group.1.0.0:
    description: >-
      A group is an informal, possibly overlapping division of the system
      that groups components under an administratively chosen label
      (i.e. group name).
      Unlike partitions, components can be members of any number of groups.
    properties:
      label:
        description: >-
          The label is a human-readable identifier for the group and uniquely
          identifies it.
        $ref: '#/definitions/ResourceName'   # String with format [a-z0-9_-.]+
      description:
        description: >-
          A one-line, user-provided description of the group.
        type: string
      tags:
        description:
          A free-form array of strings to provide extra organization/filtering.
          Not to be confused with labels/groups.
        type: array
        items:
          $ref: '#/definitions/ResourceName'   # String with format [a-z0-9_-.]+
      exclusiveGroup:
        description: >-
          If present and non-empty, the group is not allowed to add a member
          that exists under a different group/label where the exclusiveGroup
          field is the same.  This can be used to create groups of groups
          where a component may only be present in one of the set.
        $ref: '#/definitions/ResourceName'   # String with format [a-z0-9_-.]+
      members:
        description: >-
          The members are a fully enumerated (i.e. no implied members besides
          those explicitly provided) representation of the components in the
          group
        $ref: '#/definitions/Members.1.0.0'
    type: object
    required:
      - label
    example:
      label: blue
      description: This is the blue group
      tags:
        - optional_tag1
        - optional_tag2
      exclusiveGroup: optional_excl_group
      members:
        ids:
          - x1c0s1b0n0
          - x1c0s1b0n1
          - x1c0s2b0n0
          - x1c0s2b0n1
  Group.1.0.0_Patch:
    description: >-
      To update the tags array and/or description, a PATCH operation can be
      used.  If either field is omitted, it will not be updated.
      NOTE: This cannot be used to completely replace the members list
      Rather, individual members can be removed or added with the POST/DELETE
      /members API.
    properties:
      description:
        description: >-
          A one-line, user-provided description of the group.
        type: string
      tags:
        description:
          A free-form array of strings to provide extra organization/filtering.
          Not to be confused with labels/groups.
        type: array
        items:
          $ref: '#/definitions/ResourceName'   # String with format [a-z0-9_-.]+
    type: object
    example:
      description: This is an updated group description
      tags:
        - new_tag
        - existing_tag
  Partition.1.0.0:
    description: >-
      A partition is a formal, non-overlapping division of the system that
      forms an administratively distinct sub-system e.g. for implementing
      multi-tenancy.
    properties:
      name:
        description: >-
          The name is a human-readable identifier for the partition and
          uniquely identifies it.
        $ref: '#/definitions/ResourceName'   # String with format [a-z0-9_-.]+
      description:
        description: >-
          A one-line, user-provided description of the partition.
        type: string
      tags:
        description:
          A free-form array of strings to provide extra organization/filtering.
          Not to be confused with labels/groups.
        type: array
        items:
          $ref: '#/definitions/ResourceName'   # String with format [a-z0-9_-.]+
      members:
        description: >-
          The members are a fully enumerated (i.e. no implied members besides
          those explicitly provided) representation of the components in the
          partition
        $ref: '#/definitions/Members.1.0.0'
    required:
      - name
    example:
      name: p1
      description: This is partition 1
      tags:
        - optional_tag_a
        - optional_tag1
      members:
        ids:
          - x1c0s1b0n0
          - x1c0s1b0n1
          - x2c0s3b0n0
          - x2c0s3b0n1
  Partition.1.0.0_Patch:
    description: >-
      To update the tags array and/or description, a PATCH operation can be
      used.  If either field is omitted, it will not be updated.
      NOTE: This cannot be used to completely replace the members list
      Rather, individual members can be removed or added with the POST/DELETE
      /members API.
    properties:
      description:
        description: >-
          A one-line, user-provided description of the group.
        type: string
      tags:
        description:
          A free-form array of strings to provide extra organization/filtering.
          Not to be confused with labels/groups.
        type: array
        items:
          $ref: '#/definitions/ResourceName'   # String with format [a-z0-9_-.]+
    type: object
    example:
      description: This is an updated partition description
      tags:
        - new_tag
        - existing_tag
  Members.1.0.0:
    description: >-
      The members are a fully enumerated (i.e. no implied members besides
      those explicitly provided) representation of the components a
      partition or group
    properties:
      ids:
        description: >-
          Set of Component XName IDs that represent the membership of the
          group or partition.
        type: array
        items:
          $ref: '#/definitions/XNameRW.1.0.0'   # String with XName format
    type: object
    example:
      ids:
        - x1c0s1b0n0
        - x1c0s1b0n1
        - x2c0s3b0n0
        - x2c0s3b0n1
  MemberID:
    description: >-
      This is used when creating an new entry in a Group or Partition
      members array. It is the xname ID of the new member.
    properties:
      id:
        # Uniquely identifies the component by its physical location (xname)
        $ref: '#/definitions/XNameRW.1.0.0'
    type: object
  Membership.1.0.0:
    description: >-
      A membership is a mapping of a component xname to its set of group
      labels and partition names.
    properties:
      id:
        # Uniquely identifies the component by its physical location (xname)
        $ref: '#/definitions/XName.1.0.0'
      partitionName:
        description: >-
          The name is a human-readable identifier for the partition and
          uniquely identifies it.
        type: string
      groupLabels:
        description: >-
          An array with all group labels the component is associated with
          The label is the human-readable identifier for a group and uniquely
          identifies it.
        type: array
        items:
          type: string
    type: object
    example:
      id: x0c0s22b0n0
      nid: 45
      partitionName: p1
      groupLabels:
        - group1
        - group2

  ##########################################################################
  #
  # Locking v1 structures.
  #
  ##########################################################################
  Lock.1.0.0:
    description: >-
      A lock is an object describing a temporary reservation of a set of
      components held by an external service.  If not removed by the external
      service, HSM will automatically remove the lock after its lifetime has
      expired.
    properties:
      id:
        description: >-
          The ID number of the lock.
        type: string
        readOnly: true
        example: bf9362ad-b29c-40ed-9881-18a5dba3a26b
      created:
        description: >-
          A timestamp for when the lock was created.
        format: date-time
        type: string
        readOnly: true
        example: '2019-09-12 03:55:57.000000'
      reason:
        description: >-
          A one-line, user-provided reason for the lock.
        type: string
        example: For firmware update
      owner:
        description: >-
          A user-provided self identifier for the lock
        type: string
        example: FUS
      lifetime:
        description:
          The length of time in seconds the component lock should exist before
          it is automatically deleted by HSM.
        type: integer
        example: 90
      xnames:
        description: >-
          An array of XName/ID values for the components managed by the lock.
          These components will have their component flag set to "Locked" upon
          lock creation and set to "OK" upon lock deletion.
        type: array
        items:
          $ref: '#/definitions/XNameRW.1.0.0'
        example:
          - x1c0s1b0n0
          - x1c0s1b0n1
          - x1c0s2b0n0
          - x1c0s2b0n1
    type: object
    required:
      - owner
      - lifetime
      - xnames
  Lock.1.0.0_Patch:
    description: >-
      To update the reason, owner, and/or lifetime fields, a PATCH operation can
      be used.  Omitted fields are not updated.
      NOTE: Updating the lifetime field renews the lock. The new expiration time
      is the lifetime length AFTER the update. The creation timestamp is
      updated.
    properties:
      reason:
        description: >-
          A one-line, user-provided reason for the lock.
        type: string
        example: For firmware update
      owner:
        description: >-
          A user-provided self identifier for the lock (service.JobID)
        type: string
        example: FUS.25
      lifetime:
        description: >-
          The length of time in seconds the component lock should exist before
          it is automatically deleted by HSM.
        type: integer
        example: 90
    type: object
  ##########################################################################
  #
  # Locking v2 structures.
  #
  ##########################################################################

  # Admin
  AdminLock.1.0.0:
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to query.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      Partition:
        description: >-
          Partition name to filter on, as per current /partitions/names
        items:
          type: string
          example: p1
        type: array
      Group:
        description: >-
          Group label to filter on, as per current /groups/labels
        items:
          type: string
          example: group_label
        type: array
      Type:
        description: >-
          Retrieve all components with the given HMS type.
        items:
          type: string
        type: array
      State:
        description: >-
          Retrieve all components with the given HMS state.
        items:
          $ref: '#/definitions/HMSState.1.0.0'
        type: array
      Flag:
        description: >-
          Retrieve all components with the given HMS flag value.
        items:
          $ref: '#/definitions/HMSFlag.1.0.0'
        type: array
      Enabled:
        description: >-
          Retrieve all components with the given enabled status (true or false).
        items:
          type: string
        type: array
      Softwarestatus:
        description: >-
          Retrieve all components with the given software status.
          Software status is a free form string. Matching is case-insensitive.
        items:
          type: string
        type: array
      Role:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS role
        items:
          $ref: '#/definitions/HMSRole.1.0.0'
        type: array
      Subrole:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS subrole
        items:
          $ref: '#/definitions/HMSSubRole.1.0.0'
        type: array
      Subtype:
        description: >-
          Retrieve all components with the given HMS subtype.
        items:
          type: string
        type: array
      Arch:
        description: >-
          Retrieve all components with the given architecture.
        items:
          $ref: '#/definitions/HMSArch.1.0.0'
        type: array
      Class:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS hardware class. Class can be
          River, Mountain, etc.
        items:
          $ref: '#/definitions/HMSClass.1.0.0'
        type: array
      NID:
        description: >-
          Retrieve all components (i.e. one node) with the given integer NID
        items:
          type: string
        type: array
      ProcessingModel:
        type: string
        enum:
          - rigid
          - flexible
        description: Rigid is all or nothing, flexible is best attempt.
    type: object
  AdminReservationRemove.1.0.0:
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to query.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      Partition:
        description: >-
          Partition name to filter on, as per current /partitions/names
        items:
          type: string
          example: p1
        type: array
      Group:
        description: >-
          Group label to filter on, as per current /groups/labels
        items:
          type: string
          example: group_label
        type: array
      Type:
        description: >-
          Retrieve all components with the given HMS type.
        items:
          type: string
        type: array
      State:
        description: >-
          Retrieve all components with the given HMS state.
        items:
          $ref: '#/definitions/HMSState.1.0.0'
        type: array
      Flag:
        description: >-
          Retrieve all components with the given HMS flag value.
        items:
          $ref: '#/definitions/HMSFlag.1.0.0'
        type: array
      Enabled:
        description: >-
          Retrieve all components with the given enabled status (true or false).
        items:
          type: string
        type: array
      Softwarestatus:
        description: >-
          Retrieve all components with the given software status.
          Software status is a free form string. Matching is case-insensitive.
        items:
          type: string
        type: array
      Role:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS role
        items:
          $ref: '#/definitions/HMSRole.1.0.0'
        type: array
      Subrole:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS subrole
        items:
          $ref: '#/definitions/HMSSubRole.1.0.0'
        type: array
      Subtype:
        description: >-
          Retrieve all components with the given HMS subtype.
        items:
          type: string
        type: array
      Arch:
        description: >-
          Retrieve all components with the given architecture.
        items:
          $ref: '#/definitions/HMSArch.1.0.0'
        type: array
      Class:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS hardware class. Class can be
          River, Mountain, etc.
        items:
          $ref: '#/definitions/HMSClass.1.0.0'
        type: array
      NID:
        description: >-
          Retrieve all components (i.e. one node) with the given integer NID
        items:
          type: string
        type: array
      ProcessingModel:
        type: string
        enum:
          - rigid
          - flexible
        description: Rigid is all or nothing, flexible is best attempt.
    type: object
  AdminStatusCheck_Response.1.0.0:
    type: object
    properties:
      Components:
        items:
          $ref: '#/definitions/ComponentStatus.1.0.0'
        type: array
      NotFound:
        type: array
        items:
          type: string
          example: x1000c0s0b0
  AdminReservationCreate_Response.1.0.0:
    type: object
    properties:
      Success:
        items:
          $ref: '#/definitions/XnameKeysNoExpire.1.0.0'
        type: array
      Failure:
        type: array
        items:
          $ref: '#/definitions/FailedXnames.1.0.0'
  AdminReservationCreate.1.0.0:
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to query.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      Partition:
        description: >-
          Partition name to filter on, as per current /partitions/names
        items:
          type: string
          example: p1
        type: array
      Group:
        description: >-
          Group label to filter on, as per current /groups/labels
        items:
          type: string
          example: group_label
        type: array
      Type:
        description: >-
          Retrieve all components with the given HMS type.
        items:
          type: string
        type: array
      State:
        description: >-
          Retrieve all components with the given HMS state.
        items:
          $ref: '#/definitions/HMSState.1.0.0'
        type: array
      Flag:
        description: >-
          Retrieve all components with the given HMS flag value.
        items:
          $ref: '#/definitions/HMSFlag.1.0.0'
        type: array
      Enabled:
        description: >-
          Retrieve all components with the given enabled status (true or false).
        items:
          type: string
        type: array
      Softwarestatus:
        description: >-
          Retrieve all components with the given software status.
          Software status is a free form string. Matching is case-insensitive.
        items:
          type: string
        type: array
      Role:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS role
        items:
          $ref: '#/definitions/HMSRole.1.0.0'
        type: array
      Subrole:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS subrole
        items:
          $ref: '#/definitions/HMSSubRole.1.0.0'
        type: array
      Subtype:
        description: >-
          Retrieve all components with the given HMS subtype.
        items:
          type: string
        type: array
      Arch:
        description: >-
          Retrieve all components with the given architecture.
        items:
          $ref: '#/definitions/HMSArch.1.0.0'
        type: array
      Class:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS hardware class. Class can be
          River, Mountain, etc.
        items:
          $ref: '#/definitions/HMSClass.1.0.0'
        type: array
      NID:
        description: >-
          Retrieve all components (i.e. one node) with the given integer NID
        items:
          type: string
        type: array
      ProcessingModel:
        type: string
        enum:
          - rigid
          - flexible
        description: Rigid is all or nothing, flexible is best attempt.
    type: object
  # Service
  ServiceReservationCreate.1.0.0:
    properties:
      ComponentIDs:
        description: >-
          An array of XName/ID values for the components to query.
        items:
          $ref: '#/definitions/XNameForQuery.1.0.0'
        type: array
      Partition:
        description: >-
          Partition name to filter on, as per current /partitions/names
        items:
          type: string
          example: p1
        type: array
      Group:
        description: >-
          Group label to filter on, as per current /groups/labels
        items:
          type: string
          example: group_label
        type: array
      Type:
        description: >-
          Retrieve all components with the given HMS type.
        items:
          type: string
        type: array
      State:
        description: >-
          Retrieve all components with the given HMS state.
        items:
          $ref: '#/definitions/HMSState.1.0.0'
        type: array
      Flag:
        description: >-
          Retrieve all components with the given HMS flag value.
        items:
          $ref: '#/definitions/HMSFlag.1.0.0'
        type: array
      Enabled:
        description: >-
          Retrieve all components with the given enabled status (true or false).
        items:
          type: string
        type: array
      Softwarestatus:
        description: >-
          Retrieve all components with the given software status.
          Software status is a free form string. Matching is case-insensitive.
        items:
          type: string
        type: array
      Role:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS role
        items:
          $ref: '#/definitions/HMSRole.1.0.0'
        type: array
      Subrole:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS subrole
        items:
          $ref: '#/definitions/HMSSubRole.1.0.0'
        type: array
      Subtype:
        description: >-
          Retrieve all components with the given HMS subtype.
        items:
          type: string
        type: array
      Arch:
        description: >-
          Retrieve all components with the given architecture.
        items:
          $ref: '#/definitions/HMSArch.1.0.0'
        type: array
      Class:
        description: >-
          Retrieve all components (i.e. nodes) with the given HMS hardware class. Class can be
          River, Mountain, etc.
        items:
          $ref: '#/definitions/HMSClass.1.0.0'
        type: array
      NID:
        description: >-
          Retrieve all components (i.e. one node) with the given integer NID
        items:
          type: string
        type: array
      ProcessingModel:
        type: string
        enum:
          - rigid
          - flexible
        description: Rigid is all or nothing, flexible is best attempt.
      ReservationDuration:
        type: integer
        minimum: 1
        maximum: 15
        description: Length of time in minutes for the reservation to be valid for.
        default: 1
        example: 1
    type: object
  ServiceReservationCreate_Response.1.0.0:
    type: object
    properties:
      Success:
        items:
          $ref: '#/definitions/XnameKeys.1.0.0'
        type: array
      Failure:
        type: array
        items:
          $ref: '#/definitions/FailedXnames.1.0.0'
  ServiceReservationCheck_Response.1.0.0:
    type: object
    properties:
      Success:
        items:
          $ref: '#/definitions/XnameKeysDeputyExpire.1.0.0'
        type: array
      Failure:
        type: array
        items:
          $ref: '#/definitions/FailedXnames.1.0.0'

  # Generic
  Xnames:
    type: object
    properties:
      ComponentIDs:
        type: array
        items:
          type: string
  XnameKeysNoExpire.1.0.0:
    type: object
    properties:
      ID:
        type: string
      DeputyKey:
        type: string
        description: The key that can be passed to a delegate.
      ReservationKey:
        type: string
        description: The key that can be used to renew/release the reservation. Should not be delegated or shared.
  XnameKeys.1.0.0:
    type: object
    properties:
      ID:
        type: string
      DeputyKey:
        type: string
        description: The key that can be passed to a delegate.
      ReservationKey:
        type: string
        description: The key that can be used to renew/release the reservation. Should not be delegated or shared.
      ExpirationTime:
        type: string
        format: date-time
  XnameKeysDeputyExpire.1.0.0:
    type: object
    properties:
      ID:
        type: string
      DeputyKey:
        type: string
        description: The key that can be passed to a delegate.
      ExpirationTime:
        type: string
        format: date-time
  XnameWithKey.1.0.0:
    type: object
    properties:
      ID:
        type: string
      Key:
        type: string
  DeputyKeys.1.0.0:
    type: object
    properties:
      DeputyKeys:
        type: array
        items:
          $ref: '#/definitions/XnameWithKey.1.0.0'
  ReservedKeys.1.0.0:
    type: object
    properties:
      ReservationKeys:
        type: array
        items:
          $ref: '#/definitions/XnameWithKey.1.0.0'
      ProcessingModel:
        type: string
        enum:
          - rigid
          - flexible
        description: Rigid is all or nothing, flexible is best attempt.
  ReservedKeysWithRenewal.1.0.0:
    type: object
    properties:
      ReservationKeys:
        type: array
        items:
          $ref: '#/definitions/XnameWithKey.1.0.0'
      ProcessingModel:
        type: string
        enum:
          - rigid
          - flexible
        description: Rigid is all or nothing, flexible is best attempt.
      ReservationDuration:
        type: integer
        minimum: 1
        maximum: 15
        description: Length of time in minutes for the reservation to be valid for.
        default: 1
        example: 1
  Counts.1.0.0:
    type: object
    properties:
      Total:
        type: integer
      Success:
        type: integer
      Failure:
        type: integer
  FailedXnames.1.0.0:
    type: object
    properties:
      ID:
        type: string
      Reason:
        type: string
        enum:
          - NotFound
          - Locked
          - Disabled
          - Reserved
          - ServerError
        description: The key that can be passed to a delegate.
  ComponentStatus.1.0.0:
    type: object
    properties:
      ID:
        type: string
        example: x1001c0s0b0
      Locked:
        type: boolean
        example: false
      Reserved:
        type: boolean
        example: true
      CreatedTime:
        type: string
        format: date-time
      ExpirationTime:
        type: string
        format: date-time
      ReservationDisabled:
        type: boolean
        example: false
  XnameResponse_1.0.0:
    description: >-
      This is a simple CAPMC-like response, intended mainly for
      non-error messages.  For client errors, we now use RFC7807 responses.
    type: object
    required:
      - code
      - message
    properties:
      Counts:
        $ref: '#/definitions/Counts.1.0.0'
      Success:
        $ref: '#/definitions/Xnames'
      Failure:
        type: array
        items:
          $ref: '#/definitions/FailedXnames.1.0.0'


  ##########################################################################
  #
  # Power Map structures - Component to power supply mapping.
  #
  ##########################################################################
  PowerMap.1.0.0_PowerMap:
    description: >-
      PowerMaps used to show which components are powered by which power
      supplies.
    properties:
      id:
        description: >-
          The component this PowerMap is for.
        $ref: '#/definitions/XName.1.0.0'
      poweredBy:
        description: >-
          A list of components that supply this component with power.
        items:
          $ref: '#/definitions/XNameRW.1.0.0'
        type: array
    required:
      - poweredBy
    type: object
    example:
      id: x0c0s1b0n0
      poweredBy:
        - x0m0p0j10
        - x0m0p0j11
  PowerMap.1.0.0_PostPowerMap:
    description: >-
      PowerMaps used to show which components are powered by which power
      supplies.
    properties:
      id:
        description: >-
          The component this PowerMap is for.
        $ref: '#/definitions/XNameRW.1.0.0'
      poweredBy:
        description: >-
          A list of components that supply this component with power.
        items:
          $ref: '#/definitions/XNameRW.1.0.0'
        type: array
    required:
      - id
      - poweredBy
    type: object
    example:
      id: x0c0s1b0n0
      poweredBy:
        - x0m0p0j10
        - x0m0p0j11
  PowerMapArray_PowerMapArray:
    description: >-
      This is an array of PowerMap objects. This is the result of
      GET-ing the PowerMaps collection, or can be used to populate or
      update it as input provided via POST.
    items:
      $ref: '#/definitions/PowerMap.1.0.0_PostPowerMap'
    type: array
  ##########################################################################
  #
  # Service Values Response Structures
  #
  ##########################################################################
  Values.1.0.0_Values:
    description: >-
      This is a list of parameters and their valid values. These
      values are valid for various parameters in this API.
    allOf:
      - $ref: '#/definitions/Values.1.0.0_ArchArray'
      - $ref: '#/definitions/Values.1.0.0_ClassArray'
      - $ref: '#/definitions/Values.1.0.0_FlagArray'
      - $ref: '#/definitions/Values.1.0.0_NetTypeArray'
      - $ref: '#/definitions/Values.1.0.0_RoleArray'
      - $ref: '#/definitions/Values.1.0.0_SubRoleArray'
      - $ref: '#/definitions/Values.1.0.0_StateArray'
      - $ref: '#/definitions/Values.1.0.0_TypeArray'
  Values.1.0.0_ArchArray:
    description: >-
      This is an array of valid HMSArch values. These values are valid for
      any 'arch' parameter in this API.
    properties:
      Arch:
        items:
          $ref: '#/definitions/HMSArch.1.0.0'
        type: array
  Values.1.0.0_ClassArray:
    description: >-
      This is an array of valid HMSClass values. These values are valid for
      any 'class' parameter in this API.
    properties:
      Class:
        items:
          $ref: '#/definitions/HMSClass.1.0.0'
        type: array
  Values.1.0.0_FlagArray:
    description: >-
      This is an array of valid HMSFlag values. These values are valid for
      any 'flag' parameter in this API.
    properties:
      Flag:
        items:
          $ref: '#/definitions/HMSFlag.1.0.0'
        type: array
  Values.1.0.0_NetTypeArray:
    description: >-
      This is an array of valid NetType values. These values are valid for
      any 'nettype' parameter in this API.
    properties:
      NetType:
        items:
          $ref: '#/definitions/NetType.1.0.0'
        type: array
  Values.1.0.0_RoleArray:
    description: >-
      This is an array of valid HMSRole values. These values are valid for
      any 'role' parameter in this API.
    properties:
      Role:
        items:
          $ref: '#/definitions/HMSRole.1.0.0'
        type: array
  Values.1.0.0_SubRoleArray:
    description: >-
      This is an array of valid HMSSubRole values. These values are valid for
      any 'subrole' parameter in this API.
    properties:
      SubRole:
        items:
          $ref: '#/definitions/HMSSubRole.1.0.0'
        type: array
  Values.1.0.0_StateArray:
    description: >-
      This is an array of valid HMSState values. These values are valid for
      any 'state' parameter in this API.
    properties:
      State:
        items:
          $ref: '#/definitions/HMSState.1.0.0'
        type: array
  Values.1.0.0_TypeArray:
    description: >-
      This is an array of valid HMSType values. These values are valid for
      any 'type' parameter in this API.
    properties:
      Type:
        items:
          $ref: '#/definitions/HMSType.1.0.0'
        type: array
  ##########################################################################
  #
  # General definitions
  #
  ##########################################################################
  Actions_1.0.0_ChassisActions:
    description: >-
      This is a pass-through field from Redfish that lists the available
      actions for a Chassis component (if any were found, else if it
      be omitted entirely).
    properties:
      '#Chassis.Reset':
        properties:
          "ResetType@Redfish.AllowableValues":
            description: List of allowable 'reset' Redfish Action types
            items:
              type: string
            type: array
            example: [ "On", "ForceOff" ]
          target:
            description: target URI for Redfish Action
            type: string
            example: /redfish/v1/Chassis/RackEnclosure/Actions/Chassis.Reset
        type: object
    type: object
    readOnly: true
  Actions_1.0.0_ComputerSystemActions:
    description: >-
      This is a pass-through field from Redfish that lists the available
      actions for a System component (if any were found, else if it
      be omitted entirely).
    properties:
      '#ComputerSystem.Reset':
        properties:
          "ResetType@Redfish.AllowableValues":
            description: List of allowable 'reset' Redfish Action types
            items:
              type: string
            type: array
            example: [ "On", "ForceOff", "ForceRestart" ]
          target:
            description: target URI for Redfish Action
            type: string
            example: /redfish/v1/Systems/System.1/Actions/ComputerSystem.Reset
        type: object
    type: object
    readOnly: true
  Actions_1.0.0_ManagerActions:
    description: >-
      This is a pass-through field from Redfish that lists the available
      actions for a Manager component (if any were found, else if it
      be omitted entirely).
    properties:
      '#Manager.Reset':
        properties:
          "ResetType@Redfish.AllowableValues":
            description: List of allowable 'reset' Redfish Action types
            items:
              type: string
            type: array
            example: [ "ForceRestart" ]
          target:
            description: target URI for Redfish Action
            type: string
            example: /redfish/v1/Managers/BMC/Actions/Manager.Reset
        type: object
    type: object
    readOnly: true
  Actions_1.0.0_OutletActions:
    description: >-
      This is a pass-through field from Redfish that lists the available
      actions for a Outlet component (if any were found, else if it
      be omitted entirely).
    properties:
      '#Outlet.PowerControl':
        properties:
          "PowerControl@Redfish.AllowableValues":
            description: List of allowable PowerControl Redfish Action types
            items:
              type: string
            type: array
            example: [ "On" ]
          target:
            description: target URI for Redfish Action
            type: string
            example:
              "/redfish/v1/PowerEquipment/RackPDUs/1/Outlets/A1\
              /Outlet.PowerControl"
        type: object
      '#Outlet.ResetBreaker':
        properties:
          "ResetBreaker@Redfish.AllowableValues":
            description: List of allowable ResetBreaker Redfish Action types
            items:
              type: string
            type: array
            example: [ "Off" ]
          target:
            description: target URI for Redfish Action
            type: string
            example:
              "/redfish/v1/PowerEquipment/RackPDUs/1/Outlets/A1\
              /Outlet.ResetBreaker"
        type: object
      '#Outlet.ResetStatistics':
        properties:
          "ResetStatistics@Redfish.AllowableValues":
            description:
              List of allowable ResetStatistics Redfish Action types
            items:
              type: string
            type: array
          target:
            description: target URI for Redfish Action
            type: string
            example:
              "/redfish/v1/PowerEquipment/RackPDUs/1/Outlets/A1\
              /Outlet.ResetStatistics"
        type: object
    type: object
    readOnly: true
  Message_1.0.0_ExtendedInfo:
    # TODO: Generalize this so we use the same messages/errors throughout
    # HMS and via outside interfaces such as CMBus.  They should be ReSTy
    # etc.
    description: >-
      TODO This is a general message scheme meant to replace and generalize
      old HSS error codes.  Largely TBD placeholder.
    properties:
      ID:
        description: Formal, machine readable, name for message.
        type: string
      Message:
        description: Human readable description of message.
        type: string
      Flag:
        # OK, Warning, or Alert - Indicates message, warning, or error.
        $ref: '#/definitions/HMSFlag.1.0.0'
    type: object
  EthernetNICInfo_1.0.0:
    description: >-
      This is a summary info for one ordinary Ethernet NIC (i.e. not on HSN).
      These fields are all passed through from a Redfish EthernetInterface
      object.
    properties:
      RedfishId:
        description: The Redfish 'Id' field for the interface.
        type: string
        readOnly: true
        example: 1
      "@odata.id":
        description: >-
          This is the relative path to the EthernetInterface via the
          Redfish entry point. (i.e. the @odata.id field).
        type: string
        readOnly: true
        example:
          /redfish/v1/{Chassis/Managers/Systems}/{Id}/EthernetInterfaces/1
      Description:
        description: The Redfish 'Description' field for the interface.
        type: string
        readOnly: true
        example: Integrated NIC 1
      FQDN:
        description: >-
          The Redfish 'FQDN' of the interface.  This may or may not be set
          and is not necessarily the same as the FQDN of the ComponentEndpoint.
        type: string
        readOnly: true
      Hostname:
        description: >-
          The Redfish 'Hostname field' for the interface.  This may or may
          not be set and is not necessarily the same as the Hostname of the
          ComponentEndpoint.
        type: string
        readOnly: true
      InterfaceEnabled:
        description: >-
          The Redfish 'InterfaceEnabled' field if provided by Redfish, else
          it will be omitted.
        type: boolean
        readOnly: true
      MACAddress:
        description: >-
          The Redfish 'MacAddress' field for the interface.  This should
          normally be set but is not necessarily the same as the MacAddr of
          the ComponentEndpoint (as there may be multiple interfaces).
        pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
        type: string
        example: ae:12:ce:7a:aa:99
      PermanentMACAddress:
        description: >-
          The Redfish 'PermanentMacAddress' field for the interface. This may
          or may not be set and is not necessarily the same as the MacAddr
          of the ComponentEndpoint (as there may be multiple interfaces).
        pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
        type: string
        example: ae:12:ce:7a:aa:99
    type: object
  PowerControl_1.0.0:
    description: >-
      This is the power control info for the node. These fields are all passed
      through from a Redfish PowerControl object.
    properties:
      Name:
        description: Name of the power control interface.
        type: string
        readOnly: true
        example: Node Power Control
      PowerCapacityWatts:
        description: >-
          The total amount of power available to the chassis for allocation.
          This may the power supply capacity, or power budget assigned to the
          chassis from an up-stream chassis.
        type: number
        readOnly: true
        example: 900
      OEM:
        description: >-
          This is the manufacturer/provider specific extension moniker used to
          divide the Oem object into sections.
        type: object
        readOnly: true
        properties:
          Cray:
            description: >-
              This is the manufacturer/provider specific extension moniker used to
              divide the Oem object into sections.
            type: object
            readOnly: true
            properties:
              PowerIdleWatts:
                description: >-
                  The total amount of power available to the chassis for allocation.
                  This may the power supply capacity, or power budget assigned to the
                  chassis from an up-stream chassis.
                type: number
                readOnly: true
                example: 900
              PowerLimit:
                description: >-
                  Power limit status and configuration information for this chassis.
                type: object
                readOnly: true
                properties:
                  Min:
                    description: >-
                      The minimum allowed value for a PowerLimit's LimitInWatts. This is
                      the estimated lowest value (most restrictive) power cap that can be
                      achieved by the associated PowerControl resource.
                    type: number
                    readOnly: true
                    example: 350
                  Max:
                    description: >-
                      The maximum allowed value for a PowerLimit's LimitInWatts. This is
                      the estimated highest value (least restrictive) power cap that can
                      be achieved by the associated PowerControl resource. Note that the
                      actual maximum allowed LimitInWatts is the lesser of PowerLimit.Max
                      or PowerControl.PowerAllocatedWatts.
                    type: number
                    readOnly: true
                    example: 850
              PowerResetWatts:
                description: >-
                  Typical power consumption during ComputerSystem.ResetAction "On" operation.
                type: number
                readOnly: true
                example: 250
      RelatedItem:
        description: >-
          The ID(s) of the resources associated with this Power Limit.
        type: array
        items:
          type: object
          properties:
            "@odata.id":
              description: >-
                An ID of the resource associated with this Power Limit.
              type: string
              readOnly: true
              example: /redfish/v1/Chassis/Node0/Power#/PowerControl/Accelerator0
        readOnly: true
    type: object
  FRUId.1.0.0:
    description: >-
      Uniquely identifies a piece of hardware by a serial-number like
      identifier that is globally unique within the hardware inventory,
    type: string
    readOnly: true
  HMSArch.1.0.0:
    description: >-
      This is the basic architecture of the component so the proper software
      can be selected and so on.
    enum:
      - X86
      - ARM
      - Other
    type: string
    example: X86
  HMSClass.1.0.0:
    description: >-
      This is the HSM hardware class of the component.
    enum:
      - River
      - Mountain
      - Hill
    type: string
    example: River
  HMSFlag.1.0.0:
    description: >-
      This property indicates the state flag of the underlying component.
    enum:
      - OK
      - Warning
      - Alert
      - Locked
    type: string
    example: OK
  HMSRole.1.0.0:
    description: >-
      This is a possibly reconfigurable role for a component, especially a node.
      Valid values are:

      - Compute

      - Service

      - System

      - Application

      - Storage

      - Management

      Additional valid values may be added via configuration file.
      See the results of 'GET /service/values/role' for the complete list.
    type: string
    example: Compute
  HMSSubRole.1.0.0:
    description: >-
      This is a possibly reconfigurable subrole for a component, especially a node.
      Valid values are:

      - Master

      - Worker

      - Storage

      Additional valid values may be added via configuration file.
      See the results of 'GET /service/values/subrole' for the complete list.
    type: string
    example: Worker
  HMSState.1.0.0:
    description: >-
      This property indicates the state of the underlying component.
    enum:
      - Unknown
      - Empty
      - Populated
      - "Off"
      - "On"
      - Standby
      - Halt
      - Ready
    type: string
    example: Ready
  HMSType.1.0.0:
    description: >-
      This is the HMS component type category.  It has a particular xname
      format and represents the kind of component that can occupy that
      location.  Not to be confused with RedfishType which is Redfish
      specific and only used when providing Redfish endpoint data from
      discovery.
    enum:
      - CDU
      - CabinetCDU
      - CabinetPDU
      - CabinetPDUOutlet
      - CabinetPDUPowerConnector
      - CabinetPDUController
      - Cabinet
      - Chassis
      - ChassisBMC
      - CMMRectifier
      - CMMFpga
      - CEC
      - ComputeModule
      - RouterModule
      - NodeBMC
      - NodeEnclosure
      - NodeEnclosurePowerSupply
      - HSNBoard
      - Node
      - Processor
      - Drive
      - StorageGroup
      - NodeNIC
      - Memory
      - NodeAccel
      - NodeAccelRiser
      - NodeFpga
      - HSNAsic
      - RouterFpga
      - RouterBMC
      - HSNLink
      - HSNConnector
      - INVALID
    type: string
    readOnly: true
    example: Node
  NetType.1.0.0:
    description: >-
      This is the type of high speed network the component is connected to,
      if it is an applicable component type and the interface is present, or
      the type of the system HSN.
    enum:
      - Sling
      - Infiniband
      - Ethernet
      - OEM
      - None
    type: string
    example: Sling
  NIDRange.1.0.0:
    description: >-
      NID range values to query matching components, e.g. "0-24".  Supply
      only a single range, more can be given in an array of these values.
    type: string
    example: "0-24"
  NICAddrs.1.0.0:
    description: A collection of HSN NIC addresses in string form.
    items:
      type: string
    type: array
    example: [ 0x234e12, 0xaf3f12 ]
  OdataID.1.0.0:
    description: >-
      This is the path (relative to a Redfish endpoint) of a particular
      Redfish resource, e.g. /Redfish/v1/Systems/System.Embedded.1
    type: string
    readOnly: true
    example: /redfish/v1/Systems/System.Embedded.1
  Problem7807:
    description: >-
      RFC 7807 compliant error payload.  All fields are optional except
      the 'type' field.
    type: object
    required:
      - type
    properties:
      type:
        type: string
        example: about:blank
      detail:
        type: string
        example: Detail about this specific problem occurrence. See RFC7807
      instance:
        type: string
        example: ""
      status:
        type: number
        format: int32
        example: 400
      title:
        type: string
        example: Description of HTTP Status code, e.g. 400
  RedfishType.1.0.0:
    description: >-
      This is the Redfish object type, not to be confused with the HMS
      component type.
    enum:
      - Chassis
      - ComputerSystem
      - EthernetInterface
      - Manager
      - Memory
      - Processor
      - Drive
      - PowerSupply
      - AccountService
      - EventService
      - LogService
      - SessionService
      - TaskService
      - UpdateService
    type: string
    readOnly: true
    example: ComputerSystem
  RedfishSubtype.1.0.0:
    description: >-
      This is the type corresponding to the Redfish object type, i.e. the
      ChassisType field, SystemType, ManagerType fields.  We only use
      these three types to create ComponentEndpoints for now.
    enum:
      - Rack
      - Blade
      - Enclosure
      - StandAlone
      - RackMount
      - Card
      - Cartridge
      - Row
      - Pod
      - Expansion
      - Sidecar
      - Zone
      - Sled
      - Shelf
      - Drawer
      - Module
      - Component
      - Other
      - Physical
      - Virtual
      - OS
      - PhysicallyPartitioned
      - VirtuallyPartitioned
      - ManagementController
      - EnclosureManager
      - BMC
      - RackManager
      - AuxiliaryController
    type: string
    readOnly: true
    example: Physical
  ResourceName:
    description: >-
      Acceptable format for certain user-requested string identifiers.
    type: string
    pattern: '^[0-9a-f_\-.]{1,}$'
    example: resource_name1
  ResourceURI.1.0.0:
    description: >-
      A ResourceURI is like an odata.id, it provides a path to a resource
      from the API root, such that when a GET is performed, the corresponding
      object is returned.  It does not imply other odata functionality.
    type: object
    properties:
      ResourceURI:
        type: string
        example: /hsm/v2/API_TYPE/OBJECT_TYPE/OBJECT_ID
  ResourceURICollection_ResourceURICollection:
    description: >-
      A ResourceURI is like an odata.id, it provides a path to a resource
      from the API root, such that when a GET is performed, the corresponding
      object is returned.  It does not imply other odata functionality.  This
      is a collection of such IDs, of a single base type, grouped together
      for some purpose.
    properties:
      Name:
        description: >-
          Should describe the collection, though the type of resources
          the links correspond to should also be inferred from the context
          in which the collection was obtained.
        type: string
        readOnly: true
        example: (Type of Object) Collection
      Members:
        description: An array of ResourceIds.
        items:
          $ref: '#/definitions/ResourceURI.1.0.0'
        type: array
        readOnly: true
      MemberCount:
        description: Number of ResourceURIs in the collection
        type: number
        format: int32
        readOnly: true
    type: object
  Response_1.0.0:
    description: >-
      This is a simple CAPMC-like response, intended mainly for
      non-error messages.  For client errors, we now use RFC7807 responses.
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string
  UUID.1.0.0:
    description: >-
      This is a universally unique identifier i.e. UUID in the canonical
      format provided by Redfish to identify endpoints and services.
      If this is the UUID of a RedfishEndpoint, it should be the UUID
      broadcast by SSDP, if applicable.
    pattern: '([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})'
    type: string
    readOnly: true
    example: bf9362ad-b29c-40ed-9881-18a5dba3a26b
  XName.1.0.0:
    description: >-
      Uniquely identifies the component by its physical location (xname).
      There are formatting rules depending on the matching HMSType.
    type: string
    example: x0c0s0b0n0
    readOnly: true
  XNameRW.1.0.0:
    description: >-
      Uniquely identifies the component by its physical location (xname).
      There are formatting rules depending on the matching HMSType.
      This is the non-readOnly version for writable component lists.
    type: string
    example: x0c0s1b0n0
  XNameRFEndpoint.1.0.0:
    description: >-
      Uniquely identifies the component by its physical location (xname).
      This is identical to a normal XName, but specifies a case where
      a BMC or other controller type is expected.
    type: string
    example: x0c0s0b0
  XNameForQuery.1.0.0:
    description: >-
      Uniquely identifies the component by its physical location (xname).
      There are formatting rules depending on the matching HMSType.
      This is identical to XName except that it is not read-only which
      would prevent it from being a required parameter in query
      operations in Swagger 2.0.  These operations do not actually write
      the XName, merely using at a selector to do bulk writes of multiple
      records, so this is fine.
    type: string
    example: x0c0s0b0n0
  XNamePartition.1.0.0:
    description: >-
      This is an ordinary xname, but one where only a partition (hard:soft)
      or the system alias (s0) will be expected as valid input.
    type: string
    example: p1.2
  XNameCompOrPartition.1.0.0:
    description: >-
      This is an ordinary xname, but one where only a partition (hard:soft)
      or the system alias (s0) will be expected as valid input, or else
      a parent component.
    type: string
    example: s0
parameters:
  compIDParam:
    name: id
    in: query
    type: string
    #TODO: Define these kind of parameters as arrays with
    #      collectionFormat=multi once craycli can handle it correctly.
    # type: array
    # items:
      # type: string
    # collectionFormat: multi
    description: >-
      Filter the results based on xname ID(s). Can be specified multiple times
      for selecting entries with multiple specific xnames.
  compTypeParam:
    name: type
    in: query
    type: string
    description: >-
      Filter the results based on HMS type like Node, NodeEnclosure, NodeBMC etc.
      Can be specified multiple times for selecting entries of multiple types.
    enum:
      - CDU
      - CabinetCDU
      - CabinetPDU
      - CabinetPDUOutlet
      - CabinetPDUPowerConnector
      - CabinetPDUController
      - Cabinet
      - Chassis
      - ChassisBMC
      - CMMRectifier
      - CMMFpga
      - CEC
      - ComputeModule
      - RouterModule
      - NodeBMC
      - NodeEnclosure
      - NodeEnclosurePowerSupply
      - HSNBoard
      - Node
      - Processor
      - Drive
      - StorageGroup
      - NodeNIC
      - Memory
      - NodeAccel
      - NodeAccelRiser
      - NodeFpga
      - HSNAsic
      - RouterFpga
      - RouterBMC
      - HSNLink
      - HSNConnector
      - INVALID
  compStateParam:
    name: state
    in: query
    type: string
    description: >-
      Filter the results based on HMS state like Ready, On etc.
      Can be specified multiple times for selecting entries in different states.
    enum:
      - Unknown
      - Empty
      - Populated
      - "Off"
      - "On"
      - Standby
      - Halt
      - Ready
  compFlagParam:
    name: flag
    in: query
    type: string
    description: >-
      Filter the results based on HMS flag value like OK, Alert etc.
      Can be specified multiple times for selecting entries with different flags.
    enum:
      - OK
      - Warning
      - Alert
      - Locked
      - Unknown
  compRoleParam:
    name: role
    in: query
    type: string
    description: >-
      Filter the results based on HMS role. Can be specified multiple
      times for selecting entries with different roles.
      Valid values are:

      - Compute

      - Service

      - System

      - Application

      - Storage

      - Management

      Additional valid values may be added via configuration file.
      See the results of 'GET /service/values/role' for the complete list.
  compSubroleParam:
    name: subrole
    in: query
    type: string
    description: >-
      Filter the results based on HMS subrole. Can be specified multiple
      times for selecting entries with different subroles.
      Valid values are:

      - Master

      - Worker

      - Storage

      Additional valid values may be added via configuration file.
      See the results of 'GET /service/values/subrole' for the complete list.
  compEnabledParam:
    name: enabled
    in: query
    type: string
    description: >-
      Filter the results based on enabled status (true or false).
  compSoftwareStatusParam:
    name: softwarestatus
    in: query
    type: string
    description: >-
      Filter the results based on software status. Software status is a free form string.
      Matching is case-insensitive. Can be specified multiple times for selecting entries
      with different software statuses.
  compSubtypeParam:
    name: subtype
    in: query
    type: string
    description: >-
      Filter the results based on HMS subtype. Can be specified multiple times for selecting
      entries with different subtypes.
  compArchParam:
    name: arch
    in: query
    type: string
    description: >-
      Filter the results based on architecture. Can be specified multiple times for
      selecting components with different architectures.
    enum:
      - X86
      - ARM
      - Other
      - Unknown
  compClassParam:
    name: class
    in: query
    type: string
    description: >-
      Filter the results based on HMS hardware class. Can be specified multiple times for
      selecting entries with different classes.
    enum:
      - River
      - Mountain
      - Hill
  compNIDParam:
    name: nid
    in: query
    type: string
    description: >-
      Filter the results based on NID. Can be specified multiple times for
      selecting entries with multiple specific NIDs.
  compNIDStartParam:
    name: nid_start
    in: query
    type: string
    description: >-
      Filter the results based on NIDs equal to or greater than the provided integer.
  compNIDEndParam:
    name: nid_end
    in: query
    type: string
    description: >-
      Filter the results based on NIDs less than or equal to the provided integer.
  compPartitionParam:
    name: partition
    in: query
    type: string
    description: >-
      Restrict search to the given partition (p#.#). One partition can be
      combined with at most one group argument which will be treated
      as a logical AND. NULL will return components in NO partition.
  compGroupParam:
    name: group
    in: query
    type: string
    description: >-
      Restrict search to the given group label. One group can be
      combined with at most one partition argument which will be treated
      as a logical AND. NULL will return components in NO groups.



