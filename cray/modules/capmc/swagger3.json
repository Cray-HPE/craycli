{
    "openapi": "3.0.0",
    "info": {
        "title": "Cray Advanced Platform Monitoring and Control (CAPMC) API",
        "description": "The Cray Advanced Platform Monitoring and Control (CAPMC) API provides remote power monitoring and control to agents running externally to the Cray Systems Management Services.\n\nThese controls enable external software to manage the power state of an entire system and to more intelligently manage systemwide power consumption. The following API calls are provided as a means for third party software to implement power control and management strategies as simple or complex as the site-level requirements demand. The simplest power management strategy may be to simply turn off components which may be idle for a significant time interval and turn them back on when demand increases.\n\nThis implementation of CAPMC uses Redfish APIs to communicate directly with the hardware. Furthermore, all CAPMC power commands should be viewed as **asynchronous** and require the client to check for status after a CAPMC API call returns.",
        "version": "1.2.2"
    },
    "tags": [
        {
            "name": "component control",
            "description": "**Component Status & Off/On Control**\n\nCAPMC component power controls implement a simple interface for powering off or on components (chassis, modules, nodes), and querying component state information using component identifiers known as xnames. These controls enable external software to more intelligently manage systemwide power consumption or configuration parameters."
        },
        {
            "name": "node control",
            "description": "**Node Status & Off/On Control**\n\nCAPMC node power controls implement a simple interface for powering on or off nodes, querying node state information, and querying site-specific service usage rules. These controls enable external software to more intelligently manage systemwide power consumption or configuration parameters. The simplest power management strategy may be to simply turn off compute nodes which may be idle for a significant time interval and turn them back on when demand increases. The following API calls are provided as a means for third party software to implement power management strategies as simple or complex as the site-level requirements demand."
        },
        {
            "name": "group control",
            "description": "**Group Status and On/Off Control**\n\nCAPMC group power controls implement a simple interface for querying component state and controlling the power of components that are part of a predefined group. Component groups are defined in the Hardware State Manager. These controls enable external software to more intelligently manage systemwide power consumption or configuration parameters."
        },
        {
            "name": "power capping",
            "description": "**Node Capabilities & Power Control**\n\nCAPMC power capping controls implement a simple interface for querying component capabilities and manipulation of node or sub-node (accelerator) power constraints. This functionality enables external software to establish an upper bound, or estimate a minimum bound, on the amount of power a system or a select subset of the system may consume. The following API calls are provided as a means for third party software to implement advanced power management strategies."
        },
        {
            "name": "utilities",
            "description": "**Utility Functions**\n\nCAPMC also contains utility functions used to query information such as component name mapping, system partition membership, or a node\\'s role assignment. The client utility may also function in an HTTP pass-through mode, effectively allowing a client to specify custom input payloads not possible using command line arguments alone. This mode of operation offers maximum flexibility while allowing the client to utilize capmc\\'s built in authorization mechanism."
        },
        {
            "name": "node energy",
            "description": "**Node Energy Reporting**\n\nCAPMC energy reporting controls implement a simple interface for querying node energy consumption in various ways. The client may query statistics by application id, job id, or simply use a list of NID numbers and a client specified time window. Types of information returned may include aggregated energy usage on a set of nodes, energy usage per-node, or an energy accumulator point in time snapshot.\n\n**Note**\n\nAPI calls backed by data from the power management database (PMDB), `get_node_energy`, `get_node_energy_stats`, and `get_node_energy_counter`, are subject to a [hysteresis](https://www.dictionary.com/browse/hysteresis) constraint. The hysteresis value is 15 seconds; so all data sets returned from those API calls will be shifted back in time so that the end time is less than the hystersis window. Furthermore, the minimum window of time that may be queried is 15 seconds. Futhermore all aggregation of data over the time dimension will first be aggregated in 15s time windows. These constraints are all to ensure high data quality and to minimize the impact of the hysteresis on API calls.\n\n**Warning**\n\nThe `get_node_energy` and `get_node_energy_stats` API calls are resource intensive. Depending on system size and input parameters, those API calls may require several minutes to complete."
        },
        {
            "name": "system monitor",
            "description": "**System Level Monitoring**\n\nCAPMC system level monitoring controls implement a simple interface for monitoring near real time system level power consumption. Current or historical power data may be selected. This data may be returned in aggregate or constituent form containing information relating to total system or per-cabinet components, respectively. Additionally, a mechanism is provided for a system administrator to convey intent or other operational parameters, such as a maximum system power limit, or unreported static power overhead, to third-parties.\n\n**Note**\n\nAPI calls backed by data from the power management database (PMDB), `get_system_power` and `get_system_power_details`, are subject to a hysteresis constraint. The hysteresis value is 15 seconds; so all data sets returned from those API calls will be shifted back in time so that the end time is less than the hystersis window. Furthermore, the minimum window of time that may be queried is 15 seconds. Futhermore, all aggregation of data over the time dimension will first be aggregated in 15s time windows. These constraints are all to ensure high data quality and to minimize the impact of the hysteresis on API calls."
        },
        {
            "name": "EPO",
            "description": "**Emergency Power Off**\n\nCAPMC EPO controls implement a simple interface for issuing a software driven emergency power off. This causes a hard power off for all components that can have their power directly controlled. This API should not be used for routine power control of the system.\n\n**Note**\n\nEPO is only available at the system, cabinet, and chassis component levels for Mountain hardware. All mountain hardware that shares a cooling group with a component that is EPO'd will also be EPO'd.\n\n**Warning**\n\nManual steps are required to recover from this and all EPOs."
        }
    ],
    "paths": {
        "/get_node_rules": {
            "get": {
                "tags": [
                    "node control"
                ],
                "summary": "Admin defined node rules",
                "description": "The `get_node_rules` API returns hardware (and perhaps site-specific) rules or timing constraints that allow for efficient and effective management of idle node resources. The data returned informs the client of how long `node_on` and `node_off` operations are expected to take, the minimum amount of time nodes should be left off to save energy, and limits on the number of nodes that should be turned on or off at once. Default rules are supplied where appropriate.\n\nOther values such as the maximum node counts for `node_on` or `node_off` and the maximum amount of time a node should remain off after a power down are left unset. The values are not strictly enforced by Cray system management software. They are meant to provide guidelines for authorized clients in their use of the CAPMC service.",
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "latency_node_off": {
                                            "description": "Approximate time, in seconds, in which a node is expected to perform a clean shutdown and power off",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "latency_node_on": {
                                            "description": "Approximate time, in seconds, in which a node is expected to perform a warm bounce and boot into a ready state",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "latency_node_reinit": {
                                            "description": "Approximate time, in seconds, in which a node is expected to perform a clean shutdown, power off, warm bounce, and boot into a ready state",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max_off_req_count": {
                                            "description": "Maximum number of nodes which may be powered off at once -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max_off_time": {
                                            "description": "Maximum time, in seconds, in which a node may be in the powered off state. -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max_on_req_count": {
                                            "description": "Maximum number of nodes which may be powered on and booted at once. -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max_reinit_req_count": {
                                            "description": "Maximum number of nodes which may be shutdown, powered off, powered on, and rebooted at once. -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "min_off_time": {
                                            "description": "Minimum time, in seconds, in which a node must remain in the powered off state after a shutdown and power off operation -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "latency_node_off": 60,
                                        "latency_node_on": 600,
                                        "latency_node_reinit": 760,
                                        "max_off_req_count": -1,
                                        "max_off_time": -1,
                                        "max_on_req_count": -1,
                                        "max_reinit_req_count": -1,
                                        "min_off_time": 900
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "latency_node_off",
                                        "latency_node_on",
                                        "latency_node_reinit",
                                        "max_off_req_count",
                                        "max_off_time",
                                        "max_on_req_count",
                                        "max_reinit_req_count",
                                        "min_off_time"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "node control"
                ],
                "summary": "Return admin defined node rules",
                "description": "`get_node_rules` informs third party software about hardware (and perhaps site-specific) rules or timing constraints that allow for efficient and effective management of idle node resources. The data returned informs the client of how long `node_on` and `node_off` operations are expected to take, the minimum amount of time nodes should be left off to save energy, and limits on the number of nodes that should be turned on or off at once. Default rules are supplied where appropriate.\n\nOther values such as the maximum node counts for `node_on` or `node_off` and the maximum amount of time a node should remain off after a power down are left unset. The values are not strictly enforced by Cray system management software. They are meant to provide guidelines for authorized clients in their use of the CAPMC service.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "latency_node_off": {
                                            "description": "Approximate time, in seconds, in which a node is expected to perform a clean shutdown and power off",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "latency_node_on": {
                                            "description": "Approximate time, in seconds, in which a node is expected to perform a warm bounce and boot into a ready state",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "latency_node_reinit": {
                                            "description": "Approximate time, in seconds, in which a node is expected to perform a clean shutdown, power off, warm bounce, and boot into a ready state",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max_off_req_count": {
                                            "description": "Maximum number of nodes which may be powered off at once -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max_off_time": {
                                            "description": "Maximum time, in seconds, in which a node may be in the powered off state. -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max_on_req_count": {
                                            "description": "Maximum number of nodes which may be powered on and booted at once. -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max_reinit_req_count": {
                                            "description": "Maximum number of nodes which may be shutdown, powered off, powered on, and rebooted at once. -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "min_off_time": {
                                            "description": "Minimum time, in seconds, in which a node must remain in the powered off state after a shutdown and power off operation -1 indicates no limit",
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "latency_node_off": 60,
                                        "latency_node_on": 600,
                                        "latency_node_reinit": 760,
                                        "max_off_req_count": -1,
                                        "max_off_time": -1,
                                        "max_on_req_count": -1,
                                        "max_reinit_req_count": -1,
                                        "min_off_time": 900
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "latency_node_off",
                                        "latency_node_on",
                                        "latency_node_reinit",
                                        "max_off_req_count",
                                        "max_off_time",
                                        "max_on_req_count",
                                        "max_reinit_req_count",
                                        "min_off_time"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_node_status": {
            "post": {
                "tags": [
                    "node control"
                ],
                "summary": "Return node status",
                "description": "The `get_node_status` API returns componet state for all nodes or a subset of nodes as specified by a nid list and/or state filter. This status API is intended, but not limited, to be used in conjunction with operations which may modify node component state, such as `node_on` or `node_off`.\n\nBy default, the status returned from this API reports the component states as reported by the Hardware State Manager (HSM). An optional `source` parameter may be passed in the request body to report the hardware states as reported by Redfish (**on** or **off**).\n\nThe `get_node_status` API does not report **empty** components.\n\n**Filters**\n\nFilters for a status query may be supplied as a pipe-separated (|) list surrounded with double quotes, e.g. \"filter1|filter2|filter3\". Valid filters are: `show_all`, `show_off`, `show_on`, `show_halt`, `show_standby`, `show_ready`, and `show_disabled`. Valid flag filters are `show_alert`, `show_resvd`, and `show_warn`. Status and flag filters may be intermixed freely. The `show_all` filter overrides any other status or flag filters and is the default.\n\n**Notice**\n\nThe hardware management system no longer supports a \"diag\" state, as such the `show_diag` filter is considered deprecated. Specifying only the `show_diag` filter will not return any results.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "filter": {
                                        "description": "Option, pipe concatenated (|) list of filter strings, e.g. \"filter1|filter2|filter3\". Valid status filters are `show_all`, `show_disabled`, `show_halt`, `show_off`, `show_on`, `show_ready`, and `show_standby`. Valid flag filters are `show_alert`, `show_resvd`, and `show_warn`. Status and flag filters may be intermixed freely. If omitted, the default is `show_all`.",
                                        "type": "string"
                                    },
                                    "nids": {
                                        "description": "User specified list, or empty array for all NIDs. This list must not contain invalid or duplicate NID numbers. If invalid NID numbers are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "source": {
                                        "description": "A string indicating the source for node status. Valid sources are `HSM` (or its aliases `HMS`, `SM`, `SMD`, or `Software`) and `Redfish` (or its alias `Hardware`). The default, when unspecified, is to use the Hardware State Manager (HSM) as the source for all status. The Hardware Management System (HMS) returns the largest set of possible status. A Redfish hardware source can *only* report \"off\" and \"on\" status for nodes. Source strings are normalized to all lower case so `HSM` or `hsm` are both valid.",
                                        "type": "string"
                                    }
                                },
                                "example": {
                                    "filter": "show_on|show_ready|show_disabled",
                                    "nids": [
                                        40,
                                        41,
                                        42,
                                        43
                                    ]
                                }
                            }
                        }
                    },
                    "description": "A JSON object to get power status for selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "disabled": {
                                            "description": "Optional, list of disabled NIDs. Component is physically installed, but ignored by system management software. The hardware management system does not treat disabled as a separate state and as such disabled does not indicate the anything about the hardware or software state of a node.",
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "halt": {
                                            "description": "Optional, list of halted NIDs. Operating system has shut down. Hardware has not yet powered off.",
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "on": {
                                            "description": "Optional, list of powered on NIDs. Power is on and BIOS has initialized all hardware. The operating system may or may not have booted or be ready. A node must send heartbeats to transition from on state.",
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "off": {
                                            "description": "Optional, list of powered off NIDs.",
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "ready": {
                                            "description": "Optional, list of booted NIDs. Operating system is fully booted and node is sending heartbeats.",
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "standby": {
                                            "description": "Optional, list of powered on, missed heartbeat NIDs. The hardware management system has not received a heartbeat recently for a node where the operating system was fully booted and previously sending heartbeats. Node power is still on. The node could be transitioning to off, or a software or hardware is problem interfering with heartbeat transmission or reception.",
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "flags": {
                                            "type": "object",
                                            "properties": {
                                                "alert": {
                                                    "description": "Optional, list of NIDs with alert flag set. Node not operating as expected. Also state may have changed due to error.",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                    }
                                                },
                                                "resvd": {
                                                    "description": "Optional, list of NIDs with lock flag set. These nodes have ben reserved by another service.",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                    }
                                                },
                                                "warn": {
                                                    "description": "Optional, list of NIDs with warning flag set. These nodes continue to operate but have issues that may require attention.",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "on": [
                                            40,
                                            41
                                        ],
                                        "ready": [
                                            42
                                        ],
                                        "disabled": [
                                            43
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/node_on": {
            "post": {
                "tags": [
                    "node control"
                ],
                "summary": "Power on nodes",
                "description": "The `node_on` API will power **on** a selected list of nodes by NID. Once powered on, these nodes will automatically start to boot with a discovery image or a previously configured image.\n\nThe `node_on` API will return after a power **on** request is attempted to be sent to all of the selected nodes. The return payload should be examined as it may indicate nodes that did not receive the power **on** request due to an error. The API may return immediately on an error contianing a status result indicating any error encountered. The client must determine overall command status by calling the `get_node_status` API after this call returns.\n\nAn optional text message may be provided describing the reason for performing the `node_on` operation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for turning nodes on.",
                                        "type": "string"
                                    },
                                    "nids": {
                                        "description": "User specified list of node NIDs to power on. An empty array is invalid. If invalid NID numbers are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to power on nodes disabling any checks for a graceful power on.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Need more capacity",
                                    "nids": [
                                        40,
                                        41,
                                        42,
                                        43
                                    ],
                                    "force": true
                                },
                                "required": [
                                    "nids"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to power on selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "nids": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "nid": {
                                                        "description": "NID failing power on attempt",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "e": {
                                                        "description": "Non-zero status code for failed request",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "nid"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "nids": [
                                            {
                                                "nid": 40,
                                                "e": -1,
                                                "err_msg": "NodeBMC Communication error"
                                            },
                                            {
                                                "nid": 42,
                                                "e": -1,
                                                "err_msg": "NodeBMC Communication error"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/node_off": {
            "post": {
                "tags": [
                    "node control"
                ],
                "summary": "Power off nodes",
                "description": "The `node_off` API will shutdown and power **off** a selected list of nodes by NID.\n\nThe `node_off` API will return after a power **off** request is attempted to be sent to all of the selected nodes. The return payload should be examined as it may indicate nodes that did not receive the power **off** request due to an error. The API may return immediately on an error contianing a status result indicating any error encountered. The client must determine overall command status by calling the `get_node_status` API after this call returns.\n\nAn optional text message may be provided describing the reason for performing the `node_off` operation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for turning nodes off.",
                                        "type": "string"
                                    },
                                    "nids": {
                                        "description": "User specified list of node NIDs to power off. An empty array is invalid. If invalid NID numbers are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to power off nodes disabling any checks for a graceful power off.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Power save, need less capacity",
                                    "nids": [
                                        40,
                                        41,
                                        42,
                                        43
                                    ],
                                    "force": true
                                },
                                "required": [
                                    "nids"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to power off selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "nids": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "nid": {
                                                        "description": "NID failing power down attempt",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "e": {
                                                        "description": "Non-zero status code for failed request",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "nid"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "nids": [
                                            {
                                                "nid": 40,
                                                "e": -1,
                                                "err_msg": "NodeBMC Communication error"
                                            },
                                            {
                                                "nid": 42,
                                                "e": -1,
                                                "err_msg": "NodeBMC Communication error"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/node_reinit": {
            "post": {
                "tags": [
                    "node control"
                ],
                "summary": "Restart nodes",
                "description": "The `node_reinit` API issues a **restart** or **off-on** sequence to a selected list of nodes by NID. Once restarted, the selected nodes will automatically start to boot with a discovery image or a previously configured image. Not all nodes support a **restart**, in these cases, the API may issue an **off** and then **on** to those components.\n\nThe `node_reinit` API will return after a power **restart** or **off-on** sequence is attempted to be sent to all of the selected components. The return payload should be examined as it may indicate components that did not receive the power request due to an error. The API may return immediately on an error containing a status result indicating any error encountered. The client must determine overall command status by calling the `get_node_status` API after this call returns.\n\nAn optional text message may be provided describing the reason for performing the `node_reinit` operation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for doing a node reinit.",
                                        "type": "string"
                                    },
                                    "nids": {
                                        "description": "User specified list of node NIDs to restart. An empty array is invalid. If invalid NID numbers are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to restart nodes disabling any checks for a graceful restart.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Apply staged node configuration",
                                    "nids": [
                                        40,
                                        41,
                                        42,
                                        43
                                    ],
                                    "force": true
                                }
                            }
                        }
                    },
                    "description": "A JSON object to restart selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "nids": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "nid": {
                                                        "description": "NID failing power restart attempt",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "e": {
                                                        "description": "Non-zero status code for failed request",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "nid"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "nids": [
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "nid": 40
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_node_energy": {
            "post": {
                "tags": [
                    "node energy"
                ],
                "summary": "Return accumulated energy values",
                "description": "The `get_node_energy` API will return accumulated energy values for a set of nodes defined by a job (job_id), application (apid), list of NIDs (nids), or start and end time.\n\nThe input parameters are treated as conditions which are logically ANDed together. If an apid and start/end times are specified, then the values returned will be for the nodes involved in that apid during the interval specified by the start/end times. The start/end time will be adjusted so that no part of the interval is within the hysteresis window.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start_time": {
                                        "description": "Optional, requested energy window sample start time. If omitted, the starting time of the specified *apid* or *jobid* is used.",
                                        "type": "string"
                                    },
                                    "end_time": {
                                        "description": "Optional, requested energy window sample end time. If omitted, the ending time of the specified *apid* or *jobid* is used.",
                                        "type": "string"
                                    },
                                    "nids": {
                                        "description": "Optional, list of NIDs to gather energy values from.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "apid": {
                                        "description": "Optional, PALS application ID. Return statistics applicable to the NID list and application start & end times for the specified PALS id.",
                                        "type": "string"
                                    },
                                    "job_id": {
                                        "description": "Optional, batch scheduler job id. Return statistics applicable to the NID list and application start & end times for the specified batch scheduler job id.",
                                        "type": "string"
                                    }
                                },
                                "example": {
                                    "start_time": "2019-07-10 11:36:32",
                                    "end_time": "2019-07-10 12:36:32",
                                    "nids": [
                                        40,
                                        41
                                    ],
                                    "apid": "831138",
                                    "job_id": "1234321.sdb"
                                }
                            }
                        }
                    },
                    "description": "A JSON object to get node energy for selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates statistics are unavailable",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "nid_count": {
                                            "description": "Number of nodes used in statistics query",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "time": {
                                            "description": "Window width of energy calculation, in seconds",
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "nodes": {
                                            "description": "Object array containing node level energy info, each element represents a single node",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "nid": {
                                                        "description": "NID number owning the returned energy accumulation",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "energy": {
                                                        "description": "Accumulated energy computed over the requested time interval, specified in Joules",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    }
                                                },
                                                "required": [
                                                    "nid",
                                                    "energy"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "nid_count": 2,
                                        "time": 3600,
                                        "nodes": [
                                            {
                                                "nid": 40,
                                                "energy": 42870
                                            },
                                            {
                                                "nid": 41,
                                                "energy": 42750
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "nid_count",
                                        "time",
                                        "nodes"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "[Gateway Timeout](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.5)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Gateway Timeout error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 505,
                                        "err_msg": "Connection timed out."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_node_energy_stats": {
            "post": {
                "tags": [
                    "node energy"
                ],
                "summary": "Return node energy statistics",
                "description": "The `get_node_energy_stats` API returns the energy statistics for a set of nodes defined by a job (job_id), application (apid), list of NIDs (nodes), or start and end time.\n\nThe input parameters are treated as conditions which are logically ANDed together. If an apid and start/end times are specified, then the statistics will be for the nodes involved in that apid during the interval specified by the start/end times. Both a temporal argument (apid, job_id, or start_time and end_time) and a component argument (apid, job_id, or NIDs) are required. The start/end time will be adjusted so that no part of the interval is within the hysteresis window.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start_time": {
                                        "description": "Optional, requested energy window sample start time. If omitted, the starting time of the specified *apid* or *jobid* is used.",
                                        "type": "string"
                                    },
                                    "end_time": {
                                        "description": "Optional, requested energy window sample end time. If omitted, the ending time of the specified *apid* or *jobid* is used.",
                                        "type": "string"
                                    },
                                    "nids": {
                                        "description": "Optional, list of NIDs to use in energy stats query. If omitted, the default is all NIDs matching other parameters.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "apid": {
                                        "description": "Optional, PALS application ID",
                                        "type": "string"
                                    },
                                    "job_id": {
                                        "description": "Optional, batch scheduler job id",
                                        "type": "string"
                                    }
                                },
                                "example": {
                                    "start_time": "2019-07-10 11:36:32",
                                    "end_time": "2019-07-10 12:36:32",
                                    "nids": [
                                        40,
                                        41
                                    ],
                                    "apid": "831138",
                                    "job_id": "1234321.sdb"
                                }
                            }
                        }
                    },
                    "description": "A JSON object to get node energy stats for selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates statistics are unavailable",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "time": {
                                            "description": "Window width of energy statistics calculation, in seconds",
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "nid_count": {
                                            "description": "Number of nodes used in statistics query",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "energy_total": {
                                            "description": "Sum of per node energy, in Joules",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "energy_avg": {
                                            "description": "Per node average energy, in Joules",
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "energy_std": {
                                            "description": "Standard deviation, in Joules",
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "energy_max": {
                                            "description": "Ordered list identifying NID number followed by maximum observed node energy consumption",
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "energy_min": {
                                            "description": "Ordered list identifying NID number followed by minimum observed node energy consumption",
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "time": 3600,
                                        "nid_count": 2,
                                        "energy_total": 150947,
                                        "energy_avg": 50315.666666664,
                                        "energy_std": 8766.3030723,
                                        "energy_max": [
                                            40,
                                            42870
                                        ],
                                        "energy_min": [
                                            41,
                                            42750
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "time",
                                        "nid_count",
                                        "energy_total",
                                        "energy_avg",
                                        "energy_std",
                                        "energy_max",
                                        "energy_min"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "[Gateway Timeout](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.5)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Gateway Timeout error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 505,
                                        "err_msg": "Connection timed out."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_node_energy_counter": {
            "post": {
                "tags": [
                    "node energy"
                ],
                "summary": "Return node energy counters",
                "description": "The `get_node_energy_counter` API returns energy counters for a set of nodes defined by a job (job_id), application (apid), or list of NIDs (nids).\n\nThe parameters *apid*, *jobid*, and *nids* are treated as selectors for the set of nodes to query. If an *apid* or *jobid* are supplied, the running counters for each node associated with the respective id will be returned. If a list of NIDs is supplied, then the counters for the nodes corresponding to the supplied NID list will be returned.\n\nOne and only one of apid, jobid, or NIDs list must be specified. If a time value is specified, then the query will retrieve the energy counters at or very near the specified time (if available, within one second). Otherwise, the most recent energy counter value will be returned, that has occured outside the hysteresis window.\n\nThis API returns a free running energy counter for each of the target NIDs. In order to be meaningful, such as when computing average power or energy consumed over a time interval, multiple calls must be made such that the client can perform calculations based on the difference in returned energy counter values.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "time": {
                                        "description": "Requested energy sample start time. If omitted, the energy point in time will be taken as the most recent available sample in the last 30 seconds on a per node basis.",
                                        "type": "string"
                                    },
                                    "nids": {
                                        "description": "List of NIDs to use in energy counter query. If omitted, the default is all NIDs matching other parameters.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "apid": {
                                        "description": "PALS application ID. Return energy counters applicable to the NID list of the specified batch scheduler job id.",
                                        "type": "string"
                                    },
                                    "job_id": {
                                        "description": "Batch scheduler job id",
                                        "type": "string"
                                    }
                                },
                                "example": {
                                    "time": "2019-07-10 11:36:32",
                                    "nids": [
                                        40,
                                        41
                                    ],
                                    "apid": "831138",
                                    "job_id": "1234321.sdb"
                                }
                            }
                        }
                    },
                    "description": "A JSON object to get the node energy counter for selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates statistics are unavailable",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "nid_count": {
                                            "description": "Number of nodes used in statistics query",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "nodes": {
                                            "description": "Object array containing node level energy info, each element represents a single node",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "nid": {
                                                        "description": "NID number owning the returned energy counter",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "energy_cntr": {
                                                        "description": "Point in time energy accumulator value, specified in Joules",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "time": {
                                                        "description": "Time stamp of returned energy value, includes fractional seconds and timezone offset",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "nid",
                                                    "energy_cntr",
                                                    "time"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "nid_count": 2,
                                        "nodes": [
                                            {
                                                "nid": 40,
                                                "energy_cntr": 14802226,
                                                "time": "2019-07-10 11:36:32"
                                            },
                                            {
                                                "nid": 41,
                                                "energy_cntr": 14798774,
                                                "time": "2019-07-10 11:36:32"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "nid_count"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "[Gateway Timeout](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.5)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Gateway Timeout error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 505,
                                        "err_msg": "Connection timed out."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_xname_status": {
            "post": {
                "tags": [
                    "component control"
                ],
                "summary": "Return component status",
                "description": "The `get_xname_status` API returns component state for the full system or a subset of components as specified by a xname list and/or state filter. This status API is intended, but not limited, to be used in conjunction with operations which may modify component state, such as `xname_on` or `xname_off`.\n\nBy default, the status returned from this API are the hardware states as reported by Redfish (**on** or **off**). An optional `source` parameter may be passed in the request body to report the states defined by the Cray Hardware Management System (HMS) software.\n\nThe `get_xname_status` API does not report **empty** components.\n\n**Filters**\n\nFilters for a status query may be supplied as a pipe-separated (|) list surrounded with double quotes, e.g. \"filter1|filter2|filter3\". Valid filters are: `show_all`, `show_off`, `show_on`, `show_halt`, `show_standby`, `show_ready`, and `show_disabled`. Valid flag filters are `show_alert`, `show_resvd`, and `show_warn`. Status and flag filters may be intermixed freely. The `show_all` filter overrides any other status or flag filters and is the default.\n\n**Notice**\n\nThe hardware management system no longer supports a \"diag\" state, as such the `show_diag` filter is considered deprecated. Specifying only the `show_diag` filter will not return any results.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "filter": {
                                        "description": "Optional, pipe concatenated (|) list of filter strings, e.g. \"filter1|filter2|filter3\". Valid status filters are `show_all`, `show_disabled`, `show_halt`, `show_off`, `show_on`, `show_ready`, and `show_standby`. Valid flag filters are `show_alert`, `show_resvd`, and `show_warn`. Status and flag filters may be intermixed freely. If omitted, the default is `show_all`.",
                                        "type": "string"
                                    },
                                    "source": {
                                        "description": "A string indicating the source for node status. Valid sources are `HSM` (or its aliases `HMS`, `SM`, `SMD`, or `Software`) and `Redfish` (or its alias `Hardware`). The default, when unspecified, is to use Redfish via the appropriate controller as the source for all status. The Hardware Management System (HMS) returns the largest set of possible status. A Redfish hardware source can *only* report **off** and **on** status for components.  Source strings are normalized to all lower case so `HSM` or `hsm` are both valid."
                                    },
                                    "xnames": {
                                        "description": "User specified list of component IDs (xnames) to get the status of. An empty array indicates all components in the system. If invalid xnames are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "filter": "show_ready|show_standby",
                                    "source": "hsm",
                                    "xnames": [
                                        "x0c0s1b0n0",
                                        "x0c1s4b0n0",
                                        "x0c1s6b0n0",
                                        "x0c1s7b0n0",
                                        "x0c0s1b0n1",
                                        "x0c1s4b0n1",
                                        "x0c1s6b0n1",
                                        "x0c1s7b0n1"
                                    ]
                                }
                            }
                        }
                    },
                    "description": "A JSON object to get status for selected components",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "on": {
                                            "description": "Optional, list of powered on components by xname.",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "off": {
                                            "description": "Optional, list of powered off components by xname.",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "disabled": {
                                            "description": "Optional, list of disabled components by xname. The component is physically installed, but ignored by system management software. The hardware management system does not treat disabled as a separate state and as such disabled does not indicate the anything about the hardware or software state of a node.",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "ready": {
                                            "description": "Optional, list of booted components by xname. Operating system is fully booted and sending heartbeats.",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "standby": {
                                            "description": "Optional, list of components in standby by xname. Components that were previously booted and but are no longer sending heartbeat.",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "ready": [
                                            "x0c0s1b1n0",
                                            "x0c1s4b1n0",
                                            "x0c1s6b1n0",
                                            "x0c1s7b1n0"
                                        ],
                                        "standby": [
                                            "x0c0s1b1n1",
                                            "x0c1s4b1n1",
                                            "x0c1s6b1n1",
                                            "x0c1s7b1n1"
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xname_reinit": {
            "post": {
                "tags": [
                    "component control"
                ],
                "summary": "Restart components",
                "description": "The `xname_reinit` API issues a **restart** or **off-on** sequence to a selected list of components by xname. These power operations are ordered to allow large sets of components to be reinit'd with a single API call. Not all components support a **restart**, in these cases, the API may issue an **off** and then **on** to those components.\n\nThe `xname_reinit` API will return after a power **restart** or **off-on** sequence is attempted to be sent to all of the selected components. The return payload should be examined as it may indicate components that did not receive the power request due to an error. The API may return immediately on an error containing a status result indicating any error encountered. The client must determine overall command status by calling the `get_xname_status` API after this call returns.\n\n`xname_reinit` accepts **all** and **s0** as valid xnames indicating all components in the system.\n\nAn optional text message may be provided describing the reason for performing the `xname_reinit` operation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for doing a component reinit.",
                                        "type": "string"
                                    },
                                    "xnames": {
                                        "description": "User specified list of component IDs (xnames) to reinit. An empty array is invalid. If invalid xnames are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to restart components disabling any checks for a graceful restart.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Changing kernel",
                                    "xnames": [
                                        "x0c0s1b0n0",
                                        "x0c1s4b0n0",
                                        "x0c1s6b0n0",
                                        "x0c1rsb0n0"
                                    ],
                                    "force": true
                                },
                                "required": [
                                    "xnames"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to reinit selected components",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "xnames": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "e": {
                                                        "description": "Non-zero status code for failed request.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    },
                                                    "xname": {
                                                        "description": "Component ID failing power restart attempt.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "xname"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "xnames": [
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c0s1b0n0"
                                            },
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c1s6b0n0"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xname_on": {
            "post": {
                "tags": [
                    "component control"
                ],
                "summary": "Power on components",
                "description": "The `xname_on` API powers **on** a selected list of components by xname. Power **on** operations are ordered to allow large sets of components to be powered on with a single API call.\n\nThe `xname_on` API will return after a power **on** request is attempted to be sent to all of the selected components. The return payload should be examined as it may indicate components that did not receive the power **on** request due to an error. The API may return immediately on an error containing a status result indicating the error encountered. The client must determine overall command status by calling the `get_xname_status` API after this call returns.\n\n`xname_on` accepts **all** and **s0** as valid xnames indicating all components in the system.\n\nAn optional text message may be provided describing the reason for performing the `xname_on` operation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for turning components on.",
                                        "type": "string"
                                    },
                                    "xnames": {
                                        "description": "User specified list of component IDs (xnames) to power on. An empty array is invalid. If invalid xnames are specified then an error will be returned. Available wildcards: all, s0",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to power on components disabling any checks for a graceful power on.",
                                        "type": "boolean"
                                    },
                                    "recursive": {
                                        "description": "Attempt to power on the component hierarchy rooted by each component ID (xname). Incompatible with the prereq option.",
                                        "type": "boolean"
                                    },
                                    "prereq": {
                                        "description": "Attempt to power on the component IDs(xnames) and all of their ancestors. Incompatible with the recursive option.",
                                        "type": "boolean"
                                    },
                                    "continue": {
                                        "description": "Continue powering on valid component IDs (xnames) ignoring any component ID validation errors. Normally, a failure in validation ceases any attempt to power on any components.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Power on nodes to expand capacity",
                                    "xnames": [
                                        "x0c0s1b0n0",
                                        "x0c1s4b0n0",
                                        "x0c1s6b0n0",
                                        "x0c1rsb0n0"
                                    ],
                                    "force": true,
                                    "recursive": true
                                },
                                "required": [
                                    "xnames"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to power on selected components",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "xnames": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "e": {
                                                        "description": "Non-zero status code for failed request.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    },
                                                    "xname": {
                                                        "description": "Component ID failing power up attempt.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "xname"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "xnames": [
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c0s1b0n0"
                                            },
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c1s6b0n0"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xname_off": {
            "post": {
                "tags": [
                    "component control"
                ],
                "summary": "Power off components",
                "description": "The `xname_off` API will shutdown and power **off** a selected list of components by xname. Power **off** operations are ordered to allow large sets of components to be powered off with a single API call.\n\nThe `xname_off` API will return after a power **off** request is attempted to be sent to all of the selected components. The return payload should be examined as it may indicate components that did not receive the power **off** request due to an error. The API may return immediately on an error containing a status result indicating the error encountered. The client must determine overall command status by calling the `get_xname_status` API after this call returns.\n\n`xname_off` accepts as xnames **all** and **s0** indicating all components in the system.\n\nAn optional text message may be provided describing the reason for performing the `xname_off` operation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for turning components off.",
                                        "type": "string"
                                    },
                                    "xnames": {
                                        "description": "User specified list of component IDs (xnames) to shutdown and power off. An empty array is invalid. If invalid xnames are specified then an error will be returned. Available wildcards: all, s0",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to power off components disabling any checks for a graceful power off.",
                                        "type": "boolean"
                                    },
                                    "recursive": {
                                        "description": "Attempt to power off the component hierarchy rooted by each component ID (xname). Incompatible with the prereq option.",
                                        "type": "boolean"
                                    },
                                    "prereq": {
                                        "description": "Attempt to power off the component and all of its ancestors by their componet ID (xname). Incompatible with the recursive option.",
                                        "type": "boolean"
                                    },
                                    "continue": {
                                        "description": "Continue powering on valid component IDs (xnames) ignoring any component ID validation errors. Normally, a failure in validation ceases any attempt to power on any components.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Power save, need less capacity",
                                    "xnames": [
                                        "x0c0s1b0n0",
                                        "x0c1s4b0n0",
                                        "x0c1s6b0n0",
                                        "x0c1rsb0n0"
                                    ],
                                    "force": true,
                                    "recursive": true
                                },
                                "required": [
                                    "xnames"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to power off selected components",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "xnames": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "xname": {
                                                        "description": "Component ID failing power down attempt",
                                                        "type": "string"
                                                    },
                                                    "e": {
                                                        "description": "Non-zero status code for failed request",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "xname"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "xnames": [
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c0s1b0n0"
                                            },
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c1s6b0n0"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group_reinit": {
            "post": {
                "tags": [
                    "group control"
                ],
                "summary": "Restart group",
                "description": "The `group_reinit` API issues a **restart** or **off-on** sequence to a selected list of components by group. These power operations are ordered to allow large sets of components to be reinit'd with a single API call. Not all components support a **restart**, in these cases, the API may issue an **off** and then **on** to those components. If nodes are part of the groups being restarted, those nodes will automatically start to boot with a discovery image or a previously configured image.\n\nThe `group_reinit` API will return after a power **restart** or **off-on** sequence is attempted to be sent to all of the selected components. The return payload should be examined as it may indicate components that did not receive the power request due to an error. The API may return immediately on an error containing a status result indicating any error encountered. The client must determine overall command status by calling the `get_group_status` API after this call returns.\n\nAn optional text message may be provided describing the reason for performing the `group_reinit` operation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for doing a group reinit.",
                                        "type": "string"
                                    },
                                    "groups": {
                                        "description": "User specified list of group labels from Hardware State Manager to resolve to a list of components to power on. An empty array is invalid. If invalid groups are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to reinit a group disabling any checks for a graceful restart.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Restart nodes to pick up a new image",
                                    "groups": [
                                        "blue_nodes",
                                        "red_nodes"
                                    ],
                                    "force": true
                                },
                                "required": [
                                    "groups"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to restart components in a selected group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "xnames": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "xname": {
                                                        "description": "Component ID failing power restart attempt",
                                                        "type": "string"
                                                    },
                                                    "e": {
                                                        "description": "Non-zero status code for failed request",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "xname"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "xnames": [
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c0s1b0n0"
                                            },
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c1s6b0n0"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_group_status": {
            "post": {
                "tags": [
                    "group control"
                ],
                "summary": "Return component status by group",
                "description": "The `get_group_status` API returns component state specified by a group for the full set of components in the group or a subset as specified by a component filter. This status API is intended, but not limited, to be used in conjunction with asynchronous operations which may modify the state of components in a group, such as `group_on` or `group_off`.\n\nThe status returend from this API are the hardware states as reported by Redfish (**on** or **off**).\n\nThe `get_group_status` API does not report **empty** components.\n\nGroups queried via the `get_group_status` API must be defined in Hardware State Manager.\n\n**Filters**\n\nFilters for a status query may be supplied as a pipe-separated (|) list surrounded with double quotes, e.g. \"filter1|filter2|filter3\". Valid filters are: `show_all`, `show_off`, `show_on`, `show_halt`, `show_standby`, `show_ready`, and `show_disabled`. Valid flag filters are `show_alert`, `show_resvd`, and `show_warn`. Status and flag filters may be intermixed freely. The `show_all` filter overrides any other status or flag filters and is the default.\n\n**Notice**\n\nThe hardware management system no longer supports a \"diag\" state, as such the `show_diag` filter is considered deprecated. Specifying only the `show_diag` filter will not return any results.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "filter": {
                                        "description": "Option, pipe concatenated (|) list of filter strings, e.g. \"filter1|filter2|filter3\". Valid status filters are `show_all`, `show_disabled`, `show_halt`, `show_off`, `show_on`, `show_ready`, and `show_standby`. Valid flag filters are `show_alert`, `show_resvd`, and `show_warn`. Status and flag filters may be intermixed freely. If omitted, the default is `show_all`.",
                                        "type": "string"
                                    },
                                    "groups": {
                                        "description": "User specified list of group labels from Hardware State Manager to resolve to a list of components to power on. An empty array is invalid. If invalid groups are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "filter": "show_on|show_off",
                                    "groups": [
                                        "blue_nodes",
                                        "red_nodes"
                                    ]
                                },
                                "required": [
                                    "groups"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to get status for components in a selected group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "on": {
                                            "description": "Optional, list of powered on components. Power is on and BIOS has initialized all hardware.",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "off": {
                                            "description": "Optional, list of powered off components.",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "on": [
                                            "x0c0s1b0n0",
                                            "x0c1s4b0n0",
                                            "x0c1s6b0n0",
                                            "x0c1rsb0n0"
                                        ],
                                        "off": [
                                            "x0c0s1b0n1",
                                            "x0c1s4b0n1",
                                            "x0c1s6b0n1",
                                            "x0c1rsb0n1"
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group_on": {
            "post": {
                "tags": [
                    "group control"
                ],
                "summary": "Power components on by group",
                "description": "The `group_on` API powers **on** a component list by group. Power **on** operations are ordered to allow large sets of components to be powered on with a single API call. The group names must be defined in Hardware State Manager.\n\nThe `group_on` API will return after a power **on** request is attempted to be sent to all of the components in the selected groups. The return payload should be examined as it may indicate components that did not receive the power **on** request due to an error. The API may return immediately on an error containing a status result indicating the error encountered. The client must determine overall command status by calling the `get_group_status` API after this call returns.\n\nAn optional text message may be provided describing the reason for performing the `group_on` opteration.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for turning a group on.",
                                        "type": "string"
                                    },
                                    "groups": {
                                        "description": "User specified list of group labels from Hardware State Manager to resolve to a list of components to power on. An empty array is invalid. If invalid groups are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to power on a group disabling any checks for a graceful power on.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Need more capacity",
                                    "groups": [
                                        "blue_nodes",
                                        "red_nodes"
                                    ],
                                    "force": true
                                },
                                "required": [
                                    "groups"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to power on components in a selected group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "xnames": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "e": {
                                                        "description": "Non-zero status code for failed request",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    },
                                                    "xname": {
                                                        "description": "Component ID failing power up attempt",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "xname"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "xnames": [
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c0s1b0n1"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group_off": {
            "post": {
                "tags": [
                    "group control"
                ],
                "summary": "Power components off by group",
                "description": "The `group_off` API powers **off** a component list by group. Power **off** operations are ordered to allow large sets of components to be powered off with a single API call. The group names must be defined in Hardware State Manager.\n\nThe `group_off` API will return after a power **off** request is attempted to be sent to all of the components in the selected groups. The return payload should be examined as it may indicate components that did not receive the power **off** request due to an error. The API may return immediately on an error containing a status result indicating the error encountered. The client must determine overall command status by calling the `get_group_status` API after this call returns.\n\nAn optional text message may be provided describing the reason for performing the `group_off` opteration.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for turning a group off.",
                                        "type": "string"
                                    },
                                    "groups": {
                                        "description": "User specified list of group labels from Hardware State Manager to resolve to a list of xnames to shutdown and power off. An empty array is invalid.  If invalid groups are specified then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "force": {
                                        "description": "Attempt to power off a group disabling any checks for a graceful power off.",
                                        "type": "boolean"
                                    }
                                },
                                "example": {
                                    "reason": "Power save, need less capacity",
                                    "groups": [
                                        "blue_nodes",
                                        "red_nodes"
                                    ],
                                    "force": true
                                },
                                "required": [
                                    "groups"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to power off components in a selected group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success, non-zero on error.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "xnames": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "e": {
                                                        "description": "Non-zero status code for failed request",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    },
                                                    "xname": {
                                                        "description": "Component ID failing power down attempt",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "e",
                                                    "err_msg",
                                                    "xname"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": -1,
                                        "err_msg": "",
                                        "xnames": [
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c0s1b0n0"
                                            },
                                            {
                                                "e": -1,
                                                "err_msg": "NodeBMC communication error",
                                                "xname": "x0c1s4b0n1"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_power_cap": {
            "post": {
                "tags": [
                    "power capping"
                ],
                "summary": "Return power capping controls",
                "description": "The `get_power_cap` API returns the power capping control(s) and currently applied settings for the requested list of NIDs. Control values which are returned as zero indicates the respective control is unconstrained.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "nids": {
                                        "description": "User specified list, or empty array for all NIDs. This list must not contain invalid or duplicate NID numbers. If invalid NID numbers are specified then an error will be returned. If empty, the default is all NIDs. The specified NIDs must be in the `ready` state per the `get_node_status` command.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                },
                                "example": {
                                    "nids": [
                                        1,
                                        40,
                                        41,
                                        42,
                                        43
                                    ]
                                },
                                "required": [
                                    "nids"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to get power capping controls of selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Overall request status code, zero on total success, non-zero if one or more node specific operations fail",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "nids": {
                                            "description": "Object array containing NID specific result data, each element represents a single NID",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "nid": {
                                                        "description": "NID number owning the returned control objects",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "e": {
                                                        "description": "Optional, error status, non-zero indicates operation failed on this node",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Optional, message indicating any error encountered.",
                                                        "type": "string"
                                                    },
                                                    "controls": {
                                                        "description": "Optional, array of node level control and status objects which have been queried, one element per control",
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "description": "Unique control or status object identifier",
                                                                    "type": "string"
                                                                },
                                                                "val": {
                                                                    "description": "Control object setting, or zero to indicate control is unconstrained, units are dependent upon control type",
                                                                    "type": "integer",
                                                                    "format": "int32"
                                                                }
                                                            },
                                                            "required": [
                                                                "name",
                                                                "val"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "required": [
                                                    "nid"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "nids": [
                                            {
                                                "nid": 40,
                                                "e": 0,
                                                "err_msg": "",
                                                "controls": [
                                                    {
                                                        "name": "node",
                                                        "val": 350
                                                    },
                                                    {
                                                        "name": "accel",
                                                        "val": 375
                                                    }
                                                ]
                                            },
                                            {
                                                "nid": 42,
                                                "e": 0,
                                                "err_msg": "",
                                                "controls": [
                                                    {
                                                        "name": "node",
                                                        "val": 325
                                                    },
                                                    {
                                                        "name": "accel",
                                                        "val": 350
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "nids"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_power_cap_capabilities": {
            "post": {
                "tags": [
                    "power capping"
                ],
                "summary": "Return power cap capabilities",
                "description": "The `get_power_cap_capabilities` API returns information about installed hardware and its associated properties. Information returned includes the specific hardware types, NID membership, and power capping controls along with their allowable ranges. Information may be returned for a selected set of NIDs or the system as a whole.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "nids": {
                                        "description": "User specified list, or empty array for all NIDs. This list must not contain invalid or duplicate NID numbers. If invalid NID numbers are specified, then an error will be returned.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                },
                                "example": {
                                    "nids": [
                                        40,
                                        41,
                                        42,
                                        43
                                    ]
                                },
                                "required": [
                                    "nids"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to get power capping capabilities of selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "groups": {
                                            "description": "Object array containing hardware specific information and NID membership, each element represent a unique hardware type.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "description": "Opaque identifier which Cray system management sofware uses to uniquely identify a node type.",
                                                        "type": "string"
                                                    },
                                                    "desc": {
                                                        "description": "Text description of the opaque node type identifier",
                                                        "type": "string"
                                                    },
                                                    "host_limit_max": {
                                                        "description": "Estimated maximum power, specified in watts, which host CPU(s) and memory may consume.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "host_limit_min": {
                                                        "description": "Estimated minimum power, specified in watts, which host CPU(s) and memory require to operate.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "static": {
                                                        "description": "Static per node power overhead, specified in watts, which is unreported",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "supply": {
                                                        "description": "Maximum capacity of each node level power supply for the given hardware type, specified in watts.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "powerup": {
                                                        "description": "Typical power consumption of each node during hardware initialization, specified in watts.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "nids": {
                                                        "description": "NID members belonging to the given hardware type.",
                                                        "type": "array",
                                                        "items": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                        }
                                                    },
                                                    "controls": {
                                                        "description": "Array of node level control objects which may be assigned or queried, one element per control.",
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "description": "Unique control object identifier",
                                                                    "type": "string"
                                                                },
                                                                "desc": {
                                                                    "description": "Message indicating any error encountered.",
                                                                    "type": "string"
                                                                },
                                                                "min": {
                                                                    "description": "Minimum value which may be assigned to the control object, units are dependent upon control type.",
                                                                    "type": "integer",
                                                                    "format": "int32"
                                                                },
                                                                "max": {
                                                                    "description": "Maximum value which may be assigned to the control object, units are dependent upon control type.",
                                                                    "type": "integer",
                                                                    "format": "int32"
                                                                }
                                                            },
                                                            "required": [
                                                                "name",
                                                                "desc",
                                                                "min",
                                                                "max"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "required": [
                                                    "name",
                                                    "desc",
                                                    "host_limit_max",
                                                    "host_limit_min",
                                                    "static",
                                                    "supply",
                                                    "powerup",
                                                    "nids",
                                                    "controls"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "groups": [
                                            {
                                                "name": "01:000d:306e:0082:000a:0020:3a34:8300",
                                                "desc": "ComputeANC_IVB_130W_10c_32GB_14900_IntelKNCAccel",
                                                "suppy": 425,
                                                "host_limit_min": 100,
                                                "host_limit_max": 200,
                                                "static": 0,
                                                "powerup": 120,
                                                "nids": [
                                                    40,
                                                    41
                                                ],
                                                "controls": [
                                                    {
                                                        "name": "accel",
                                                        "desc": "Acelerator control",
                                                        "min": 220,
                                                        "max": 260
                                                    },
                                                    {
                                                        "name": "node",
                                                        "desc": "Node manager control",
                                                        "min": 320,
                                                        "max": 460
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "01:000d:306e:00e6:0014:0040:3a34:0000",
                                                "desc": "ComputeANC_IVB_230W_20c_64GB_14900_NoAccel",
                                                "suppy": 425,
                                                "host_limit_min": 200,
                                                "host_limit_max": 350,
                                                "static": 0,
                                                "powerup": 150,
                                                "nids": [
                                                    42,
                                                    43
                                                ],
                                                "controls": [
                                                    {
                                                        "name": "node",
                                                        "desc": "Node manager control",
                                                        "min": 320,
                                                        "max": 460
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "groups"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/set_power_cap": {
            "post": {
                "tags": [
                    "power capping"
                ],
                "summary": "Set power capping parameters",
                "description": "The `set_power_cap` API is used to establish an upper bound with respect to power consumption on a per-node, and if applicable, a sub-node basis. Established power cap parameters will revert to the default configuration on the next system boot.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "nids": {
                                        "description": "Object array containing NID specific input data, each element represents a single NID.",
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "nid": {
                                                    "description": "NID to apply the specified power caps. The specified NID must be in the **ready** state per the `get_node_status` command.",
                                                    "type": "integer",
                                                    "format": "int32"
                                                },
                                                "controls": {
                                                    "description": "Array of node level control objects to be adjusted, one element per control.\nNodes with a high powered accelerators and high TDP processors will be automatically power capped at the **supply** limit returned per the `get_power_cap_capabilities` command. If a node level power cap is specified that is within the node control range but exceeds the supply limit, the actual power cap assigned will be clamped at the supply limit.\nThe accelerator power cap value represents a subset of the total node level power cap. If a node level power cap of 400 watts is applied and an accelerator power cap of 180 watts is applied, then the total node power consumption is limited to 400 watts. If the accelerator is activerly consuming its entire 180 watt power allocation, then the host processor, memory subsystem, and support logic for that node may consume a maximum of 220 watts.",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "name": {
                                                                "description": "Specifies a node or accelerator as the type to apply a power cap to.",
                                                                "type": "string"
                                                            },
                                                            "val": {
                                                                "description": "Power cap value to assign to the selected component type. The value given must be within the range returned in the capabilities output. A Value of zero may be supplied to explicitly clear an existing power cap.",
                                                                "type": "integer",
                                                                "format": "int32"
                                                            }
                                                        },
                                                        "required": [
                                                            "name",
                                                            "val"
                                                        ]
                                                    }
                                                }
                                            },
                                            "required": [
                                                "nid",
                                                "controls"
                                            ]
                                        }
                                    }
                                },
                                "example": {
                                    "nids": [
                                        {
                                            "nid": 40,
                                            "controls": [
                                                {
                                                    "name": "node",
                                                    "val": 410
                                                },
                                                {
                                                    "name": "accel",
                                                    "val": 220
                                                }
                                            ]
                                        },
                                        {
                                            "nid": 42,
                                            "controls": [
                                                {
                                                    "name": "node",
                                                    "val": 400
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "required": [
                                    "nids"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to set power capping parameters of selected nids",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Request status code, zero on success.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "nids": {
                                            "description": "Object array containing NID specific error data, NIDs which experienced success are omitted",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "nid": {
                                                        "description": "NID number owning the returned error data",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "e": {
                                                        "description": "Error status, non-zero indicates operation failed on this node",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Message indicating any error encountered.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "nid",
                                                    "e",
                                                    "err_msg"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "nids": [
                                            {
                                                "nid": 40,
                                                "e": 0,
                                                "err_msg": ""
                                            },
                                            {
                                                "nid": 42,
                                                "e": 0,
                                                "err_msg": ""
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "nids"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_system_parameters": {
            "get": {
                "tags": [
                    "system monitor"
                ],
                "summary": "Read-only system parameters",
                "description": "The `get_system_parameters` API returns read-only parameters such as expected worst case system power consumption, static power overhead, or administratively defined values such as a systemwide power limit, maximum power ramp rate, and target power band. Returned values are used to convey intent between the system administrator and external agents with respect to target power limits and other operational parameters. The returned parameters are strictly informational.",
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates failure.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "power_cap_target": {
                                            "description": "Administratively defined upper limit on system power.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "power_threshold": {
                                            "description": "System power level, which if crossed, will result in Cray management software emitting over-power budget warnings.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "static_power": {
                                            "description": "Additional static systemwide power overhead which is unreported, specified in watts.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "ramp_limited": {
                                            "description": "True if out-of-band HSS power ramp rate limiting features are enabled",
                                            "type": "boolean"
                                        },
                                        "ramp_limit": {
                                            "description": "Administratively defined maximum rate of change (increasing or decreasing) in systemwide power consumption, specified in watts per minute.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "power_band_min": {
                                            "description": "Administratively defined minimum allowable system power consumption, specified in watts.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "power_band_max": {
                                            "description": "Administratively defined maximum allowable system power consumption, specified in watts.",
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "power_cap_target": 0,
                                        "power_threshold": 0,
                                        "static_power": 10700,
                                        "ramp_limited": true,
                                        "ramp_limit": 2000000,
                                        "power_band_min": 1000000,
                                        "power_band_max": 2000000
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "power_cap_target",
                                        "power_threshold",
                                        "static_power",
                                        "ramp_limited",
                                        "ramp_limit",
                                        "power_band_min",
                                        "power_band_max"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "system monitor"
                ],
                "summary": "Return read-only system parameters",
                "description": "The `get_system_parameters` API returns read-only parameters such as expected worst case system power consumption, static power overhead, or administratively defined values such as a systemwide power limit, maximum power ramp rate, and target power band. Returned values are used to convey intent between the system administrator and external agents with respect to target power limits and other operational parameters. The returned parameters are strictly informational.\n\nThe request must **POST** an empty JSON object to the API server. This command takes no arguments.",
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates failure.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "power_cap_target": {
                                            "description": "Administratively defined upper limit on system power.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "power_threshold": {
                                            "description": "System power level, which if crossed, will result in Cray management software emitting over-power budget warnings.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "static_power": {
                                            "description": "Additional static systemwide power overhead which is unreported, specified in watts.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "ramp_limited": {
                                            "description": "True if out-of-band HSS power ramp rate limiting features are enabled",
                                            "type": "boolean"
                                        },
                                        "ramp_limit": {
                                            "description": "Administratively defined maximum rate of change (increasing or decreasing) in systemwide power consumption, specified in watts per minute.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "power_band_min": {
                                            "description": "Administratively defined minimum allowable system power consumption, specified in watts.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "power_band_max": {
                                            "description": "Administratively defined maximum allowable system power consumption, specified in watts.",
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "power_cap_target": 0,
                                        "power_threshold": 0,
                                        "static_power": 10700,
                                        "ramp_limited": true,
                                        "ramp_limit": 2000000,
                                        "power_band_min": 1000000,
                                        "power_band_max": 2000000
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "power_cap_target",
                                        "power_threshold",
                                        "static_power",
                                        "ramp_limited",
                                        "ramp_limit",
                                        "power_band_min",
                                        "power_band_max"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_system_power": {
            "get": {
                "tags": [
                    "system monitor"
                ],
                "summary": "System level power information",
                "description": "The `get_system_power` API returns system level power information including the average, minimum, and maximum values observed over a user specified time interval. If no arguments are given, then information is returned for an interval of 15 seconds adjusted for the hysteresis.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_time",
                        "description": "Optional, sampling window start time of the form \"2019-07-10 11:36:32\"",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "window_len",
                        "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates statistics are unavailable.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "window_len": {
                                            "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "start_time": {
                                            "description": "Window sample start time in `YYYY-MM-DD HH:MM:SS` format or symbolic constant `CURRENT_TIMESTAMP`, may be different from the requested value.",
                                            "type": "string"
                                        },
                                        "avg": {
                                            "description": "Average system power computed over the time window.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max": {
                                            "description": "Peak system power observed over the time window.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "min": {
                                            "description": "Off-peak system power observed over the time window.",
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "window_len": 30,
                                        "start_time": "2019-07-10 11:36:32",
                                        "avg": 17468,
                                        "max": 17661,
                                        "min": 17340
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "window_len",
                                        "start_time",
                                        "avg",
                                        "max",
                                        "min"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "system monitor"
                ],
                "summary": "Return system level power information",
                "description": "The `get_system_power` API returns system level power information including the average, minimum, and maximum values observed over a user specified time interval. If no arguments are given, then information is returned for an interval of 15 seconds adjusted for the hysteresis.\n\nThe request must **POST** a properly formatted JSON object to the API server. The command takes up to two optional arguments which identify a start time and window length.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start_time": {
                                        "description": "Optional, sampling window start time",
                                        "type": "string"
                                    },
                                    "window_len": {
                                        "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value",
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "example": {
                                    "start_time": "2019-07-10 11:36:32",
                                    "window_len": 300
                                }
                            }
                        }
                    },
                    "description": "A JSON object to get system level power information",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates statistics are unavailable.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "window_len": {
                                            "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "start_time": {
                                            "description": "Window sample start time in `YYYY-MM-DD HH:MM:SS` format or symbolic constant `CURRENT_TIMESTAMP`, may be different from the requested value.",
                                            "type": "string"
                                        },
                                        "avg": {
                                            "description": "Average system power computed over the time window.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "max": {
                                            "description": "Peak system power observed over the time window.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "min": {
                                            "description": "Off-peak system power observed over the time window.",
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "window_len": 30,
                                        "start_time": "2019-07-10 11:36:32",
                                        "avg": 17468,
                                        "max": 17661,
                                        "min": 17340
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "window_len",
                                        "start_time",
                                        "avg",
                                        "max",
                                        "min"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_system_power_details": {
            "get": {
                "tags": [
                    "system monitor"
                ],
                "summary": "Per cabinet power information",
                "description": "The `get_system_power_details` API returns per cabinet power information including the average, minimum, and maximum values observed over a user specified time interval. If no arguments are given, then information is returned for an interval of 15 seconds adjusted for the hysteresis.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_time",
                        "description": "Optional, sampling window start time of the form \"2019-07-10 11:36:32\"",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "window_len",
                        "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates statistics are unavailable",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "window_len": {
                                            "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "start_time": {
                                            "description": "Window sample start time in `YYYY-MM-DD HH:MM:SS` format or symbolic constant `CURRENT_TIMESTAMP` , may be different from the requested value.",
                                            "type": "string"
                                        },
                                        "cabinets": {
                                            "description": "Object array containing cabinet level power statistics, each element represents a single cabinet.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "avg": {
                                                        "description": "Average cabinet power computed over the time window.",
                                                        "type": "number",
                                                        "format": "double"
                                                    },
                                                    "max": {
                                                        "description": "Peak cabinet power observed over the time window.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "min": {
                                                        "description": "Off-peak cabinet power observed over the time window.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "x": {
                                                        "description": "Cabinet X coordinate, column address.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "y": {
                                                        "description": "Cabinet Y coordinate, row address.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    }
                                                },
                                                "required": [
                                                    "avg",
                                                    "max",
                                                    "min",
                                                    "x",
                                                    "y"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "window_len": 30,
                                        "start_time": "2019-07-10 11:36:32",
                                        "cabinets": [
                                            {
                                                "avg": 17432.0333,
                                                "max": 17730,
                                                "min": 17069,
                                                "x": 1000,
                                                "y": 0
                                            },
                                            {
                                                "avg": 17433.825,
                                                "max": 17735,
                                                "min": 17074,
                                                "x": 1001,
                                                "y": 0
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "window_len",
                                        "start_time"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "system monitor"
                ],
                "summary": "Return per cabinet power information",
                "description": "The `get_system_power_details` API returns per cabinet power information including the average, minimum, and maximum values observed over a user specified time interval. If no arguments are given, then information is returned for an interval of 15 seconds adjusted for the hysteresis.\n\nThe request must **POST** a properly formatted JSON object to the API server. The command takes up to two optional arguments which identify a start time and window length.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start_time": {
                                        "description": "Optional, sampling window start time",
                                        "type": "string"
                                    },
                                    "window_len": {
                                        "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value",
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        }
                    },
                    "description": "A JSON object to get per cabinet power information",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates statistics are unavailable",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "window_len": {
                                            "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value.",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "start_time": {
                                            "description": "Window sample start time in `YYYY-MM-DD HH:MM:SS` format or symbolic constant `CURRENT_TIMESTAMP` , may be different from the requested value.",
                                            "type": "string"
                                        },
                                        "cabinets": {
                                            "description": "Object array containing cabinet level power statistics, each element represents a single cabinet.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "avg": {
                                                        "description": "Average cabinet power computed over the time window.",
                                                        "type": "number",
                                                        "format": "double"
                                                    },
                                                    "max": {
                                                        "description": "Peak cabinet power observed over the time window.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "min": {
                                                        "description": "Off-peak cabinet power observed over the time window.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "x": {
                                                        "description": "Cabinet X coordinate, column address.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "y": {
                                                        "description": "Cabinet Y coordinate, row address.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    }
                                                },
                                                "required": [
                                                    "avg",
                                                    "max",
                                                    "min",
                                                    "x",
                                                    "y"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 0,
                                        "err_msg": "",
                                        "window_len": 30,
                                        "start_time": "2019-07-10 11:36:32",
                                        "cabinets": [
                                            {
                                                "avg": 17432.0333,
                                                "max": 17730,
                                                "min": 17069,
                                                "x": 1000,
                                                "y": 0
                                            },
                                            {
                                                "avg": 17433.825,
                                                "max": 17735,
                                                "min": 17074,
                                                "x": 1001,
                                                "y": 0
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "window_len",
                                        "start_time"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_nid_map": {
            "post": {
                "tags": [
                    "utilities"
                ],
                "summary": "Return NID to component name mapping",
                "description": "The `get_nid_map` API returns a list of objects where each element represents a single node. Each object in the list contains the NID number, geographic component name, and the operational role for the node.\n\nSpecify the NIDs to retrieve NID number to component name mapping and assigned role. The syntax allows a comma-separated list of nids (e.g., “1,4,5”), a range of nids (e.g., “7-10”), or both (e.g., “1,4,5,7-10”). If omitted, the default is all NIDs.\n\nThe request must **POST** a properly formatted JSON object to the API server. The command takes a single argument which identifies a target NID list.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "nids": {
                                        "description": "User specified list, or empty array for all NIDs.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                },
                                "example": {
                                    "nids": [
                                        40,
                                        41,
                                        42,
                                        43
                                    ]
                                }
                            }
                        }
                    },
                    "description": "A JSON object to get node nid to xname mapping",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status, non-zero indicates failure",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        },
                                        "nids": {
                                            "description": "Object array containing node specific mapping information, each element represents a single NID",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "nid": {
                                                        "description": "NID number owning the returned geographical component name and service role.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "xname": {
                                                        "description": "Optional, geolocation component name. Only present with successful mapping.",
                                                        "type": "string"
                                                    },
                                                    "role": {
                                                        "description": "Optional, currently assigned service role, may be one of “compute” or “service”. Only present with successful mapping.",
                                                        "type": "string"
                                                    },
                                                    "e": {
                                                        "description": "Optional, error status, non-zero indicates mapping failed for this node.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "err_msg": {
                                                        "description": "Optional, message indicating any error encountered.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "nid"
                                                ]
                                            }
                                        }
                                    },
                                    "example": {
                                        "e": 22,
                                        "err_msg": "",
                                        "nids": [
                                            {
                                                "xname": "x1c3s1b0n2",
                                                "nid": 141,
                                                "role": "compute"
                                            },
                                            {
                                                "xname": "x1c3s1b0n2",
                                                "nid": 140,
                                                "role": "compute"
                                            },
                                            {
                                                "xname": "x0c0s5b0n0",
                                                "nid": 1,
                                                "role": "service",
                                                "e": 22,
                                                "err_msg": "Undefined NID"
                                            }
                                        ]
                                    },
                                    "required": [
                                        "e",
                                        "err_msg",
                                        "nids"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/emergency_power_off": {
            "post": {
                "tags": [
                    "EPO"
                ],
                "summary": "Send Emergency Power Off",
                "description": "The `emergency_power_off` API performs a software driven Emergency Power Off (EPO) for all descendants of the selected list of component IDs (xnames).  This is an immediate and hard power off of selected components and their descendants. After the `emergency_power_off` operation has completed, the selected components and all of their descendants will be in an Off state.\n\nIssuing an EPO to a Mountain cabinet or chassis will result in all Mountain components that share the cooling group with the specified cabinet or chassis to also receive an EPO.\n\nThe `emergency_power_off` API will return after a power **off** request is attempted to be sent to all of the selected components. The return payload should be examined as it may indicate components that did not receive the power **off** request due to an error. The API may return immediately on an error containing a status result indicating the error encountered. The client must determine overall command status by calling the `get_xname_status` API after this call returns.\n\nSpecify an arbitrary text message which is given as the reason for performing the `emergency_power_off` operation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "Reason for doing an Emergency Power Off.",
                                        "type": "string"
                                    },
                                    "xnames": {
                                        "description": "User specified list of component IDs (xnames) to initiate Emergency Power Off with. These components, all of their descendants, and any Mountain components that share the cooling group with the selected components will have their power turned off.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "reason": "Testing EPO",
                                    "xnames": [
                                        "x1000",
                                        "x1001",
                                        "x1002",
                                        "x1003"
                                    ]
                                },
                                "required": [
                                    "xnames"
                                ]
                            }
                        }
                    },
                    "description": "A JSON object to issue an emergency power off",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success"
                    },
                    "400": {
                        "description": "[Bad Request](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Bad Request error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 400,
                                        "err_msg": "Bad Request: invalid URL escape"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "[Not Found](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Not Found error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 404,
                                        "err_msg": "No components in machine"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "[Method Not Allowed](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Method Not Allowed error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 405,
                                        "err_msg": "(PATCH) Not Allowed"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "[Internal Server Error](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "CAPMC Internal Server Error error payload",
                                    "type": "object",
                                    "properties": {
                                        "e": {
                                            "description": "Error status code",
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "err_msg": {
                                            "description": "Message indicating any error encountered.",
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "e": 500,
                                        "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "http://api-gw-service-nmn.local/apis/capmc/capmc/v1"
        }
    ],
    "components": {
        "responses": {
            "systemParameters": {
                "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "e": {
                                    "description": "Error status, non-zero indicates failure.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "err_msg": {
                                    "description": "Message indicating any error encountered.",
                                    "type": "string"
                                },
                                "power_cap_target": {
                                    "description": "Administratively defined upper limit on system power.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "power_threshold": {
                                    "description": "System power level, which if crossed, will result in Cray management software emitting over-power budget warnings.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "static_power": {
                                    "description": "Additional static systemwide power overhead which is unreported, specified in watts.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "ramp_limited": {
                                    "description": "True if out-of-band HSS power ramp rate limiting features are enabled",
                                    "type": "boolean"
                                },
                                "ramp_limit": {
                                    "description": "Administratively defined maximum rate of change (increasing or decreasing) in systemwide power consumption, specified in watts per minute.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "power_band_min": {
                                    "description": "Administratively defined minimum allowable system power consumption, specified in watts.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "power_band_max": {
                                    "description": "Administratively defined maximum allowable system power consumption, specified in watts.",
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "example": {
                                "e": 0,
                                "err_msg": "",
                                "power_cap_target": 0,
                                "power_threshold": 0,
                                "static_power": 10700,
                                "ramp_limited": true,
                                "ramp_limit": 2000000,
                                "power_band_min": 1000000,
                                "power_band_max": 2000000
                            },
                            "required": [
                                "e",
                                "err_msg",
                                "power_cap_target",
                                "power_threshold",
                                "static_power",
                                "ramp_limited",
                                "ramp_limit",
                                "power_band_min",
                                "power_band_max"
                            ]
                        }
                    }
                }
            },
            "systemPower": {
                "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "e": {
                                    "description": "Error status, non-zero indicates statistics are unavailable.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "err_msg": {
                                    "description": "Message indicating any error encountered.",
                                    "type": "string"
                                },
                                "window_len": {
                                    "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "start_time": {
                                    "description": "Window sample start time in `YYYY-MM-DD HH:MM:SS` format or symbolic constant `CURRENT_TIMESTAMP`, may be different from the requested value.",
                                    "type": "string"
                                },
                                "avg": {
                                    "description": "Average system power computed over the time window.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "max": {
                                    "description": "Peak system power observed over the time window.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "min": {
                                    "description": "Off-peak system power observed over the time window.",
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "example": {
                                "e": 0,
                                "err_msg": "",
                                "window_len": 30,
                                "start_time": "2019-07-10 11:36:32",
                                "avg": 17468,
                                "max": 17661,
                                "min": 17340
                            },
                            "required": [
                                "e",
                                "err_msg",
                                "window_len",
                                "start_time",
                                "avg",
                                "max",
                                "min"
                            ]
                        }
                    }
                }
            },
            "systemPowerDetails": {
                "description": "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1) Network API call success",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "e": {
                                    "description": "Error status, non-zero indicates statistics are unavailable",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "err_msg": {
                                    "description": "Message indicating any error encountered.",
                                    "type": "string"
                                },
                                "window_len": {
                                    "description": "Window length in seconds in which the statistics have been computed, may be different from the requested value.",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "start_time": {
                                    "description": "Window sample start time in `YYYY-MM-DD HH:MM:SS` format or symbolic constant `CURRENT_TIMESTAMP` , may be different from the requested value.",
                                    "type": "string"
                                },
                                "cabinets": {
                                    "description": "Object array containing cabinet level power statistics, each element represents a single cabinet.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "avg": {
                                                "description": "Average cabinet power computed over the time window.",
                                                "type": "number",
                                                "format": "double"
                                            },
                                            "max": {
                                                "description": "Peak cabinet power observed over the time window.",
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "min": {
                                                "description": "Off-peak cabinet power observed over the time window.",
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "x": {
                                                "description": "Cabinet X coordinate, column address.",
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "y": {
                                                "description": "Cabinet Y coordinate, row address.",
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "required": [
                                            "avg",
                                            "max",
                                            "min",
                                            "x",
                                            "y"
                                        ]
                                    }
                                }
                            },
                            "example": {
                                "e": 0,
                                "err_msg": "",
                                "window_len": 30,
                                "start_time": "2019-07-10 11:36:32",
                                "cabinets": [
                                    {
                                        "avg": 17432.0333,
                                        "max": 17730,
                                        "min": 17069,
                                        "x": 1000,
                                        "y": 0
                                    },
                                    {
                                        "avg": 17433.825,
                                        "max": 17735,
                                        "min": 17074,
                                        "x": 1001,
                                        "y": 0
                                    }
                                ]
                            },
                            "required": [
                                "e",
                                "err_msg",
                                "window_len",
                                "start_time"
                            ]
                        }
                    }
                }
            }
        },
        "schemas": {
            "httpError400_BadRequest": {
                "description": "CAPMC Bad Request error payload",
                "type": "object",
                "properties": {
                    "e": {
                        "description": "Error status code",
                        "type": "integer",
                        "format": "int32"
                    },
                    "err_msg": {
                        "description": "Message indicating any error encountered.",
                        "type": "string"
                    }
                },
                "example": {
                    "e": 400,
                    "err_msg": "Bad Request: invalid URL escape"
                }
            },
            "httpError404_NotFound": {
                "description": "CAPMC Not Found error payload",
                "type": "object",
                "properties": {
                    "e": {
                        "description": "Error status code",
                        "type": "integer",
                        "format": "int32"
                    },
                    "err_msg": {
                        "description": "Message indicating any error encountered.",
                        "type": "string"
                    }
                },
                "example": {
                    "e": 404,
                    "err_msg": "No components in machine"
                }
            },
            "httpError405_MethodNotAllowed": {
                "description": "CAPMC Method Not Allowed error payload",
                "type": "object",
                "properties": {
                    "e": {
                        "description": "Error status code",
                        "type": "integer",
                        "format": "int32"
                    },
                    "err_msg": {
                        "description": "Message indicating any error encountered.",
                        "type": "string"
                    }
                },
                "example": {
                    "e": 405,
                    "err_msg": "(PATCH) Not Allowed"
                }
            },
            "httpError500_InternalServerError": {
                "description": "CAPMC Internal Server Error error payload",
                "type": "object",
                "properties": {
                    "e": {
                        "description": "Error status code",
                        "type": "integer",
                        "format": "int32"
                    },
                    "err_msg": {
                        "description": "Message indicating any error encountered.",
                        "type": "string"
                    }
                },
                "example": {
                    "e": 500,
                    "err_msg": "Connection to the secure store isn't ready. Can not get redfish credentials."
                }
            },
            "httpError504_GatewayTimeout": {
                "description": "CAPMC Gateway Timeout error payload",
                "type": "object",
                "properties": {
                    "e": {
                        "description": "Error status code",
                        "type": "integer",
                        "format": "int32"
                    },
                    "err_msg": {
                        "description": "Message indicating any error encountered.",
                        "type": "string"
                    }
                },
                "example": {
                    "e": 505,
                    "err_msg": "Connection timed out."
                }
            }
        }
    }
}