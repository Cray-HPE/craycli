openapi: 3.0.0
info:
  version: 2.1.0
  title: Content Projection Service
  description: >
    The Content Projection Service (CPS) makes content located in file systems
    accessible over the network in a scalable manner. CPS retrieves content
    objects from the artifact repository (a Ceph S3 based object storage) and
    stores the content on non-compute nodes (NCNs). CPS then serves this content
    to other nodes such as compute nodes, user access nodes, or user access
    instances over the network. The CPS cm-pm pod is responsible for downloading
    and serving the content.  CPS content includes files required during the
    compute nodes' boot process, such as the root file system, as well as other
    content required by the programming environment (PE) or analytics.


    This content must be accessible over the network because the compute nodes are diskless and cannot store all this content. CPS can be used to serve some of the content to compute nodes during initial boot or at other times as needed to run workloads etc.


    This content can be projected on compute nodes by running the cpsmount.sh command which makes a specific artifact available to a node with a particular network file system; the node then mounts that file system.


    The CPS API allows the administrator to set the transport type for each artifact. The transport mechanism provides compute nodes with scalable and performant access to the data staged by CPS. Only DVS is supported at this time.


    ## Resources

    ### /contents

    The content also referred to as an artifact includes the following:

    * Root Filesystem

    * Programming Environment (PE)

    * Analytics


    You can retrieve content by S3 artifact path or by transport type.


    An administrator can use this resource to load content from the artifact repository to the CPS-managed storage on NCN, display content status, and also delete content from CPS-managed storage to clear up space on the NCN.


    ## Workflows


    ### Add Content to CPS before Compute Nodes Boot to Quicken Boot Process

    #### POST /contents

    Add a specific artifact to the CPS-managed storage on NCN by specifying an S3 artifact path and the transport type as DVS in the request body. Adding content involves downloading the artifact from the S3 boot-images bucket and copying it to the CPS-managed storage on NCN so that it is ready for the transport (DVS) to project it to other nodes. This may take some time.

    #### GET /transports

    Retrieve attributes for transport types for the content specified by S3 artifact path. You may have to run this more than once until the readyForMount value in the response body is true. When "readyForMount" is true, it implies that the content is ready to be mounted on the compute nodes via DVS.

    ### Clear up Space on the NCN

    #### GET /contents

    Request attributes for artifacts in the CPS-managed storage on NCN.

    #### DELETE /contents

    Delete the specific artifact from CPS-managed storage on NCN if no longer needed. Note that this does not delete the artifact from the S3 boot-images bucket.

    ### Manage the CPS servers (pods) serving content
    These operations provide a way to change the number and location of CPS pods serving content as well as checking the status of the pods.

    #### GET /deployment
    Retrieve CPS cm-pm pods' status.

    #### PUT /deployment
    Add new CPS cm-pm pods to worker nodes.

    #### DELETE /deployment
    Remove CPS cm-pm pods from worker nodes.

paths:
  /contents:
    get:
      summary: Retrieve content attributes
      description: Retrieve attributes for all artifacts or an artifact with specific S3
        path on the CPS-managed storage on NCN.
      tags:
        - contents
      parameters:
        - in: query
          name: s3path
          description: S3 path for artifact
          required: false
          schema:
            type: string
        - in: query
          name: etag
          description: Unique identifier of artifact
          required: false
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ContentAttributeList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add content
      description: Download an artifact from the S3 boot-images bucket and copy it to the
        CPS-managed storage on NCN. You can optionally set the transport type.
        If you do not specify a transport type, you can specify it later by
        using POST /transports.
      tags:
        - contents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentData"
        description: Content request data
        required: true
      responses:
        "200":
          $ref: "#/components/responses/AddContentResponseData"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete content specified by S3 artifact path
      description: Delete the content specified by S3 artifact path from the CPS-managed
        storage on NCN. Deleting content can help clear up space on the NCN.
        Note that this does not delete the content from the S3 boot-images
        bucket.
      tags:
        - contents
      parameters:
        - in: query
          name: s3path
          description: S3 path for artifact
          required: false
          schema:
            type: string
        - in: query
          name: etag
          description: Unique identifier of artifact
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
        "401":
          $ref: "#/components/responses/Unauthorized"
  /transports:
    get:
      summary: Retrieve transport type attributes
      description: Get transport types and their attributes for the artifact with a
        specified S3 path.
      tags:
        - transports
      parameters:
        - in: query
          name: s3path
          description: S3 path for artifact
          required: true
          schema:
            type: string
        - in: query
          name: etag
          description: Unique identifier of artifact
          required: false
          schema:
            type: string
        - in: query
          name: transport
          description: Transport type data. Transport type is "dvs".
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TransportAttributeData"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Disable transports for artifact
      description: Disable transport types for an artifact with the specified S3 path.
      tags:
        - transports
      parameters:
        - in: query
          name: s3path
          description: S3 path for artifact
          required: true
          schema:
            type: string
        - in: query
          name: etag
          description: Unique identifier of artifact
          required: false
          schema:
            type: string
        - in: query
          name: transport
          description: Transport type data. Transport type is "dvs".
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: Add a new transport type
      description: Enable specified transport type for the specific artifact.
      tags:
        - transports
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransportData"
        description: Content request data
        required: true
      responses:
        "200":
          $ref: "#/components/responses/AddContentResponseData"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /deployment:
    get:
      summary: Retrieve CPS cm-pm pod statuses
      description: Retrieve node name, readiness, restart count, and the Kubernetes
        pod state of all containers for deployed CPS cm-pm pods.
      tags:
        - deployment
      parameters:
        - in: query
          name: nodes
          description: List of node names for which to retrieve status.  If no nodes
            are listed, result will include all worker nodes.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          $ref: '#/components/responses/DeploymentStatusResponse'
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Add new CPS cm-pm pods
      description: Add new CPS cm-pm pods on specified nodes (one pod for each worker node).
      tags:
        - deployment
      requestBody:
        content:
          application/json:
            schema:
              properties:
                nodes:
                  description: List of node names.  If the node specified is already
                    running a cm-pm pod, it will be ignored.  If an invalid node
                    name is specified, the valid nodes will start cm-pm pods,
                    but the invalid nodes will be returned as Not Found error.
                  type: array
                  items:
                    type: string
                  default: []
                numpods:
                  description: Number of CPS cm-pm pods to start on available worker
                    nodes. For example, if 1 cm-pm pod is already running,
                    specifying numpods=3 will add 3 new cm-pm pods so that a
                    total of 4 cm-pm pods will be running after the request.
                    If you have N worker nodes with P running cm-pm pods, setting
                    numpods to more than available will be ignored and only
                    starts (N-P) pods.  If nodes are listed, this option will
                    be ignored even if it is set. You can run one cm-pm pod
                    per worker node.
                  type: integer
                  example: 3
                  default: 0
      responses:
        "200":
          description: Success
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Remove CPS cm-pm pods
      description: Remove CPS cm-pm pod from specified nodes.
      tags:
        - deployment
      parameters:
        - in: query
          name: nodes
          description: List of node names from which to delete CPS cm-pm pods
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Success
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
tags:
  - name: contents
  - name: transports
  - name: deployment
servers:
  - url: /apis/v2/cps
components:
  parameters:
    ArtifactID:
      in: path
      name: artifactID
      required: true
      description: Uniquely identifies an artifact.
      schema:
        type: string
        format: uuid
  responses:
    DeploymentStatusResponse:
      description: CM-PM pod deployment status response data
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WokerNodeData"
    ContentAttributeData:
      description: Content attribute
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContentAttribute"
    ContentAttributeList:
      description: Content attribute
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ContentAttribute"
    TransportAttributeData:
      description: Transport attribute
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TransportAttribute"
    AddContentResponseData:
      description: Content Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContentData"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
  schemas:
    ArtifactID:
      description: Unique identifier of content
      type: string
      format: uuid
      example: 03602894a457b4bb1b0cf20bf6384706
    TransportType:
      description: Transport type data. Transport type is "dvs".
      type: string
      example: dvs
    S3path:
      description: S3 path for artifact
      type: string
      example: s3://boot-images/B14A152A-2ACB-4980-BF8D-91BAA8178FE0/rootfs
    Etag:
      description: Unique identifier of artifact
      type: string
      example: 1f8ada2ce841b291cfcd6b9b4b645044-2
    TransportServer:
      description: Transport server IP address
      type: string
      example: IP-add1
    ErrorMessages:
      description: Error message
      type: string
      example: Something failed.
    ExportStatus:
      description: Export status data
      type: object
      properties:
        type:
          $ref: "#/components/schemas/TransportType"
        status:
          description: Export status
          type: string
          example: ready
          enum:
            - ready
            - notready
            - error
    ContentData:
      description: Associates S3 path to content data.
      type: object
      properties:
        artifactID:
          description: Artifact ID is deprecated - set s3path instead.
          type: string
          format: uuid
          example: c3b72f49-33b0-4617-b456-70c9bc8e3edb
        transport:
          description: Transport types
          type: array
          items:
            $ref: "#/components/schemas/TransportType"
        s3path:
          $ref: "#/components/schemas/S3path"
        etag:
          $ref: "#/components/schemas/Etag"
    TransportData:
      description: Associates S3 path to transport type data.
      type: object
      properties:
        transport:
          $ref: "#/components/schemas/TransportType"
        s3path:
          $ref: "#/components/schemas/S3path"
        etag:
          $ref: "#/components/schemas/Etag"
      required:
        - s3path
        - transport
    ReplicaStatus:
      description: Replica status
      type: object
      properties:
        replicaID:
          description: Replica server ID
          example: replica_id1
          type: string
        status:
          description: Replica server status
          example: ready
          type: string
        detail:
          description: Human readable status for the replica server
          example: e6849c8d-8f25-40f3-aecd-78b6c7cfcbac ... ready
          type: string
    ContentReplicasData:
      description: Content or Transport replica data
      type: object
      properties:
        ready:
          description: Content replica ready count.
          example: 1
          type: integer
        total:
          description: Total number of content replicas.
          example: 1
          type: integer
        status:
          description: List of all content replica status
          type: array
          items:
            $ref: "#/components/schemas/ReplicaStatus"
    ContentAttribute:
      description: Content attribute data
      type: object
      properties:
        artifactID:
          $ref: "#/components/schemas/ArtifactID"
        s3path:
          $ref: "#/components/schemas/S3path"
        exportStatus:
          description: List of export status
          type: array
          items:
            $ref: "#/components/schemas/ExportStatus"
        transports:
          description: Transport types
          type: array
          items:
            $ref: "#/components/schemas/TransportType"
        contentReplicas:
          $ref: "#/components/schemas/ContentReplicasData"
        exportPath:
          description: Transport server path
          type: string
          example: /basePath/ArtifactID
        ERROR:
          type: array
          items:
            $ref: "#/components/schemas/ErrorMessages"
    TransportReplicaData:
      description: Transport replica data
      type: object
      properties:
        type:
          $ref: "#/components/schemas/TransportType"
        ready:
          description: Content replica ready count. This is a count of pods that have the
            content and are ready.
          example: 1
          type: integer
        total:
          description: Total number of content replicas.
          example: 1
          type: integer
        readyForMount:
          description: Status flag to indicate that an endpoint is ready to be mounted
            using the selected transport type.
          example: true
          type: boolean
        status:
          description: List of all content replica status
          type: array
          items:
            $ref: "#/components/schemas/ReplicaStatus"
        exportPath:
          description: Transport server path
          type: string
          example: /basePath/ArtifactID
        servers:
          type: array
          items:
            $ref: "#/components/schemas/TransportServer"
    TransportAttribute:
      description: Transport attribute data
      type: object
      properties:
        artifactID:
          $ref: "#/components/schemas/ArtifactID"
        transports:
          description: List of all transport replica data
          type: array
          items:
            $ref: "#/components/schemas/TransportReplicaData"
        ERROR:
          type: array
          items:
            $ref: "#/components/schemas/ErrorMessages"
    ContainerStatus:
      description: Container status data
      type: object
      properties:
        name:
          description: Name of the container
          type: string
        readiness:
          description: Readiness of the container
          type: boolean
        restartcount:
          description: Restart count
          type: integer
        state:
          description: State of the container
          type: string
    WokerNodeData:
      description: Worker node data
      type: object
      properties:
        node:
          description: Name of the node that the pod is running
          type: string
        podname:
          description: Name of the cps pod
          type: string
        cpspods:
          description: List of CPS container data
          type: array
          items:
            $ref: "#/components/schemas/ContainerStatus"
    ProblemDetails:
      description: An error response for RFC 7807 problem details.
      type: object
      properties:
        detail:
          description: A human-readable explanation specific to this occurrence of the
            problem. Focus on helping correct the problem, rather than giving
            debugging information.
          type: string
        errors:
          description: An object denoting field-specific errors. Only present on error
            responses when field input is specified for the request.
          type: object
        instance:
          description: A relative URI reference that identifies the specific occurrence of
            the problem.
          format: uri
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
        title:
          description: Short, human-readable summary of the problem, should not change by
            occurrence.
          type: string
        type:
          default: about:blank
          description: Relative URI reference to the type of problem which includes human
            readable documentation.
          format: uri
          type: string

