#
# MIT License
#
# (C) Copyright 2020-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
openapi: "3.0.2"
info:
  title: "User Access Service"
  description: |
    The User Access Service (UAS) creates and deletes
    User Access Instances (UAIs). The UAI is a containerized
    SSHd environment, built using a specific OS as a base, and
    contains libraries, commands, and utilities necessary for application
    development.

    A user may ssh to a UAI in order to build, run, and debug applications.
    The available images and volumes are configured by a system administrator.
    The UAI runs on a non-compute node.


    ## Resources


    ### /images

    An image, identified by its *imagename*, is a UAI container image.
    There is potential for different containerized images to be available,
    each built using different components/versions.

    ### /mgr-info

    Return the version of this service.

    ### /uas

    Create, delete, or list the User Access Instance(s) belonging to
    the requesting user.  When a user requests a new UAI, the UAS
    service returns status and connection information about the
    newly created UAI or previously created UAIs.

    ### /uais

    List or delete User Access Instance(s).  The operations here are
    a subset of what is available in /admin/uais, which provides more
    flexible parameterization of searches and deletes.  That path should
    be used instead of this.  This path is deprecated but will be kept
    for the foreseeable future to support legacy procedures and code.

    ### /admin/uais

    List, retrieve, create, and delete UAIs for all users administratively.
    This API path permits an administrator or authorized application to
    create UAIs of a specified class for specified users (as opposed to
    only creating UAIs for the calling user).  It also permits an
    administrator or authorized application to list running UAIs optionally
    filtered by user or class and to retrieve information about any given
    UAI.  Finally it permits an administrator or authorized application to
    delete any given UAI.

    ### /admin/config/images

    This is where an administrator can list, create, get, or delete UAI
    image entries in the list of available container image names.

    ### /admin/config/volumes

    This is where an administrator can list, create, get, modify, or
    delete entries in the list of available volumes.

    ### /admin/config/resources

    This is where an administrator can list, create, get, modify, or
    delete resource limit / request configurations that can be used on
    UAI / Broker Classes to specify Kubernetes limits for UAIs of a given
    class.

    ### /admin/config/classes

    This is where an administrator can list, create, get, modify, or
    delete UAI / Broker Class definitions.  UAI / Broker Classes
    provide templates for different UAI or Broker configurations,
    allowing an administrator to assign specific volumes, resource
    configurations, and images to all UAIs or brokers created using
    a given class.

    ## Workflows


    ### Single User Workflow

    The single user workflow allows individual users to create UAIs
    directly through the UAS API that run on behalf of the creating
    user and are controlled by the creating user.  To be authorized as
    a creating user or to use a UAI in this workflow, a user must have
    Linux user attributes configured in the API Gateway authenticator:
    uidNumber, gidNumber, userName, name, homeDirectory and
    loginShell.  The user may then authenticate with the API Gateway
    authenticator and make the calls in this workflow to create and
    manage UAIs owned by that user.

    There are two modes of operation of the single user workflow,
    which are determined by the configuration of the UAS.  The default
    mode preserves legacy behavior in which creating a UAI using a
    POST operation to the /uas path creates a UAI belonging to the
    authenticated user using all configured volumes, the default
    resource limits and requests on the UAI Kubernetes namespace, and
    the specified (or default) UAI image.  This happens if no default
    Class is configured (see Administrative Workflow).  If a
    default Class is configured, a POST on the /uas path creates a
    UAI using the UAI image, volume list, and resource limits and
    requests (if any) configured in the default Class.

    #### GET /uas

    Get the list of available, user-specific UAIs.

    #### POST /uas

    Request to create a new User Access Instance (UAI).
    When an authenticated user requests a new UAI, the User Access
    Service returns status and connection information for the newly
    created UAI, which will be available via ssh.
    Most properties of UAI are static for the life of a UAI.
    UAIs are not shared - they do not have multiple owners.

    #### ssh to the new UAI

    Build, run, debug applications.

    #### DELETE /uas

    Cleanup your own UAI.  This operation is restricted to owner of the UAI.

    ### Administrative Workflow

    The Administrative workflow covers two activities: management of UAIs for
    users and configuration of the UAS resources used in the creation of UAIs.

    #### UAI Management

    Administrative UAI Management consists of creating, listing,
    retrieving and deleting UAIs for use by specified users.  It is
    supported by the following operations:

    #### GET /admin/uais

    Retrieve a list of UAIs with all their attributes and status, optionally
    filtered by the owning user and / or the class-id used to create the UAI.

    #### Get /admin/uais/{uai_name}

    Retrieve the attributes and status of a specified UAI by name.

    #### POST /admin/uais

    Create a UAI for a specified user, with a specified Class, /etc/password
    string, and SSH public-key.

    #### UAS Configuration
    
    UAS Configuration covers the following:

    * UAI images
    * Volume Mounts
    * Resource Limits and Requests
    * UAI / Broker Classes

    UAI images are the container images used to create UAIs.  In the
    Single User Workflow (above) when no default Class is defined,
    the user can request a specific UAI image to be used.  In the
    Administrative Workflow, a UAI image can be associated with a UAI / Broker
    Class and will then be used to create any UAI based on that class.
    At most 1 UAI image may be marked as the 'default' image, which
    will cause it to be used when creating a UAI in the Single User
    Workflow if no image is specified in the POST on the /uas path and
    no default Class is configured.

    Volume Mounts are used in UAIs to make external data available to
    the UAI container.  More information about different types of
    Volume Mounts can be found in the Kubernetes documentation.  In
    the Single User workflow, when no default Class is configured,
    all configured volume mounts are mounted on any UAI created. Each
    UAI / Broker Class contains a list of volume mounts which can be any subset
    of the total set configured.  When a UAI is created using a UAI / Broker
    Class, either administratively or via a default Class in the
    single user workflow, only those volumes listed in the Class
    are mounted in the resulting UAI.

    Resource Limit / Request configurations allow a UAI to override
    the default Kubernetes resource limits and requests configured on
    the UAI Kubernetes namespace.  For more information on Kubernetes
    resource limits and requests, see the Kubernetes documentation.  A
    Resource Limit / Request configuration can be associated with a
    UAI / Broker Class, in which case any UAI created using that class, either
    administratively or using the single user workflow and a default
    UAI / Broker Class, will use the specified resource limits and requests
    instead of the UAI namespace default setting.

    UAI / Broker Classes allow administrators to define templates for creating
    UAIs that define the UAI image to be used, the list of Volume
    Mounts to be mounted in the UAI and the Resource Limits and
    Requests to be used when scheduling the UAI.  At most one UAI / Broker
    Class may be marked as 'default' in which case it will be used
    unconditionally for all UAIs created using the Single User
    Workflow.

    #### GET /images

    Get a list of container images available for use by a UAI.

    #### GET /admin/config/volumes

    Get a list of volumes available for use by UAIs and UAI / Broker Classes

    #### GET /admin/config/images

    Get a list of images available for creating UAIs and UAI / Broker Classes

    #### GET /admin/config/resources

    Get a list of resource limit / request configurations available for
    creating UAI / Broker Classes

    #### GET /admin/config/classes

    Get a list of available UAI / Broker Classes

    #### POST /admin/config/volumes

    Add a volume to the list of volumes that will be mounted in new UAIs.

    #### POST /admin/config/images

    Add image name to list of valid images.

    #### POST /admin/config/resources

    Create a resource limit / request configuration that can be used for
    creating UAI / Broker Classes

    #### POST /admin/config/classes

    Create a new UAI / Broker Class

    #### GET /admin/config/images/{image_id}

    Get information about a specific image available for making UAIs.

    #### GET /admin/config/volumes/{volume-id}

    Get information about a specific volume used in UAIs

    #### GET /admin/config/resources/{resource_id}

    Get information about a specific resource limit / request configuration
    for creating UAI / Broker Classes

    #### GET /admin/config/classes/{class_id}

    Get information about a specific UAI / Broker Class

    #### PATCH /admin/config/images/{image_id}

    Update the entry for the specified image in the list of UAI
    container images.

    #### PATCH /admin/config/volumes/{volume_id}

    Update the entry for the specified volume in the list of volumes
    mounted in UAI containers.

    #### PATCH /admin/config/resources/{resource_id}

    Update the contents of a specific resource limit / request configuration
    for creating UAI / Broker Classes

    #### PATCH /admin/config/classes/{class_id}

    Update the contents of a specific UAI / Broker Class

    #### DELETE /admin/config/images/{image_id}

    Delete the specified image from the list of available UAI
    container images.

    #### DELETE /admin/config/volumes/{volume_id}

    Delete the specified volume from the list of available volumes.

    #### DELETE /admin/config/resources/{resource_id}

    Delete the specified resource limit / request configuration from the
    list of available choices.

  version: "1.20.0"

servers:
  - url: "/apis/uas-mgr/v1"

paths:

  /:

    get:
      summary: "Return supported UAS API versions"
      description: "Return supported UAS API versions."
      operationId: "root_get"
      tags:
      - "versions"
      - "cli_ignore"
      responses:
        200:
          description: "Version response"
 # Need response schema with example?
      x-openapi-router-controller: "swagger_server.controllers.versions_controller"

  /uas:

    get:
      summary: "List UAIs"
      description: "List all available UAIs for username."
# Mention how/when username is authenticated
      operationId: "get_uais_for_user"
      tags:
      - "uas"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                 $ref: "#/components/schemas/UAI"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Create a UAI"
      description: |
        Create a new UAI using the specified image.  It will be accessible
        via ssh, and projected onto ports, if ports are specified.
      operationId: "create_uai"
      tags:
      - "uas"
      parameters:
      - name: "imagename"
        in: "query"
        description: "Image to use for UAI"
        required: false
        schema:
          type: "string"
        example: "docker.local/cray/cray-uas-sles15sp1:latest"
      - name: "ports"
        in: "query"
        description: |
          Additional ports to project from the UAI besides ssh. Restricted
          to ports 80, 443, and 8888.
        required: false
        schema:
          type: "string"
        example: "80,443"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                publickey:
                  description: "File containing public ssh key for the user"
                  type: "string"
                  format: "binary"
      responses:
        201:
          description: "UAI created"
          content:
            application/json:
              schema:
                type: "object"
# $ref: More details for response body
        404:
          description: "Unable to create UAI"
          content:
            application/json:
              schema:
                type: "object"
# $ref: What is in schema if failure to create?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Delete a UAI"
      description: |
        Delete specified UAI(s). Takes a list of UAI names and deletes the
        associated UAI(s).
      operationId: "delete_uai_by_name"
      tags:
      - "uas"
      parameters:
      - name: "uai_list"
        description: "comma-separated list of UAI names"
        in: "query"
        required: true
        style: form
        explode: false
        schema:
          type: "array"
          items:
            type: "string"
        example: ["uai-asdfgh098","uai-qwerty123"]
      responses:
        200:
          description: "UAIs deleted"
        404:
          description: "Failed to delete UAI with {uai_id}"
 # Did whole list fail or were there specific uais that failed?  Schema.
 # ref: ?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /images:

    get:
      summary: "List UAS images"
      description: "List all available UAS images."
      operationId: "get_uas_images"
      tags:
      - "images"
      responses:
        200:
          description: "UAS Image List"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image_list"
        404:
          description: "UAS Images not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /mgr-info:

    get:
      summary: "List UAS info"
      description: "Return User Access Service information."
      operationId: "get_uas_mgr_info"
      tags:
      - "mgr-info"
      responses:
        200:
          description: "UAS-MGR Info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UAS_mgr_info"
        404:
          description: "UAS-MGR Info not found"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /uais:

    get:
      summary: "List UAIs"
      description: |
        List all UAIs on the system.  There is a more general purpose way to
        list UAIs that implements a superset of this functionality under the
        /admin/uais path.  This path is deprecated in favor of that path.
      operationId: "get_all_uais"
      tags:
      - "uais"
      parameters:
      - name: "username"
        in: "query"
        description: "List all UAIs matching this username"
        required: false
        schema:
          type: "string"
        example: "uastest"
      - name: "host"
        in: "query"
        description: "List all UAIs running on this host"
        required: false
        schema:
          type: "string"
        example: "ncn-w001"
      responses:
        200:
          description: "UAI List"
          content:
            application/json:
              schema:
                type: "object"
        404:
          description: "No UAIs found"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Delete UAIs"
      description: |
        Delete all UAIs on the system.  There is a more general purpose version
        of this operation under the /admin/uais path which implements a superset
        of the functionality found here.  This path is deprecated in favor of
        /admin/uais.
      operationId: "delete_all_uais"
      tags:
      - "uais"
      - "cli_danger$This will delete all running UAIs, Are you sure?"
      parameters:
      - name: "username"
        in: "query"
        description: "delete all UAIs matching this username"
        required: false
        schema:
          type: "string"
        example: "uastest"
      responses:
        200:
          description: "All UAIs Deleted"
        404:
          description: "No UAIs found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/uais:
    get:
      summary: "List all UAIs"
      description: |
        List all UAIs, optionally filtered by Class (specify the Class ID
        in the call) and / or owning user (specify the username in the call).
      operationId: "get_uais_admin"
      tags:
      - "admin"
      - "uais"
      parameters:
      - name: "class_id"
        in: "query"
        description: |
          The class-id (UUID) of UAIs to retrieve.  If specified only UAIs
          of this class will be returned.  If omitted, UAIs of all classes
          and meeting all other filtering constraints will be returned.
        required: false
        schema:
          type: "string"
        example: "fe59aab4-2657-749f-f48a-9911eba0f3c9"
      - name: "owner"
        in: "query"
        description: |
          The owning username of UAIs to retrieve.  If specified only UAIs
          owned by this user will be returned.  If omitted, UAIs owned by any
          user and meeting all other filtering constraints will be returned.
        required: false
        schema:
          type: "string"
        example: "swilliams"
      responses:
        200:
          description: "UAI List"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UAI"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Create a UAI administratively"
      description: |
        Create a UAI of a specified Class for an (optionally) specified user,
        providing the (optional) /etc/passwd string to be used for that user
        in the UAI and the (optional) SSH public-key that will be used to
        access the UAI by the user.

        Both UAIs for use by users and Broker UAIs are consider UAIs within
        this API.  Some attributes that apply to UAIs for use by users do not
        apply to Broker UAIs because the function of a Broker UAI is different.
      operationId: "create_uai_admin"
      tags:
      - "admin"
      - "uais"
      parameters:
      - name: "class_id"
        in: "query"
        required: false
        schema:
          type: "string"
        description: |
          The Class ID (UUID) of the class to be used as a template for
          creating the UAI.  If this is omitted and a default Class is
          configured, the default class will be used.  If a default class
          is not configured, omitting this results in an error.
        example: "fea49ab5-6752-4f97-84af-09119ba3e9cf"
      - name: "owner"
        in: "query"
        required: false
        schema:
          type: "string"
        description: |
          The username of the owner of the UAI to be created.  The owner
          may be omitted for Broker UAIs because Broker UAIs run as
          UAS system services and allow SSH connections from any
          user.  Alternatively, the username may be used to label a Broker
          UAI as needed by the site.  Whether or not the username is used
          within a UAI is determined by the code running in the UAI image.
          Brokers UAIs will generally not be used in the running Broker UAI
          but will be used in formatting the UAI name and similar activities.
        example: "swilliams"
      - name: "passwd_str"
        in: "query"
        required: false
        schema:
          type: "string"
        description: |
          The /etc/passwd style string describing the user inside the UAI.
          The format is: `<name>::<uid>:<gid>::::<full-name>:<home-dir>:<shell>`
          This can be omitted for Broker UAIs and UAIs that are connected to an
          external authentication source like LDAP.
        example: "swilliams::12345:6789::::Steven Williams:/home/users/swilliams:/bin/bash"
      - name: "publickey_str"
        in: "query"
        required: false
        schema:
          type: "string"
        description: |
          The SSH Public key used to authorize use of the UAI through SSH.  This is a
          string in the form of a public key, for example the contents of an id_rsa.pub
          file.
      - name: "uai_name"
        in: "query"
        required: false
        schema:
          type: "string"
        description: |
          An optional name to be assigned to the UAI on creation.  If this is
          not specified, a default name of the form <owner>-uai-<short-uuid>
          is used.  The UAI name is used both as the name of the UAI in the
          UAS and as the external DNS hostname of a publicly accessible UAI.
          If the requested UAI name is the same as an already running UAI,
          no new UAI is created, but the information about the existing UAI
          is returned.  UAI names may contain up to 63 lower case alphanumeric
          or '-' characters, and must start and end with an alphanumeric
          character.
        example: "my-broker"
      responses:
        201:
          description: "UAI Created"
          content:
            application/json:
             schema:
                $ref: "#/components/schemas/UAI"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Delete all or selected UAIs"
      description: |
        Delete UAIs, optionally selecting by Class (specify the Class
        ID in the call) and / or owning user (specify the username in
        the call). Alternatively, delete a list of UAI names.  If a
        list of UAI names is provided, the other constraints are not
        applied. If no selection is done, delete all UAIs on the
        system.
      operationId: "delete_uais_admin"
      tags:
      - "admin"
      - "uais"
      parameters:
      - name: "class_id"
        in: "query"
        description: |
          The class-id (UUID) of UAIs to delete.  If specified only UAIs
          of this class will be deleted.  If omitted, UAIs of all classes
          and meeting the other selection criteria will be deleted.
        required: false
        schema:
          type: "string"
        example: "fe59aab4-2657-749f-f48a-9911eba0f3c9"
      - name: "owner"
        in: "query"
        description: |
          The owning username of UAIs to delete.  If specified only UAIs
          owned by this user will be deleted.  If omitted, UAIs owned by any
          user and meeting the other selection criteria will be deleted.
        required: false
        schema:
          type: "string"
        example: "swilliams"
      - name: "uai_list"
        description: |
          Comma-separated list of UAI names.  If this is supplied 'owner'
          and 'class-id' are ignored.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "array"
          items:
            type: "string"
        example: ["uai-asdfgh098","uai-qwerty123"]
      responses:
        200:
          description: "UAIs deleted"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UAI"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/uais/{uai_name}:
    get:
      summary: "Retrieve information on a UAI"
      description: |
        Retrieve information on the specified UAI.
      operationId: "get_uai_admin"
      tags:
      - "admin"
      - "uais"
      parameters:
      - name: "uai_name"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The name of the UAI to retrieve.
        example: "uai-swilliams-cc09d2d2"
      responses:
        200:
          description: "UAI Description"
          content:
            application/json:
             schema:
                $ref: "#/components/schemas/UAI"

        404:
          description: "UAI not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config:

    delete:
      summary: "Remove local configuration and revert to default configuration"
      description: |
        Remove any locally applied configuration (configuration applied through
        the admin/config API) and revert to the default configuration that
        is installed in the system.  This can be used both to reset to
        factory defaults and to move to a new set of defaults if the existing
        one is replaced.  All locally applied configuration will be lost if
        with this request.
      operationId: "delete_local_config_admin"
      tags:
      - "config"
      - "cli_danger$This will delete all locally applied configuration, Are you sure?"

      responses:
        200:
          description: "Local configuration reset to defaults"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/images:

    post:
      summary: "Add an image"
      description: |
        Add valid image name to configuration. Does not create or
        upload container image.  Optionally, set default.
      operationId: "create_uas_image_admin"
      tags:
      - "images"
      - "config"
      parameters:
      - name: "imagename"
        in: "query"
        description: "Image to create"
        required: true
        schema:
          type: "string"
        example: "docker.local/cray/cray-uas-sles15sp1:latest"
      - name: "default"
        in: "query"
        description: "default image (true/false)"
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        201:
          description: "Image added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        304:
          description: "Image not added"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "List UAS images"
      description: "List all available UAS images."
      operationId: "get_uas_images_admin"
      tags:
      - "images"
      - "config"
      responses:
        200:
          description: "UAS Image List"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        404:
          description: "UAS Images not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/images/{image_id}:

    get:
      summary: "Get image info"
      description: "Get a description of the named image"
      operationId: "get_uas_image_admin"
      tags:
      - "images"
      - "config"
      parameters:
      - name: "image_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The image identifier (UUID) of the image to be retrieved from the
          configuration.
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      responses:
        200:
          description: "UAS Image"
          content:
            application/json:
             schema:
                $ref: "#/components/schemas/Image"
        404:
          description: "UAS Image {image_id} not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Update an image"
      description:
        Update an image, specifically this can set or unset the 'default' flag.
      operationId: "update_uas_image_admin"
      tags:
      - "images"
      - "config"
      parameters:
      - name: "image_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The image identifier (UUID) of the image to be updated in the
          configuration.
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      - name: "imagename"
        in: "query"
        required: false
        schema:
          type: "string"
        description: |
          The image name to be used by instances based on this UAI
          instance.
        example: "docker.local/cray/cray-uas-sles15sp1:latest"
      - name: "default"
        in: "query"
        description: "default image (true/false)"
        required: false
        schema:
          type: boolean
        example: false
      responses:
        201:
          description: "Image updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Remove the imagename from set of valid images"
      description: |
        Delete the named image from the set of valid UAI container images.
      operationId: "delete_uas_image_admin"
      tags:
      - "images"
      - "config"
      parameters:
      - name: "image_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The image identifier (UUID) of the image to be deleted from the
          configuration.
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      responses:
        200:
          description: "Image removed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        404:
          description: "Failed to delete image {image_id}"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/volumes:

    post:
      summary: "Add a volume"
      description: |
        Add a volume to the volume list in the configuration.  The
        volume list is used during UAI creation, so this request only
        applies to UAIs subsequently created.  Modifying the volume
        list does not affect existing UAIs.

      operationId: "create_uas_volume_admin"
      tags:
      - "volumes"
      - "config"
      parameters:
      - name: "volumename"
        in: "query"
        description: "Volume to create"
        required: true
        schema:
          type: "string"
        example: "my-mount"
      - name: "mount_path"
        in: "query"
        description: "Mount path inside the UAI"
        required: true
        schema:
          type: "string"
        example: "/mnt/test"
      - name: "volume_description"
        in: "query"
        description: |
          JSON description of a Kubernetes volume to be
          mounted in UAI containers.  This is the JSON
          equivalent of whatever YAML you would normally
          apply to Kubernetes to attach the kind of volume
          you want to a pod.  There are many kinds of
          volumes, the examples given here illustrate some
          options:
          {
            "host_path": {
              "path": "/data",
              "type": "DirectoryOrCreate"
            }
          }
          or
          {
            "secret": {
              "secretName": "my-secret"
            }
          }
          or
          {
            "config_map": {
              "name": "my-configmap",
              "items": {
                "key": "flaps",
                "path": "flaps"
              }
            }
          }
        required: true
        schema:
          type: "string"
        example: "{ \"config_map\": { \"name\": \"my-configmap\" } }"
      responses:
        201:
          description: "Volume added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volume"
        304:
          description: "Volume not added"
          content:
            application/json:
              schema:
                type: "string"
        400:
          description: "Invalid type for host, volume not added"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "List volumes"
      description: |
        The volume list in the configuration is used during UAI creation.
        This list does not necessarily relate to UAIs previously created.
        This call does not affect the k8s volume itself.

      operationId: "get_uas_volumes_admin"
      tags:
      - "volumes"
      - "config"
      responses:
        200:
          description: "UAS Volume list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Volume"
        404:
          description: "UAS Volumes not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/volumes/{volume_id}:

    get:
      summary: "Get volume info for volume_id"
      description: "Get volume info for volume_id"
      operationId: "get_uas_volume_admin"
      tags:
      - "volumes"
      - "config"
      parameters:
      - name: "volume_id"
        in: "path"
        description: |
          The volume identifier (UUID) of the volume to retrieve
          from the configuration.
        required: true
        schema:
          type: "string"
        example: "e2918379-7df1-4086-92fe-e3ec777a9b2e"
      responses:
        200:
          description: "UAS Volume"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volume"
        404:
          description: "UAS Volume {volumename} not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Update a volume"
      description: |
        Update a volume to be mounted in UAS images. This has no
        effect on running UAIs and does not change the volume itself
        in any way, but it can modify the relationship between
        future UAI containers and the volume.
      operationId: "update_uas_volume_admin"
      tags:
      - "volumes"
      - "config"
      parameters:
      - name: "volume_id"
        in: "path"
        description: |
          The volume identifier (UUID) of the volume to update
          in the configuration.
        required: true
        schema:
          type: "string"
        example: "e2918379-7df1-4086-92fe-e3ec777a9b2e"
      - name: "volumename"
        in: "query"
        description: |
          The name of the volume as it is applied to the UAI
          Kubernetes pod.  Must conform to Kubernetes volume
          naming conventions (see Kubernetes documentation for
          details).
        required: false
        schema:
          type: "string"
        example: "my-mount"
      - name: "mount_path"
        in: "query"
        description: "Mount path for the volume inside the UAI"
        required: false
        schema:
          type: "string"
        example: "/mnt/test"
      - name: "volume_description"
        in: "query"
        description: |
          JSON description of a Kubernetes volume to be
          mounted in UAI containers.  This is the JSON
          equivalent of whatever YAML you would normally
          apply to Kubernetes to attach the kind of volume
          you want to a pod.  There are many kinds of
          volumes, the examples given here illustrate some
          options:
          {
            "host_path": {
              "path": "/data",
              "type": "DirectoryOrCreate"
            }
          }
          or
          {
            "secret": {
              "secretName": "my-secret"
            }
          }
          or
          {
            "config_map": {
              "name": "my-configmap",
              "items": {
                "key": "flaps",
                "path": "flaps"
              }
            }
          }
        required: false
        schema:
          type: "string"
        example: "{ \"config_map\": { \"name\": \"my-configmap\" } }"
      responses:
        201:
          description: "Volume updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volume"
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volume"
        400:
          description: "Invalid type for host, volume not updated"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Remove volume from the volume list"
      description: |
        Does not affect existing UAIs.
        Remove the volume from the list of valid volumes.
        The actual volume itself is not affected in any way.

      operationId: "delete_uas_volume_admin"
      tags:
      - "volumes"
      - "config"
      parameters:
      - name: "volume_id"
        in: "path"
        description: |
          The volume identifier (UUID) of the volume to delete
          from the configuration.
        required: true
        schema:
          type: "string"
        example: "e2918379-7df1-4086-92fe-e3ec777a9b2e"
      responses:
        200:
          description: "Volume removed from list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volume"
        404:
          description: "Failed to delete volume {volume_id}"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/resources:

    post:
      summary: "Add a resource limit / request configuration"
      description: |
        Add a new resource limit / request configuration for potential use in
        creating Classes.  Resource limits and requests are described in
        the Kubernetes documentation.
      operationId: "create_uas_resource_admin"
      tags:
      - "resources"
      - "config"
      parameters:
      - name: "comment"
        in: "query"
        description: |
          A descriptive comment explaining the intended use of the resource
          limit / request configuration.  Defaults to no description.
        required: false
        schema:
          type: "string"
        example: |
          Resource limits for use on UAIs used in large compilation
          workflows.
      - name: "limit"
        in: "query"
        description: |
          JSON description of a Kubernetes resource limit to be applied to
          UAIs created using a UAI / Broker Class that references this resource
          configuration.  This is the JSON equivalent of whatever you would
          normally apply as a limit to a pod.  For example, to limit
          a UAI to 300 Millicpus and 250 Mibibytes of memory:
          { "cpu": "300m", "memory": "250Mi" }
        required: false
        schema:
          type: "string"
        example: "{ \"cpu\": \"300m\", \"memory\": \"250Mi\" }"
      - name: "request"
        in: "query"
        description: |
          JSON description of a Kubernetes resource request to be
          applied to UAIs created using a UAI / Broker Class that references
          this resource configuration.  This is the JSON equivalent of
          whatever you would normally apply as a request to a pod or
          deployment.  For example, to request a UAI with 300
          Millicpus and 250 Mibibytes of memory:
          { "cpu": "300m", "memory": "250Mi" }
        required: false
        schema:
          type: "string"
        example: "{ \"cpu\": \"300m\", \"memory\": \"250Mi\" }"
      responses:
        201:
          description: "Resource configuration added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        400:
          description: "Invalid limit or request specified"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "List Resource Limit / Request Configurations"
      description: "List all available resource limit / request configurations"
      operationId: "get_uas_resources_admin"
      tags:
      - "resources"
      - "config"
      responses:
        200:
          description: "UAS Resource Limit / Request Configuration List"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"
        404:
          description: "UAS Resource Limit / Request Configuration  not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/resources/{resource_id}:

    get:
      summary: "Get a Resource Limit / Request Configuration item"
      description: |
        Get a description of the specified resource limit / request
        configuration item.
      operationId: "get_uas_resource_admin"
      tags:
      - "resources"
      - "config"
      parameters:
      - name: "resource_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The resource identifier (UUID) of the resource limit / request
          config to be retrieved from the configuration.
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      responses:
        200:
          description: "Resource Limit / Request Configuration Item"
          content:
            application/json:
             schema:
                $ref: "#/components/schemas/Resource"
        404:
          description: "Resource Configuration {resource_id} not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Update a Resource Limit / Request Configuration Item"
      description: |
        Update a resource limit / request configuration item.
      operationId: "update_uas_resource_admin"
      tags:
      - "resources"
      - "config"
      parameters:
      - name: "resource_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The resource identifier (UUID) of the resource limit / request config
          to be updated in the configuration.
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      - name: "comment"
        in: "query"
        description: |
          A descriptive comment explaining the intended use of the resource
          limit / request configuration.  Defaults to no description.
        required: false
        schema:
          type: "string"
        example: |
          Resource limits for use on UAIs used in large compilation
          workflows.
      - name: "limit"
        in: "query"
        description: |
          JSON description of a Kubernetes resource limit to be applied to
          UAIs created using a UAI / Broker Class that references this resource
          configuration.  This is the JSON equivalent of whatever you would
          normally apply as a limit to a pod.  For example, to limit
          a UAI to 300 Millicpus and 250 Mibibytes of memory:
          { "cpu": "300m", "memory": "250Mi" }
        required: false
        schema:
          type: "string"
        example: "{ \"cpu\": \"300m\", \"memory\": \"250Mi\" }"
      - name: "request"
        in: "query"
        description: |
          JSON description of a Kubernetes resource request to be
          applied to UAIs created using a UAI / Broker Class that references
          this resource configuration.  This is the JSON equivalent of
          whatever you would normally apply as a request to a pod or
          deployment.  For example, to request a UAI with 300
          Millicpus and 250 Mibibytes of memory:
          { "cpu": "300m", "memory": "250Mi" }
        required: false
        schema:
          type: "string"
        example:  "{ \"cpu\": \"300m\", \"memory\": \"250Mi\" }"
      responses:
        201:
          description: "Resource updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Remove a Resource Limit / Request Configuration Item"
      description: |
        Delete the specified Resource Limit / Request configuration item from
        the configuration.
      operationId: "delete_uas_resource_admin"
      tags:
      - "resources"
      - "config"
      parameters:
      - name: "resource_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The resource identifier (UUID) of the resource limit / request
          configuration to be removed from the configuration.
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      responses:
        200:
          description: "Resource configuration removed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        404:
          description: "Failed to delete resource configuration {resource_id}"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/classes:

    post:
      summary: "Add a UAI / Broker Class"
      description: |
        Add a new UAI class for use as a template to construct UAIs
        administratively.
      operationId: "create_uas_class_admin"
      tags:
      - "classes"
      - "config"
      parameters:
      - name: "comment"
        in: "query"
        description: |
          A descriptive comment explaining the intended use of the Class.
          Defaults to no description.
        required: false
        schema:
          type: "string"
        example: |
          UAI used to build applications for testing and development.
      - name: "default"
        in: "query"
        description: |
          Optionally specify whether this is the default UAI / Broker
          Class. There can be at most one default Class in effect
          at any given time.  If a default Class is present, then
          UAIs created using the Single User Workflow will use that
          Class instead of accepting an image name and using all
          of the configured volume mounts and the UAI namespace
          default resource configuration.  Additionally, UAIs created
          in the Administrative Workflow without a specified class will
          use the default Class.  Defaults to False if not specified.

          Setting 'default' to true when another UAI / Broker Class is
          currently the default will cause the new Class to become
          the default and the previous default to stop being the default.
        required: false
        schema:
          type: boolean
        example: false
      - name: "public_ip"
        in: "query"
        description: |
          A flag indicating whether a UAI or Broker created using this
          class will present ports on a public IP address or only on a
          cluster visible IP address.  If not provided, the default is
          false, which makes resulting UAIs or Brokers visible only
          within the cluster.
        required: false
        schema:
          type: boolean
        example: false
      - name: "image_id"
        in: "query"
        description: |
          The image-id of the image to be used in UAIs created from
          this UAI / Broker Class.
        required: true
        schema:
          type: "string"
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      - name: "priority_class_name"
        in: "query"
        description: |
          Optional Kubernetes priority class name to be assigned to
          all UAIs / Brokers using this class.  The priority class
          name is used in Kubernetes to determine scheduling
          (i.e. node placement) priority in case of resource
          exhaustion and to associate resource quotas with Kubernetes
          pods.  If this is omitted, the default class name 'uai-priority'
          is used.
        required: false
        schema:
          type: "string"
        example:  "uai-priority"
      - name: "namespace"
        in: "query"
        description: |
          The K8s namespace where UAIs of this class run.  Defaults to the
          configured UAI namespace.
        required: false
        schema:
          type: "string"
        example: "user"
      - name: "opt_ports"
        in: "query"
        description: |
          A comma-separated list of port numbers on which software running in a
          UAI created using this class may listen.  Unlike `ports` in the
          Single User UAI creation API, the port numbers here are not constrained
          by any configured range of available ports.  Any valid port number is
          legal.
        required: false
        schema:
          type: "string"
        example: "80,443"
      - name: "uai_creation_class"
        in: "query"
        description: |
          For Brokers only, the class ID (UUID)  used to create UAIs
          created by Brokers of this class.  If this is not specified
          on a Broker, and there is a default class specified, the default
          class will be used.  If there is no default class, the
          broker will fail to create UAIs.  If this is specified on a
          non-Broker UAI it has no meaningful effect.
        required: false
        schema:
          type: "string"
        example: "f4e59aab-2765-7f49-f84a-9911eba30f9c"
      - name: "uai_compute_network"
        in: "query"
        description: |
          A flag indicating whether a UAI or Broker created using this
          class will include a network route to compute nodes. This option
          is likely not necessary for Brokers. Single User UAIs will require
          this flag for job launch capabilities.
        required: false
        schema:
          type: boolean
        example: true
      - name: "resource_id"
        in: "query"
        description: |
          Optional resource-id of the resource limit / request configuration
          to be used with UAIs created using this Class.  Default is no
          resource limit / request configuration, in which case UAIs created
          with this Class use the UAI namespace default limits and
          requests.
        required: false
        schema:
          type: "string"
        example:  "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      - name: "volume_list"
        description: |
          Optional comma-separated list of volume-ids specifying the
          volume mounts to be included in the UAIs created using this
          Class.  Defaults to an empty list if not specified, in
          which case none of the available volume mounts will be mounted
          in UAIs created using this Class.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "array"
          items:
            type: "string"
        example: ["af4e59ab-6275-47f9-8f4a-90911eba3f9c","4e5f9aba-2675-7f49-f48a-0119b9a3f9ec"]
      - name: "tolerations"
        description: |
            Optional JSON string containing a JSON list of JSON objects
            describing tolerations that are added to the base toleration
            used in UAIs.  Tolerations allow UAIs to run on nodes that
            have been otherwise 'tainted' against certain activities. See
            Kubernetes documentation of Taints and Tolerations for more
            information on how to taint a node or construct a toleration.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "string"
        example: "[{\"key\": \"gpu_uais_only\", \"operator\": \"Exists\"}]"
      - name: "timeout"
        description: |
            Optional JSON string containing a timeout specification
            for UAIs created using this class.  The value contains a
            JSON string specifying a map with three optional key /
            value pairs, 'soft', 'hard', and 'warning'.  The 'soft'
            value specifies the number of seconds a UAI will run
            before it is eligible for termination due to being idle
            (i.e. no user is logged into it).  The 'hard' value
            specifies the number of seconds the UAI will run before
            being unconditionally terminated, even if a user is logged
            into it.  The 'warning' value specifies the number of
            seconds before the 'hard' timeout at which a warning
            message will be sent to all logged in sessions.  If a
            'soft' value is provided with no 'hard' value, the UAI
            will remain in place (subject to failure or scheduling
            issues) indefinitely as long as there is at least one
            active login session running. The UAI will terminate once
            the 'soft' value is exceeded and there are no longer any
            active login sessions. If a 'hard' value is specified
            without a 'soft' value, the UAI will remain in place until
            the 'hard' value is reached at which point it will
            terminate regardless of logged in sessions.  If both
            'soft' and 'hard' values are specified, the UAI will
            terminate at the 'soft' value if no active login session
            exists and will terminate unconditionally once the 'hard'
            value is reached.  If neither 'soft' nor 'hard' is
            specified, or no timeout parameter is provided at all, the
            UAI will run indefinitely.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "string"
        example: "{\"soft\": \"600\", \"hard\": \"1800\", \"warning\": \"30\"}"
      - name: "service_account"
        description: |
            Optional name of a Kubernetes service account to be assigned to
            UAIs created with this class.  Kubernetes service accounts grant
            access to Kubernetes Role Based Access Control (RBAC).  If not
            specified, the default service account for the namespace in which
            the UAI is created will be used.  Apply service accounts to UAI
            classes with care, since they potentially give UAIs access to
            Kubernetes functions that could be harmful.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "string"
        example: "default"
      - name: "replicas"
        description: |
            The number of UAI replicas created when a UAI of
            this class starts.  For end-user UAI classes this should
            be omitted or set to 1 because having multiple replicas of
            an end-user UAI only consumes resources and introduces
            potential negative interactions with brokers.  For other
            UAI classes, especially Broker UAI classes, setting this
            to a larger value can improve resiliency of the UAI and
            also provide better load-balanced handling of external
            connections.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "string"
        example: "1"
      responses:
        201:
          description: "UAI / Broker Class added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UAIClass"
        400:
          description: "Invalid UAI / Broker Class specified"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "List Available UAI / Broker Classes"
      description: "List all available UAI / Broker Classes"
      operationId: "get_uas_classes_admin"
      tags:
      - "classes"
      - "config"
      responses:
        200:
          description: "UAI / Broker Class List"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UAIClass"
        404:
          description: "UAI / Broker Classes not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/classes/{class_id}:

    get:
      summary: "Get a UAI / Broker Class"
      description: |
        Get a description of a UAI / Broker Class
      operationId: "get_uas_class_admin"
      tags:
      - "classes"
      - "config"
      parameters:
      - name: "class_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The class identifier (UUID) UAI / Broker Class to be retrieved
          from the configuration.
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      responses:
        200:
          description: "UAI / Broker Class"
          content:
            application/json:
             schema:
                $ref: "#/components/schemas/UAIClass"
        404:
          description: "UAI / Broker Class {class_id} not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Update a UAI / Broker Class"
      description: |
        Update the contents of a specified Class.  Changes to a Class
        only affect subsequently created UAIs.  UAIs already created using the
        class continue to use settings from the previous contents of the
        UAI / Broker Class.
      operationId: "update_uas_class_admin"
      tags:
      - "classes"
      - "config"
      parameters:
      - name: "class_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The image identifier (UUID) of the UAI / Broker Class to be updated
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      - name: "comment"
        in: "query"
        description: |
          A descriptive comment explaining the intended use of the Class.
          Defaults to no description.
        required: false
        schema:
          type: "string"
        example: |
          UAI used to build applications for testing and development.
      - name: "default"
        in: "query"
        description: |
          Optionally specify whether this is the default
          Class. There can be at most one default Class in effect
          at any given time.  If a default Class is present, then
          UAIs created using the Single User Workflow will use that
          Class instead of accepting an image name and using all
          of the configured volume mounts and the UAI namespace
          default resource configuration.  Additionally, UAIs created
          in the Administrative Workflow without a specified class will
          use the default Class.

          Setting 'default' to true when another Class is currently
          the default will cause the new Class to become the default
          and the previous default to stop being the default.
        required: false
        schema:
          type: boolean
        example: false
      - name: "public_ip"
        in: "query"
        description: |
          A flag indicating whether a UAI or Broker created using this
          class will present ports on a public IP address or only on a
          cluster visible IP address.  If not provided, the default is
          false, which makes resulting UAIs or Brokers visible only
          within the cluster.
        required: false
        schema:
          type: boolean
        example: false
      - name: "image_id"
        in: "query"
        description: |
          The image-id of the image to be used in UAIs created from
          this UAI / Broker Class.
        required: false
        schema:
          type: "string"
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      - name: "priority_class_name"
        in: "query"
        description: |
          Optional Kubernetes priority class name to be assigned to
          all UAIs / Brokers using this class.  The priority class
          name is used in Kubernetes to determine scheduling
          (i.e. node placement) priority in case of resource
          exhaustion and to associate resource quotas with Kubernetes
          pods.
        required: false
        schema:
          type: "string"
        example:  "uai-priority"
      - name: "namespace"
        in: "query"
        description: |
          The K8s namespace where UAIs of this class run.
        required: false
        schema:
          type: "string"
        example: "user"
      - name: "opt_ports"
        in: "query"
        description: |
          A comma-separated list of port numbers on which software running in a
          UAI created using this class may listen.  Unlike `ports` in the
          Single User UAI creation API, the port numbers here are not constrained
          by any configured range of available ports.  Any valid port number is
          legal.
        required: false
        schema:
          type: "string"
        example: "8080,80"
      - name: "uai_creation_class"
        in: "query"
        description: |
          For Brokers only, the class ID (UUID)  used to create UAIs
          created by Brokers of this class.  If this is not specified
          on a Broker, and there is a default class specified, the default
          class will be used.  If there is no default class, the
          broker will fail to create UAIs.  If this is specified on a
          non-Broker UAI it has no meaningful effect.
        required: false
        schema:
          type: "string"
        example: "f4e59aab-2765-7f49-f84a-9911eba30f9c"
      - name: "uai_compute_network"
        in: "query"
        description: |
          A flag indicating whether a UAI or Broker created using this
          class will include a network route to compute nodes. This option
          is likely not necessary for Brokers. Single User UAIs will require
          this flag for job launch capabilities.
        required: false
        schema:
          type: boolean
        example: true
      - name: "resource_id"
        in: "query"
        description: |
          Optional resource-id of the resource limit / request configuration
          to be used with UAIs created using this UAI / Broker Class.
        required: false
        schema:
          type: "string"
        example:  "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      - name: "volume_list"
        description: |
          Comma-separated list of volume-ids specifying the
          volume mounts to be included in the UAIs created using this
          UAI / Broker Class.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "array"
          items:
            type: "string"
        example: ["af4e59ab-6275-47f9-8f4a-90911eba3f9c","4e5f9aba-2675-7f49-f48a-0119b9a3f9ec"]
      - name: "tolerations"
        description: |
            Optional JSON string containing a JSON list of JSON objects
            describing tolerations that are added to the base toleration
            used in UAIs.  Tolerations allow UAIs to run on nodes that
            have been otherwise 'tainted' against certain activities. See
            Kubernetes documentation of Taints and Tolerations for more
            information on how to taint a node or construct a toleration.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "string"
        example: "[{\"key\": \"gpu_uais_only\", \"operator\": \"Exists\"}]"
      - name: "timeout"
        description: |
            Optional JSON string containing a timeout specification
            for UAIs created using this class.  The value contains a
            JSON string specifying a map with three optional key /
            value pairs, 'soft', 'hard', and 'warning'.  The 'soft'
            value specifies the number of seconds a UAI will run
            before it is eligible for termination due to being idle
            (i.e. no user is logged into it).  The 'hard' value
            specifies the number of seconds the UAI will run before
            being unconditionally terminated, even if a user is logged
            into it.  The 'warning' value specifies the number of
            seconds before the 'hard' timeout at which a warning
            message will be sent to all logged in sessions.  If a
            'soft' value is provided with no 'hard' value, the UAI
            will remain in place (subject to failure or scheduling
            issues) indefinitely as long as there is at least one
            active login session running. The UAI will terminate once
            the 'soft' value is exceeded and there are no longer any
            active login sessions. If a 'hard' value is specified
            without a 'soft' value, the UAI will remain in place until
            the 'hard' value is reached at which point it will
            terminate regardless of logged in sessions.  If both
            'soft' and 'hard' values are specified, the UAI will
            terminate at the 'soft' value if no active login session
            exists and will terminate unconditionally once the 'hard'
            value is reached.  If neither 'soft' nor 'hard' is
            specified, or no timeout parameter is provided at all, the
            UAI will run indefinitely.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "string"
        example: "{\"soft\": \"600\", \"hard\": \"1800\", \"warning\": \"30\"}"
      - name: "service_account"
        description: |
            Optional name of a Kubernetes service account to be assigned to
            UAIs created with this class.  Kubernetes service accounts grant
            access to Kubernetes Role Based Access Control (RBAC).  If not
            specified, the default service account for the namespace in which
            the UAI is created will be used.  Apply service accounts to UAI
            classes with care, since they potentially give UAIs access to
            Kubernetes functions that could be harmful.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "string"
        example: "default"
      - name: "replicas"
        description: |
            The number of UAI replicas created when a UAI of
            this class starts.  For end-user UAI classes this should
            be omitted or set to 1 because having multiple replicas of
            an end-user UAI only consumes resources and introduces
            potential negative interactions with brokers.  For other
            UAI classes, especially Broker UAI classes, setting this
            to a larger value can improve resiliency of the UAI and
            also provide better load-balanced handling of external
            connections.
        in: "query"
        required: false
        style: form
        explode: false
        schema:
          type: "string"
        example: "1"
      responses:
        201:
          description: "UAI / Broker Class updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UAIClass"
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UAIClass"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Remove a UAI / Broker Class"
      description: |
        Delete the specified UAI / Broker Class
      operationId: "delete_uas_class_admin"
      tags:
      - "classes"
      - "config"
      parameters:
      - name: "class_id"
        in: "path"
        required: true
        schema:
          type: "string"
        description: |
          The class identifier (UUID) of the UAI / Broker Class to be
          removed from the configuration.
        example: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
      responses:
        200:
          description: "Resource configuration removed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        404:
          description: "Failed to delete resource configuration {resource_id}"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

components:
  schemas:
    UAI:
      type: "object"
      properties:
        uai_name:
          type: "string"
        username:
          type: "string"
        publickey:
          type: "string"
        class_id:
          type: "string"
        public_ip:
          type: "boolean"
        resource_id:
          type: "string"
        image_id:
          type: "string"
        uai_img:
          type: "string"
        uai_status:
          type: "string"
        uai_msg:
          type: "string"
        uai_connect_string:
          type: "string"
        uai_portmap:
          type: "object"
          additionalProperties:
            type: "integer"
        uai_host:
          type: "string"
        uai_age:
          type: "string"
      example:
        uai_name: "uai-swilliams-cc09d2d2"
        username: "swilliams"
        class_id: "83156ef8-4286-4d57-8ffa-46ebf6c8f8b5"
        resource_id: "6f66edda-625f-4be3-b563-dca5844c85cf"
        image_id: "32ab9d45-f904-40f8-80a0-0881969a4f6e"
        public_ip: false
        publickey: "/Users/user/.ssh/id_rsa.pub"
        uai_img: "uai_img"
        uai_status: "Running"
        uai_reason: "Deploying"
        uai_host: "ncn-w001"
        uai_age: "13d8h"
    Volume:
      type: "object"
      properties:
        volume_id:
          type: "string"
        volumename:
          type: "string"
        mount_path:
          type: "string"
        volume_description:
          type: "object"
      example:
        volume_id:  "e2918379-7df1-4086-92fe-e3ec777a9b2e"
        volumename: "my-mount"
        mount_path: "/mnt/test"
        volume_description: |
          {"host_path":{"path": "/opt/host/path", "type": "DirectoryOrCreate"}}
    Image:
      type: "object"
      properties:
        image_id:
          type: "string"
        imagename:
          type: "string"
        default:
          type: "boolean"
      example:
        image_id: "af4e59ab-6275-47f9-8f4a-90911eba3f9c"
        imagename: "node.local/uas-sles15:latest"
        default: false
    Resource:
      type: "object"
      properties:
        resource_id:
          type: "string"
        comment:
          type: "string"
        limit:
          type: "string"
        request:
          type: "string"
      example:
        resource_id:  "e2918379-7df1-4086-92fe-e3ec777a9b2e"
        comment: "A resource limit for UAIs that only launch jobs"
        limit: "{ \"cpu\": \"100m\", \"memory\": \"100Mi\" }"
        request: "{ \"cpu\": \"100m\", \"memory\": \"100Mi\" }"
    UAIClass:
      type: "object"
      properties:
        class_id:
          type: "string"
        comment:
          type: "string"
        default:
          type: "boolean"
        public_ip:
          type: "boolean"
        priority_class_name:
          type: "string"
        namespace:
          type: "string"
        opt_ports:
          type: "string"
        uai_creation_class:
          type: "string"
        uai_compute_network:
          type: "boolean"
        tolerations:
          type: "string"
        uai_image:
          type: "object"
          properties:
            option:
              $ref: "#/components/schemas/Image"
        resource_config:
          type: "object"
          properties:
            option:
              $ref: "#/components/schemas/Resource"
        volume_mounts:
          type: "array"
          items:
            type: "object"
            properties:
              option:
                $ref: "#/components/schemas/Volume"
    Image_list:
      type: "object"
      properties:
        default_image:
          type: "string"
        image_list:
          type: "array"
          items:
            type: "string"
    UAS_mgr_info:
      type: "object"
      properties:
        service_name:
          type: "string"
        version:
          type: "string"
      example:
        service_name: "cray-uas-mgr"
        version: "version"
