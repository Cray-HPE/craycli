"""
cfs - Configuration Framework Service

This module generates the CLI from the OpenAPI specification, but customizes the
target section of the spec so that multiple groups with individual names and
member lists can be specified on the command line for the create subcommand.

This is accomplished by removing the autogenerated target-groups-members and
target-groups-name options and replacing them with a single target-group
option. A custom callback is provided to gather data from this new option into
a payload for passing on to the API.
"""
# pylint: disable=invalid-name
# pylint: disable=too-many-arguments
import click

from cray.core import option
from cray.generator import generate, _opt_callback
from cray.constants import FROM_FILE_TAG


GROUP_MEMBERS_PAYLOAD = 'target-groups-members'
GROUP_NAME_PAYLOAD = 'target-groups-name'
GROUPS_PAYLOAD = 'target-group'


cli = generate(__file__, condense=False)
CREATE_CMD = cli.commands['sessions'].commands['create']


def _targets_callback(cb):
    """
    Coerce the targets/group members from a comma-separated list to a list of
    mappings. Callback function for the target-groups option.
    """
    def _cb(ctx, param, value):
        groups = []
        for group, members in value:
            members = [m.strip() for m in members.split(',')]
            groups.append({"name": group, "members": members})
        if cb:
            return cb(ctx, param, groups)
        return groups
    return _cb


# Create a new option which can handle multiple groups with individual names
# and member lists. `option` acts as a decorator here.
option('--'+GROUPS_PAYLOAD, nargs=2, type=click.Tuple([str, str]), multiple=True,
       payload_name=GROUPS_PAYLOAD, callback=_targets_callback(_opt_callback),
       metavar='GROUPNAME MEMBER1[, MEMBER2, MEMBER3, ...]',
       help="Group members for the inventory. When the inventory definition is "
            "'image', only one group with a single IMS image id should be "
            "specified. Multiple groups can be specified.")(CREATE_CMD)

# Remove the generated params for the group names and group member lists.
# Add the new target-groups option.
params = []
for p in CREATE_CMD.params:
    if p.payload_name in (GROUP_MEMBERS_PAYLOAD, GROUP_NAME_PAYLOAD):
        continue
    # Hack to force order in list in front of globals
    # only for making the UX better
    elif p.payload_name == GROUPS_PAYLOAD:
        params.insert(1, p)
    else:
        params.append(p)

# Update the command with the new params
CREATE_CMD.params = params


def create_shim(func):
    """ Callback function to custom create our own payload """
    def _decorator(name, clone_url, branch, target_definition, target_group,
                   ansible_playbook, ansible_limit, ansible_config,
                   ansible_verbosity, **kwargs):
        payload = {
            name["name"]: name["value"],
            clone_url["name"]: clone_url["value"],
            branch["name"]: branch["value"],
            ansible_playbook["name"]: ansible_playbook["value"],
            "target": {
                "definition": target_definition["value"],
                "groups": target_group["value"]
            }
        }

        if ansible_limit["value"]:
            payload[ansible_limit["name"]] = ansible_limit["value"]

        if ansible_verbosity['value']:
            payload[ansible_verbosity["name"]] = ansible_verbosity["value"]

        if ansible_config['value']:
            payload[ansible_config["name"]] = ansible_config["value"]

        # Hack to tell the CLI we are passing our own payload; don't generate
        kwargs[FROM_FILE_TAG] = {"value": payload, "name": FROM_FILE_TAG}
        return func(**kwargs)
    return _decorator


# Update the create command with the callback
CREATE_CMD.callback = create_shim(CREATE_CMD.callback)
