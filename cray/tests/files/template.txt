""" Test the ${name} module."""


import json
import os

from cray.tests.conftest import cli_runner
from cray.tests.conftest import rest_mock


def test_example_${name}_help_info(cli_runner, rest_mock):
    """ Test `cray ${name}` to make sure the expected commands are available """

    ############################################################################
    # This example shows how to create a test that validates the outputs of
    # --help options for your module
    ############################################################################

    runner, cli, _ = cli_runner
    result = runner.invoke(cli, ['${name}'])
    assert result.exit_code == 0

    outputs = [
        "foo",
        "bar",
        "cli ${name} [OPTIONS] COMMAND [ARGS].."
    ]
    for out in outputs:
        assert out in result.output



def test_example_${name}_rest_call(cli_runner, rest_mock):
    """ Test `cray ${name} foo` with valid params """

    ############################################################################
    # This example shows how to create a test that validates the rest call
    # attempted by the CLI passes the proper URL and body parameters.
    ############################################################################

    runner, cli, config = cli_runner
    opt1 = 'foo'
    opt2 = 'bar'
    result = runner.invoke(cli, ['${name}', 'baz', 'create', '--option1', opt1,
                                 '--option2', opt2])
    assert result.exit_code == 0
    data = json.loads(result.output)
    assert data['method'] == 'POST'
    assert data['url'] == '{}/apis/baz/${name}'.format(config['default']['hostname'])
    assert data['body'] == {
        'option1': opt1,
        'option2': opt2
    }


def test_cray_${name}_more(cli_runner, rest_mock):
    """ Test more `cray ${name} ` things """


    ############################################################################
    # Use the examples in this file to implement more tests. Adequate test
    # coverage is require to have your module merged into the CLI.
    # Hint, you need more than two tests!
    # Also, remember to rename the example functions above!
    ############################################################################

    # IMPLEMENTME: More tests
    assert False
